/* BLOG Model for Relationship Extraction
 */

type Relation;
#Relation = 100;

random Real Sparsity(Relation r) ~ Beta(10,1000); // beta, gamma parameters

type Entity;
#Entity = 4;

type Fact;
origin Relation Rel(Fact);
origin Entity Arg1(Fact);
origin Entity Arg2(Fact);

#Fact(Rel = r, Arg1 = a1, Arg2 = a2) = 1;

random Boolean Holds(Fact f) ~ BooleanDistrib(Sparsity(Rel(f)));

/* A trigger is a set of words that is specific to the relation.
 * The categorical distribution is sampled from a Dirichlet distribution.
 */

type Trigger;
#Trigger = 2;

/* alpha should be a vector of length #Triggers */
fixed Real alpha = 0.5;
random Real[] Theta(Relation r) ~ Dirichlet(alpha, alpha);

/* A sentence expresses a fact. The fact is chosen uniformly
 * from the set of all true facts.
 */

type Sentence;
#Sentence = 2;
random Fact SourceFact(Sentence s) ~ UniformChoice({Fact f : Holds(f) == true});
random Entity Subject(Sentence s) = Arg1(SourceFact(s));
random Entity Object(Sentence s) = Arg2(SourceFact(s));

random Integer TriggerID(Sentence s) ~ Categorical(Theta(Rel(SourceFact(s))));
random Trigger Verb(Sentence s) = idToTrigger( TriggerID(s) );

/* Observations go here */
distinct Relation R1, R2;
distinct Sentence Sent[2];

distinct Trigger Trig[2];
fixed Trigger idToTrigger(Integer i) 
  = TabularInterp(1,
    0, Trig[0],
    1, Trig[1]
  );


// This works
//distinct Entity X1, Y1;
// This one is giving 0 probability worlds
distinct Entity X1, Y1, X2, Y2;

obs Subject(Sent[0]) = X1;
obs Object(Sent[0]) = Y1;
obs Verb(Sent[0]) = Trig[0];
/*
obs Subject(Sent[1]) = Y1;
obs Object(Sent[1]) = X1;
obs Verb(Sent[1]) = Trig[1];
*/
obs Subject(Sent[1]) = X2;
obs Object(Sent[1]) = Y2;
obs Verb(Sent[1]) = Trig[1];


/* Queries go here */
query SourceFact(Sent[0]) == SourceFact(Sent[1]);
