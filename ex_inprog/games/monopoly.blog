/** Possible worlds simulate plays of Monopoly. 
 ** See monopoly.eblog for possible observations and queries. **
 ** author siddharth srivastava 
    modified by Bharath Ramsundar
 **/

// Number of properties on the board
fixed Integer NumSquares = 40; 
// Number of timesteps for which to simulate
fixed Timestep MaxTime = @250; 
//Replace with another property value function
fixed Integer propertyValue(Integer sq) = 5;
fixed Integer propertyRent(Integer sq) = 5;

random Integer NumPlayers ~ Poisson(6);
          
//Must move if dice was thrown at the previous timestep
random Boolean applied_move(Integer p, Timestep t) {
  if t == @0 then = false 
  else if whosTurn(t) == p & applied_throwDice(p,Pred(t)) then = true
  else = false
};

//Must throw dice if not thrown yet in this turn and it is player p's turn
random Boolean applied_throwDice(Integer p, Timestep t) {
  if t == @0 then = false
  else if exists Timestep tstep ((timeOfLastTurnAdvance(t) < tstep) & 
          (tstep<t) & applied_throwDice(p,tstep)) then = false
  else if !(whosTurn(t) == p) 
      then = false
  else = true
};

//Must advance turn if all obligations are done
random Boolean applied_advanceTurn(Timestep t) {
	if t == @0 then = true
	else if obligationsDone(t) then = true
	else = false
};

//  precons for axn application at t need to talk about conditions at t itself
//  If on an unowned property, can purchase it
random Boolean applied_purchase(Integer player, Integer propertyNum, Timestep t) {
  if obligationsDone(t) & playerAt(player, t) == propertyNum & 
     whosTurn(t) == player & 
	   propertyOwner(propertyNum, t) == NumPlayers 
     then ~ Bernoulli(0.5)
	      //This is 50% likely over all rand generations, not for this player alone
   else = false
};
  
//  Must pay rent if it is due and there is sufficient capital
random Boolean applied_payRent(Integer p, Integer owner, Timestep t) {
  if t == @0 then = false
  else if rentDue(p, owner, t) < capital(p, t) 
  	 & rentDue(p, owner, t) > 0
  	 then = true
  else = false
};


//  An action is applied if either of throwDice, advanceTurn, move, payRent,
//  purchase take place
random Boolean axnApplied(Timestep t) {
	= (exists Integer p (p < NumPlayers) & 
      (exists Integer o (o < NumPlayers) & 
	  	  (applied_throwDice(p, t) | applied_move(p, t) | applied_advanceTurn(t) | 
         applied_purchase(p, playerAt(p, t), t) | applied_payRent(p, o, t)))) 
};

random Boolean axnsUntil(Timestep t) {
	//= forall Integer n (n < t -> axnApplied(n))
	= forall Integer n ((n < t) & axnApplied(n))
};

//player p's position at timestep t
random Integer playerAt(Integer p, Timestep t) {
  if t == @0 then = 0
  else if p == whosTurn(Pred(t)) & applied_move(p,Pred(t)) 
    then = (playerAt(p, Pred(t)) + diceVal1(Pred(t)) +  diceVal2(Pred(t))) % NumSquares 
    else = playerAt(p, Pred(t))
};

//Value of the dice1. Set to a new value if throwDice occured at previous timestep.
random Integer diceVal1(Timestep t) { 
  if t == @0 then = 0
  else if exists Integer p (p < NumPlayers & p == whosTurn(Pred(t)) 
       & applied_throwDice(p, Pred(t))) 
    then ~ UniformInt(1,6)
  else = diceVal1(Pred(t))
};

//Similar to diceVal1
random Integer diceVal2(Timestep t) {
  if t == @0 then = 0
  else if exists Integer p (p < NumPlayers & p == whosTurn(Pred(t)) & 
           applied_throwDice(p, Pred(t))) 
    then ~ UniformInt(1, 6)
  else = diceVal2(Pred(t))
};

//Gets the player who's turn this is.
//Implements +1 mod NumPlayers
random Integer whosTurn(Timestep t) {
	if t == @0 then = 0
	else if t == @1 then = 0
	else if applied_advanceTurn(Pred(t)) & (whosTurn(Pred(t)) == Pred(NumPlayers)) 
    then = 0
	else if applied_advanceTurn(Pred(t)) 
    then = Succ(whosTurn(Pred(t)))
	else = whosTurn(Pred(t))
};

//In every turn, throwing dice and moving according to them must take place.
//If a player lands on another's property, rentDues must be made 0.
//Turn is allowed to change only if all these obligations are done.
random Boolean obligationsDone(Timestep t) {
  if t == @0 then = false
  else if applied_advanceTurn(Pred(t)) 
    then = false
  else if exists Timestep tstep (timeOfLastTurnAdvance(t) < tstep) &
          (tstep < t) & (exists Integer p p < NumPlayers & whosTurn(t) == p &
          applied_throwDice(p,tstep)) &
          exists Timestep tstep (timeOfLastTurnAdvance(t) < tstep) & (tstep < t) &
          (exists Integer p p < NumPlayers & whosTurn(t) == p & 
          applied_move(p,tstep)) 
    then = 
      //forall Integer p ((p < NumPlayers & whosTurn(t) == p) ->
      //  (forall Integer owner (owner < NumPlayers & owner != p) -> 
      //    (rentDue(p,owner,t) == 0)))
      forall Integer p ((p < NumPlayers & whosTurn(t) == p) & 
        (forall Integer owner (owner < NumPlayers & owner != p) & 
          (rentDue(p,owner,t) == 0)))
};

//Gets the timestep at which this turn started. Used to determine if the
//required actions for the turn have been executed, rent has been paid etc.
random Timestep timeOfLastTurnAdvance(Timestep t) {
  if t == @0 then = @0
  else if applied_advanceTurn(Pred(t)) then = Pred(t)
  else = timeOfLastTurnAdvance(Pred(t))
};

random Integer capital(Integer player, Timestep t) {
  if t == 0 then = 500
  else if exists Integer prop (prop < NumSquares) & 
          applied_purchase(player, prop, Pred(t)) 
    then = capital(player, Pred(t)) - propertyValue(playerAt(player, Pred(t)))
  else if exists Integer renter (renter<NumPlayers & 
                                 applied_payRent(renter, player, Pred(t)))
    then = capital(player, Pred(t)) + rentDue(rentPayerFor(player, Pred(t)), player, Pred(t))
  //Need to use rentPayerFor(..) because existentially bound variables under the
  //"if... " do not retain their bindings for the "then..."
  // else if exists Integer owner (owner<NumPlayers & rentDue(player, owner, Pred(t)) 
  //        & applied_payRent(player, Pred(t)) )
  //        	 then = capital(player, Pred(t)) - rentDue(player, owner, Pred(t))
  // doesn't work because scope doesn't extend beyond "if.."
  else if exists Integer owner (owner < NumPlayers) & 
          applied_payRent(player, owner, Pred(t))
    then = capital(player, Pred(t)) - propertyRent(playerAt(player, Pred(t)))
  else = capital(player, Pred(t))
};

//Set to NumPlayers (meaning not owned by any player) by default
//Changed by purchase action. Auctioning of property not modeled.
random Integer propertyOwner(Integer propertyNum, Timestep t) {
  if t == @0 then = NumPlayers
  else if (exists Integer p (p < NumPlayers) & whosTurn(Pred(t)) == p &
           applied_purchase(p, propertyNum, Pred(t))) 
    then ~ Iota({Integer p: p < NumPlayers & whosTurn(Pred(t)) == p & applied_purchase(p, propertyNum, Pred(t))})
  else = propertyOwner(propertyNum, Pred(t))
};

//Rent is not due if t=0 or if already paid this turn. It is equal to the
//property value if not already paid. 
random Integer rentDue(Integer currentPlayer, Integer owner, Timestep t) {
  if t == @0 then = 0
  else if applied_payRent(currentPlayer, owner, Pred(t)) then = 0
  else if exists Timestep tstep (timeOfLastTurnAdvance(t) < tstep) &
          (tstep < t) & applied_payRent(currentPlayer, owner, tstep) then = 0		
  else if whosTurn(t) == currentPlayer & 
          propertyOwner(playerAt(currentPlayer, Pred(t)), Pred(t)) == owner & 
          owner != currentPlayer 
    then = propertyRent(playerAt(currentPlayer, Pred(t))) else = rentDue(currentPlayer, owner, Pred(t)) };

//Use Iota function to extract rent. Needed to determine capital of a player if 
//another player paid it rent. (See capital(player, t))
random Integer rentPayerFor(Integer player, Timestep t) {
  ~ Iota({Integer renter: renter < NumPlayers & applied_payRent(renter, player, t)})
};

random Integer numberRentsPaid(Integer player, Timestep t) {
	if t == @0 then = 0
	else if exists Integer owner (owner < NumPlayers & 
                                applied_payRent(player, owner, Pred(t))) 
    then = Succ(numberRentsPaid(player, Pred(t)))
	else = numberRentsPaid(player, Pred(t))
};

random Integer numberRentsObtained(Integer player, Timestep t) {
	if t == @0 then = 0
	else if exists Integer renter (renter < NumPlayers & 
      applied_payRent(renter, player, Pred(t))) 
    then = Succ(numberRentsObtained(player, Pred(t)))
	else = numberRentsObtained(player, Pred(t))
};

//obs LessThan(capital(1, MaxTime), 450) = true;

obs GreaterThan(numberRentsPaid(0, MaxTime), 2) = true;
obs GreaterThan(numberRentsObtained(0, MaxTime), 1) = true;

query axnsUntil(MaxTime);
query capital(0, MaxTime);
query capital(1, MaxTime);
query capital(2, MaxTime);

query playerAt(0,MaxTime);
query playerAt(1,MaxTime);
query playerAt(2,MaxTime);
query NumPlayers;


// Query to test if player 2 paid rent at any time in the game
//query exists Timestep t exists Integer o (t<MaxTime & o<NumPlayers & applied_payRent(2,o,t));
//Doesn't work. (Loop on o & t)

query exists Timestep t (t < MaxTime & (exists Integer o (o < NumPlayers) & 
                                                         applied_payRent(2,o,t)));
