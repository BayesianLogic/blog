/* BLOG Model for Relationship Extraction
 */

type Relation;
//#Relation = 100;

fixed Real alpha = 10;
fixed Real beta = 100;
random Real Sparsity(Relation r) ~ Beta(alpha, beta);
//random Real Sparsity(Relation r) = 0.1;

type Entity;

type Fact;
origin Relation Rel(Fact);
origin Entity Arg1(Fact);
origin Entity Arg2(Fact);

#Fact(Rel = r, Arg1 = a1, Arg2 = a2) = 1;

random Boolean Holds(Fact f) ~ BooleanDistrib(Sparsity(Rel(f)));

/* A trigger is a set of words that is specific to the relation.
 * The categorical distribution is sampled from a Dirichlet distribution.
 */

type Trigger;

/* alpha should be a vector of length #Triggers */
fixed Real dir_alpha = 1.0;
fixed Integer numTrigs = 3;
random Real[] Theta(Relation r) ~ SymmetricDirichlet(numTrigs, dir_alpha);

/* A sentence expresses a fact. The fact is chosen uniformly
 * from the set of all true facts.
 */

type Sentence;
random Fact SourceFact(Sentence s) ~ UniformChoice({Fact f : Holds(f) == true});
random Entity Subject(Sentence s) = Arg1(SourceFact(s));
random Entity Object(Sentence s) = Arg2(SourceFact(s));

random Integer TriggerID(Sentence s) {
 if (SourceFact(s) != null) then ~ Categorical(Theta(Rel(SourceFact(s))))
};

random Trigger Verb(Sentence s) = idToTrigger( TriggerID(s) );

/* Observations go here */

obs Subject(Sent[0]) = A;
obs Object(Sent[0]) = B;
obs Verb(Sent[0]) = Trig[0];

obs Subject(Sent[1]) = C;
obs Object(Sent[1]) = D;
obs Verb(Sent[1]) = Trig[0];

obs Subject(Sent[2]) = A;
obs Object(Sent[2]) = B;
obs Verb(Sent[2]) = Trig[1];

obs Subject(Sent[3]) = C;
obs Object(Sent[3]) = D;
obs Verb(Sent[3]) = Trig[2];

obs Subject(Sent[4]) = E;
obs Object(Sent[4]) = F;
obs Verb(Sent[4]) = Trig[1];

obs Subject(Sent[5]) = E;
obs Object(Sent[5]) = F;
obs Verb(Sent[5]) = Trig[2];



distinct Entity A,B,C,D,E,F;
distinct Relation R[3];
distinct Sentence Sent[6];

distinct Trigger Trig[3];
fixed Trigger idToTrigger(Integer i) 
  = TabularInterp(1,
    0, Trig[0],
    1, Trig[1],
	2, Trig[2]
  );



/* Queries go here */

query Rel(SourceFact(Sent[0])) == Rel(SourceFact(Sent[2]));
query Rel(SourceFact(Sent[1])) == Rel(SourceFact(Sent[3]));
query Rel(SourceFact(Sent[4]));
query Rel(SourceFact(Sent[5]));



