/* BLOG Model for Relationship Extraction
 */

type Relation;
//#Relation = 100;

fixed Real alpha = 10;
fixed Real beta = 100;
random Real Sparsity(Relation r) ~ Beta(alpha, beta);
//random Real Sparsity(Relation r) = 0.1;

type Entity;

type Fact;
origin Relation Rel(Fact);
origin Entity Arg1(Fact);
origin Entity Arg2(Fact);

#Fact(Rel = r, Arg1 = a1, Arg2 = a2) = 1;

random Boolean Holds(Fact f) ~ BooleanDistrib(Sparsity(Rel(f)));

/* A trigger is a set of words that is specific to the relation.
 * The categorical distribution is sampled from a Dirichlet distribution.
 */

type Trigger;

/* alpha should be a vector of length #Triggers */
fixed Real dir_alpha = 1.0;
fixed Integer numTrigs = 31;
random Real[] Theta(Relation r) ~ SymmetricDirichlet(numTrigs, dir_alpha);

/* A sentence expresses a fact. The fact is chosen uniformly
 * from the set of all true facts.
 */

type Sentence;
random Fact SourceFact(Sentence s) ~ UniformChoice({Fact f : Holds(f) == true});
random Entity Subject(Sentence s) = Arg1(SourceFact(s));
random Entity Object(Sentence s) = Arg2(SourceFact(s));

random Integer TriggerID(Sentence s) {
 if (SourceFact(s) != null) then ~ Categorical(Theta(Rel(SourceFact(s))))
};

random Trigger Verb(Sentence s) = idToTrigger( TriggerID(s) );

/* Observations go here */

distinct Sentence Sent[20];
distinct Relation R[5];

distinct Entity Obama, United_States, Prana_Mukherjee, USA, Nicholas_B_Dirks, UC_Berkeley, Stuart_Russell, Artifical_Intelligence, Jitendra_Malik, Computer_Vision, Machine_Learning, David_Wagner, Security, Statistical_Learning_Theory, Chris, Mike_Jordan, Lei, Chris_and_Lei, JK_Rowling, Harry_Potter, JR_Tolkien, The_Hobbit, Lord_Of_The_Rings, Sheryl_Sandberg, Lean_In, George_Orwell, Animal_Farm;

distinct Trigger is_the_president_of, is_a_leader_of, is_the_chancellor_of, teaches_a_class_in, teaches, is_a_professor_of, is_a_student_of, does_research_under, takes_a_class_from, wrote, authored, is_the_author_of, produced_and_wrote, made_money_from, got_rich_from, produced_money_from;

fixed Trigger idToTrigger(Integer i)
 = TabularInterp(1, 
	0, is_the_president_of,
	1, is_a_leader_of,
	2, is_the_chancellor_of,
	3, teaches_a_class_in,
	4, teaches,
	5, is_a_professor_of,
	6, is_a_student_of,
	7, does_research_under,
	8, takes_a_class_from,
	9, wrote,
	10, authored,
	11, is_the_author_of,
	12, produced_and_wrote,
	13, made_money_from,
	14, got_rich_from,
	15, produced_money_from
  );

/* Evidence */
obs Subject(Sent[0]) = Obama;
obs Object(Sent[0]) = United_States;
obs Verb(Sent[0]) = is_the_president_of;
obs Rel(SourceFact(Sent[0])) = R[0]; // Relation Observation

obs Subject(Sent[1]) = Pranab_Mukherjee;
obs Object(Sent[1]) = is_the_president_of;
obs Verb(Sent[1]) = India;

obs Subject(Sent[2]) = Obama;
obs Object(Sent[2]) = USA;
obs Verb(Sent[2]) = is_a_leader_of;

obs Subject(Sent[3]) = Nicholas_B_Dirks;
obs Object(Sent[3]) = UC_Berkeley;
obs Verb(Sent[3]) = is_a_leader_of;

obs Subject(Sent[4]) = Nicholas_B_Dirks;
obs Object(Sent[4]) = UC_Berkeley;
obs Verb(Sent[4]) = is_the_chancellor_of;

obs Subject(Sent[5]) = Stuart_Russell;
obs Object(Sent[5]) = Artificial_Intelligence;
obs Verb(Sent[5]) = teaches_a_class_in;
obs Rel(SourceFact(Sent[5])) = R[1]; // Relation Observation

obs Subject(Sent[6]) = Jitendra_Malik;
obs Object(Sent[6]) = Computer_Vision;
obs Verb(Sent[6]) = teaches_a_class_in;

obs Subject(Sent[7]) = Jitendra_Malik;
obs Object(Sent[7]) = Machine_Learning;
obs Verb(Sent[7]) = teaches;

obs Subject(Sent[8]) = David_Wagner;
obs Object(Sent[8]) = Security;
obs Verb(Sent[8]) = is_a_professor_of;

obs Subject(Sent[9]) = Mike_Jordan;
obs Object(Sent[9]) = Statistical_Learning_Theory;
obs Verb(Sent[9]) = is_a_professor_of;

obs Subject(Sent[10]) = Chris;
obs Object(Sent[10]) = Stuart_Russell;
obs Verb(Sent[10]) = is_a_student_of;
obs Rel(SourceFact(Sent[10])) = R[2]; // Relation Observation

obs Subject(Sent[11]) = Chris;
obs Object(Sent[11]) = Stuart_Russell;
obs Verb(Sent[11]) = does_research_under;

obs Subject(Sent[12]) = Chris;
obs Object(Sent[12]) = Mike_Jordan;
obs Verb(Sent[12]) = takes_a_class_from;

obs Subject(Sent[13]) = Lei;
obs Object(Sent[13]) = Stuart_Russell;
obs Verb(Sent[13]) = does_research_under;

obs Subject(Sent[14]) = Chris_and_Lei;
obs Object(Sent[14]) = Stuart_Russell;
obs Verb(Sent[14]) = does_research_under;

obs Subject(Sent[15]) = JK_Rowling;
obs Object(Sent[15]) = Harry_Potter;
obs Verb(Sent[15]) = wrote;
obs Rel(SourceFact(Sent[15])) = R[3]; // Relation Observation

obs Subject(Sent[16]) = JK_Rowling;
obs Object(Sent[16]) = Harry_Potter;
obs Verb(Sent[16]) = authored;

obs Subject(Sent[17]) = JR_Tolkien;
obs Object(Sent[17]) = The_Hobbit;
obs Verb(Sent[17]) = authored;

obs Subject(Sent[18]) = JR_Tolkien;
obs Object(Sent[18]) = Lord_Of_The_Rings;
obs Verb(Sent[18]) = is_the_author_of;

obs Subject(Sent[19]) = Sheryl_Sandberg;
obs Object(Sent[19]) = Lean_In;
obs Verb(Sent[19]) = produced_and_wrote;

obs Subject(Sent[20]) = JK_Rowling;
obs Object(Sent[20]) = Harry_Potter;
obs Verb(Sent[20]) = made_money_from;
obs Rel(SourceFact(Sent[20])) = R[4]; // Relation Observation

obs Subject(Sent[21]) = JR_Tolkien;
obs Object(Sent[21]) = Lord_Of_The_Rings;
obs Verb(Sent[21]) = made_money_from;

obs Subject(Sent[22]) = JR_Tolkien;
obs Object(Sent[22]) = Lord_Of_The_Rings;
obs Verb(Sent[22]) = got_rich_from;

obs Subject(Sent[23]) = Sheryl_Sandberg;
obs Object(Sent[23]) = Lean_In;
obs Verb(Sent[23]) = produced_money_from;

obs Subject(Sent[24]) = George_Orwell;
obs Object(Sent[24]) = Animal_Farm;
obs Verb(Sent[24]) = made_money_from;

/* Queries Go Here */
query Rel(SourceFact(Sent[0]));
query Rel(SourceFact(Sent[1]));
query Rel(SourceFact(Sent[2]));
query Rel(SourceFact(Sent[3]));
query Rel(SourceFact(Sent[4]));
query Rel(SourceFact(Sent[5]));
query Rel(SourceFact(Sent[6]));
query Rel(SourceFact(Sent[7]));
query Rel(SourceFact(Sent[8]));
query Rel(SourceFact(Sent[9]));
query Rel(SourceFact(Sent[10]));
query Rel(SourceFact(Sent[11]));
query Rel(SourceFact(Sent[12]));
query Rel(SourceFact(Sent[13]));
query Rel(SourceFact(Sent[14]));
query Rel(SourceFact(Sent[15]));
query Rel(SourceFact(Sent[16]));
query Rel(SourceFact(Sent[17]));
query Rel(SourceFact(Sent[18]));
query Rel(SourceFact(Sent[19]));
query Rel(SourceFact(Sent[20]));
query Rel(SourceFact(Sent[21]));
query Rel(SourceFact(Sent[22]));
query Rel(SourceFact(Sent[23]));
query Rel(SourceFact(Sent[24]));
query Rel(SourceFact(Sent[25]));

