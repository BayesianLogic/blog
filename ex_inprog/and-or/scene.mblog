Type Scene;
Type Road;
Type Grass;
Type Person;
Type Car;
Type Cow;


// GENERAL PURPOSE
Random NaturalNum myAdd(Integer a, Integer b) ~ Add[](a,b);
Random Integer Sub(Integer a, Integer b) ~ Diff[](a,b);
Random Integer Mult(Integer a, Integer b) ~ Mul[](a,b);

// SCENE
Random NaturalNum SceneType(Scene s) ~ UniformInt[1,2];
nonrandom NaturalNum Xmin = 1;
nonrandom NaturalNum Ymin = 1;
nonrandom NaturalNum Zmin = 1;
nonrandom NaturalNum Xmax = 20; 
nonrandom NaturalNum Ymax = 20; 
nonrandom NaturalNum Zmax = 20;


// ROAD
origin Scene WhichScene(Road);
#Road(WhichScene = s){ if (s!=null & SceneType(s)=1) then = 1 else  =0 };
Random Integer Height(Road r) ~ UniformInt[3,5]; 

// GRASS
origin Scene WhichScene(Grass);
#Grass(WhichScene = s){ if (s!=null & SceneType(s)=2) then = 1 else =0};
Random Integer Height(Grass g) ~ UniformInt[3,5];

// CAR
origin Scene WhichScene(Car);
origin Road OnRoad(Car);
#Car(WhichScene = s, OnRoad = r){ if (s!=null & r!=null & SceneType(s)=1) then ~UniformInt[1,1] else =0 };

Random Integer Xsize(Car c) ~ UniformInt[6,9];
Random Integer X0(Car c) ~ UniformInt[Xmin,Xmax];
Random Integer X1(Car c) = myAdd(X0(c), Xsize(c));

Random Integer Ysize(Car c) ~ UniformInt[2,4];
Random Integer Y0(Car c) = Height(OnRoad(c));
Random Integer Y1(Car c) = myAdd(Y0(c), Ysize(c));

Random Integer Zsize(Car c) ~ UniformInt[3,5];
Random Integer Z0(Car c) ~ UniformInt[Zmin,Zmax];
Random Integer Z1(Car c) = myAdd(Z0(c), Zsize(c));

// COW
origin Scene WhichScene(Cow);
origin Grass OnGrass(Cow);
#Cow(WhichScene = s, OnGrass = g){ if (s!=null & SceneType(s)=2 & g!=null) then = 1 else =0 };

Random Integer Xsize(Cow c) ~ UniformInt[5,8];
Random Integer X0(Cow c) ~ UniformInt[Xmin,Xmax];
Random Integer X1(Cow c) = myAdd(X0(c), Xsize(c));

Random Integer Ysize(Cow c) ~ UniformInt[2,4];
Random Integer Y0(Cow c) = Height(OnGrass(c));
Random Integer Y1(Cow c) = myAdd(Y0(c), Ysize(c));

Random Integer Zsize(Cow c) ~ UniformInt[2,4];
Random Integer Z0(Cow c) ~ UniformInt[Zmin,Zmax];
Random Integer Z1(Cow c) = myAdd(Z0(c), Zsize(c));


// PERSON
origin Scene WhichScene(Person);
origin Road OnRoad(Person);
origin Grass OnGrass(Person);
#Person(WhichScene = s, OnRoad = r){ if (s!=null & SceneType(s)=1 & r!=null) then ~UniformInt[1,1]() else =0 };
#Person(WhichScene = s, OnGrass = g){ if (s!=null & SceneType(s)=2 & g!=null) then ~UniformInt[1,1]() else =0 };

Random Integer Xsize(Person p) ~ UniformInt[1,3];
Random Integer X0(Person p) ~ UniformInt[Xmin,Xmax];
Random Integer X1(Person p) = myAdd(X0(p), Xsize(p));

Random Integer Ysize(Person p) ~ UniformInt[2,3];
Random Integer Y0(Person p){ if (SceneType(WhichScene(p))=1) then = Height(OnRoad(p)) else = Height(OnGrass(p)) };
Random Integer Y1(Person p) = myAdd(Y0(p), Ysize(p));

Random Integer Zsize(Person p) ~ UniformInt[1,3];
Random Integer Z0(Person p) ~ UniformInt[Zmin,Zmax];
Random Integer Z1(Person p) = myAdd(Z0(p), Zsize(p));


// NO OVERLAPS IN 3D FOR THE SCENE
Random Boolean NoOverlap_person2() = (forall Person p1 (forall Person p2 ((p2!=p1) ->  
    ( (X1(p1)<X0(p2)) | (X0(p1) > X1(p2)) | (Y1(p1)<Y0(p2)) | (Y0(p1)>Y1(p2)) | (Z1(p1)<Z0(p2)) | (Z0(p1) > Z1(p2)) ))));

Random Boolean NoOverlap_car2() = (forall Car c1 (forall Car c2 ((c2!=c1) ->  
    ( (X1(c1)<X0(c2)) | (X0(c1) > X1(c2)) | (Y1(c1)<Y0(c2)) | (Y0(c1)>Y1(c2)) | (Z1(c1)<Z0(c2)) | (Z0(c1) > Z1(c2)) ))));

Random Boolean NoOverlap_cow2() = (forall Cow c1 (forall Cow c2 ((c2!=c1) ->  
    ( (X1(c1)<X0(c2)) | (X0(c1) > X1(c2)) | (Y1(c1)<Y0(c2)) | (Y0(c1)>Y1(c2)) | (Z1(c1)<Z0(c2)) | (Z0(c1) > Z1(c2)) ))));

Random Boolean NoOverlap_person_car() = (forall Person p1 (forall Car c2(  
    (X1(p1)<X0(c2)) | (X0(p1) > X1(c2)) | (Y1(p1)<Y0(c2)) | (Y0(p1)>Y1(c2)) | (Z1(p1)<Z0(c2)) | (Z0(p1) > Z1(c2)) )));

Random Boolean NoOverlap_person_cow() = (forall Person p1 (forall Cow c2( 
    (X1(p1)<X0(c2)) | (X0(p1) > X1(c2)) | (Y1(p1)<Y0(c2)) | (Y0(p1)>Y1(c2)) | (Z1(p1)<Z0(c2)) | (Z0(p1) > Z1(c2)) )));

Random Boolean NoOverlap() =  (NoOverlap_person2() & NoOverlap_car2() & NoOverlap_cow2() & NoOverlap_person_car() & NoOverlap_person_cow());


// COLOR OF VOXELS IN 3D
Random Integer Color3D(Integer X, Integer Y, Integer Z){
    if (X<Xmin | X>Xmax | Y<Ymin | Y>Ymax | Z<Zmin | Z>Zmax) 
        then = 0
    
    elseif (exists Car o ( ((Z= Z0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Y>=Y0(o)) & (Y<=Y1(o))) |
                           ((Y= Y0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) |
                           ((X= X0(o)) & (Y>=Y0(o)) & (Y<=Y1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) ))
    then = 5
    
    elseif (exists Cow o ( ((Z= Z0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Y>=Y0(o)) & (Y<=Y1(o))) |
                           ((Y= Y0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) |
                           ((X= X0(o)) & (Y>=Y0(o)) & (Y<=Y1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) ))
    then = 10
    
    elseif (exists Person o ( ((Z= Z0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Y>=Y0(o)) & (Y<=Y1(o))) |
                           ((Y= Y0(o)) & (X>=X0(o)) & (X<=X1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) |
                           ((X= X0(o)) & (Y>=Y0(o)) & (Y<=Y1(o)) & (Z>=Z0(o)) & (Z<=Z1(o))) ))
    then = 15
    
    elseif (exists Grass o (Y= Height(o))) then = 25
    
    elseif (exists Road o (Y= Height(o))) then = 30
};



// 2D IMAGE FORMATION FOR CAMERA  
nonrandom NaturalNum xMin = 5;
nonrandom NaturalNum xMax = 11; 
nonrandom NaturalNum yMin = 5;
nonrandom NaturalNum yMax = 11; 
nonrandom NaturalNum xc  = 7;
nonrandom NaturalNum yc = 7;

Random Integer Zintercept(Person o, Integer x, Integer y){
         if ((X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))))   
             then  = Z0(o)    
                                
         elseif ((x<=xc) &  (X0(o) >= myAdd(xc,Mult(Z0(o),Diff(xc,x)))) & (X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) &  (Mult(Diff(X0(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) &      
         (Mult(Diff(X0(o),xc), Diff(yc,y)) <= Mult(Diff(Y1(o),yc),Diff(xc,x))) ) then   = Z1(o) // need to change 

        elseif ((y<=yc) &  (Y0(o) >= myAdd(yc,Mult(Z0(o),Diff(yc,y)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) &  (Mult(Diff(Y0(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y0(o), yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) ) then   = Z1(o) // need to change    
    
        elseif ((x>xc) &  (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) <= myAdd(xc,Mult(Z0(o), Diff(xc,x)))) & (Mult(Diff(X1(o),xc),Diff(yc,y))<=Mult(Diff(Y1(o),yc),Diff(xc,x))) &     
         (Mult(Diff(X1(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) ) then  = Z1(o) // need to change

        elseif ((y>yc) &  (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) <= myAdd(yc,Mult(Z0(o), Diff(yc,y)))) &  (Mult(Diff(Y1(o),yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y1(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) ) then  = Z1(o) // need to change
        
        else = 0
};


Random Integer Zintercept(Car o, Integer x, Integer y){
         if ((X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))))   
             then  = Z0(o)    
                                
         elseif ((x<=xc) &  (X0(o) >= myAdd(xc,Mult(Z0(o),Diff(xc,x)))) & (X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) &  (Mult(Diff(X0(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) &      
         (Mult(Diff(X0(o),xc), Diff(yc,y)) <= Mult(Diff(Y1(o),yc),Diff(xc,x))) ) then   = Z1(o) // need to change 

        elseif ((y<=yc) &  (Y0(o) >= myAdd(yc,Mult(Z0(o),Diff(yc,y)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) &  (Mult(Diff(Y0(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y0(o), yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) ) then   = Z1(o) // need to change    
    
        elseif ((x>xc) &  (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) <= myAdd(xc,Mult(Z0(o), Diff(xc,x)))) & (Mult(Diff(X1(o),xc),Diff(yc,y))<=Mult(Diff(Y1(o),yc),Diff(xc,x))) &     
         (Mult(Diff(X1(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) ) then  = Z1(o) // need to change

        elseif ((y>yc) &  (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) <= myAdd(yc,Mult(Z0(o), Diff(yc,y)))) &  (Mult(Diff(Y1(o),yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y1(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) ) then  = Z1(o) // need to change
        
        else = 0
};

Random Integer Zintercept(Cow o, Integer x, Integer y){
         if ((X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))))   
             then  = Z0(o)    
                                
         elseif ((x<=xc) &  (X0(o) >= myAdd(xc,Mult(Z0(o),Diff(xc,x)))) & (X0(o) <= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) &  (Mult(Diff(X0(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) &      
         (Mult(Diff(X0(o),xc), Diff(yc,y)) <= Mult(Diff(Y1(o),yc),Diff(xc,x))) ) then   = Z1(o) // need to change 

        elseif ((y<=yc) &  (Y0(o) >= myAdd(yc,Mult(Z0(o),Diff(yc,y)))) & (Y0(o) <= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) &  (Mult(Diff(Y0(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y0(o), yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) ) then   = Z1(o) // need to change    
    
        elseif ((x>xc) &  (X1(o) >= myAdd(xc,Mult(Z1(o),Diff(xc,x)))) & (X1(o) <= myAdd(xc,Mult(Z0(o), Diff(xc,x)))) & (Mult(Diff(X1(o),xc),Diff(yc,y))<=Mult(Diff(Y1(o),yc),Diff(xc,x))) &     
         (Mult(Diff(X1(o),xc),Diff(yc,y)) >= Mult(Diff(Y0(o),yc),Diff(xc,x))) ) then  = Z1(o) // need to change

        elseif ((y>yc) &  (Y1(o) >= myAdd(yc,Mult(Z1(o),Diff(yc,y)))) & (Y1(o) <= myAdd(yc,Mult(Z0(o), Diff(yc,y)))) &  (Mult(Diff(Y1(o),yc),Diff(xc,x)) <= Mult(Diff(X1(o),xc),Diff(yc,y))) &
        (Mult(Diff(Y1(o),yc),Diff(xc,x)) >= Mult(Diff(X0(o),xc),Diff(yc,y))) ) then  = Z1(o) // need to change
        
        else = 0
};


Random Integer Z(Integer x, Integer y){ if  ((x<=xMax) & (x>=xMin) & (y<=yMax) & (y>=yMin)) 
    then ~SetMin[]({Integer z: z>=0 & z<Zmax & ((exists Person o(Zintercept(o,x,y)=z)) | (exists Car o(Zintercept(o,x,y)=z)) | (exists Cow o(Zintercept(o,x,y)=z))|
    (exists Road o(Height(o) = myAdd(yc,Mult(z,Diff(yc,y))))) | (exists Grass o(Height(o) = myAdd(yc,Mult(z,Diff(yc,y)))))  )  })
    else = 0 };


Random Integer Color2D(Integer x, Integer y){
    if ((x<=xMax) & (x>=xMin) & (y<=yMax) & (y>=yMin) & (Z(x,y)=0)) then  = 40
    elseif ((x<=xMax) & (x>=xMin) & (y<=yMax) & (y>=yMin) & (Z(x,y)>0)) then  = Color3D(myAdd(xc,Mult(Z(x,y),Diff(xc,x))),myAdd(yc,Mult(Z(x,y),Diff(yc,y))), Z(x,y))
};


// OBSERVATIONS
Guaranteed Scene S[1];
//obs SceneType(S1) = 1;
obs NoOverlap() = true;
obs Color2D(7,11) = 30;
obs Color2D(7,8) = 5;


// QUERY
query #{Car c};
query #{Cow c};
query Z(7,8);
//query Z(8,7);
//query {Integer z: z>=0 & z <= 20 & z = Z(8,7)};
//query #{Person p};
//query #{Road r};
//query {Integer i: i<6 & i>2 &  (exists Road r(Height(r)=i))};
//query {Integer i: i>= Xmin & i<=Xmax & exists Car p(X0(p)=i)}; 
//query {Integer i: i>= Ymin & i<=Ymax & exists Car p(Y0(p)=i)}; 
//query {Integer i: i>= Zmin & i<=Zmax & exists Car p(Z0(p)=i)}; 
//query {Integer i: i>= Zmin & i<=Zmax & exists Person p(Zintercept(p,8,7)=i)}; 
//query {Integer i: i = Color2D(8,7) & (i=5 | i =10 | i=15 | i =20 | i =25 | i= 30 | i=40) };
//query {Integer i: i = Color2D(8,7) & (i =10 | i=15 | i =20 | i =25 | i= 30 | i=40) };
//query {Scene s: exists Road r(s=WhichScene(r))};
//query {Integer i: i = SceneType(S1)};
//query {Integer i: i<11 & (exists Person p(X0(p)=i))};
//query {Integer i: i<11 & (exists Car p(X0(p)=i))};
//query {Boolean b: b = NoOverlap_person_car()};
//query {Integer z: z = Z(7,7)};

//query {Scene s: exists Road r(s=WhichScene(r))};
//query {Integer i: i<10 & (exists Road r(Height(r)=i))};
//query {Integer i: i<10 & (exists Car c(Y1(c)=i))};
//query #{Car c};
//query #{Road r};
//query #{Grass g};
//query #{Person p};
