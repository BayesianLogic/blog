
Integer MaxDoor = 15;
#Monster ~ Poisson(5);

generating Monster Source(Sound);
generating Timestep Sound_Time(Sound);

random Integer DoorOf(Monster m, Timestep t) {
   if t == @0 then ~ UniformChoice({Integer n: n< Max & n>=0})
   else ~ Categorical([SuccMod(DoorOf(m, t-1), MaxDoor) -> 0.3,
                                 PredMod(DoorOf(m, t-1), MaxDoor) -> 0.3,
                                 DoorOf(m, t-1) -> 0.4])
};		

#Sound(Source = m, Sound_Time = t) ~ {if apply_listen(t-1) then ~Bernoulli(0.5)
                                        else = 0};

random Door ApparentDoor(Sound s) ~
           Categorical([SuccMod(DoorOf(Src(Sound)), MaxDoor) -> 0.25, 
                          DoorOf(Src(Sound))     -> 0.50, 
                          PredMod(DoorOf(Src(Sound)), MaxDoor)-> 0.25]);

random MonsterKilled(Timestep t){
       if exists Door d d<MaxDoor apply_shoot(d, t-1) then ~
         UniformChoice({Monster m: exists Door d apply_shoot(d, t-1) &
         DoorOf(m, t-1) = d})
       else = null
}
random Boolean Dead(Monster m, Timestep t){
       if t>0 & Dead(m, t-1) then = true
       else if MonsterKilled(t) == m then = true
       else = false};

 reward(t) {
    if apply_listen(t) then = -1
    else if t>0 & exists Door d d< MaxDoor apply_enter(Door d, t) & (exists Monster m
      DoorOf(m, t) == d & !Dead(m, t)) then = -100
    else if t>0 &exists Door d  d<MaxDoor apply_enter(Door d, t) & (forall Monster m
      (DoorOf(m, t) != d | Dead(m, t))) then = 10
    else if t>0 & exists Door d apply_shoot(d, t-1) then = -10
};

observable(Sound);
observable(ApparentDoor(s));

decision apply_enter(Door d, Timestep t);
decision apply_listen(Timestep t);
decision apply_shoot(Door d, Timestep t)

/*helpers for policy*/
SoundAroundDoor(Door d, t) = (exists Sound s Sound_Time(s)=t & (
         ApparentDoor(s, t) == SuccMod(d, MaxDoor) |
         ApparentDoor(s, t) == d |
         ApparentDoor(s, t) == PredMod(d, MaxDoor));
MonsterAtDoor(d, t) = (exists Monster m DoorOf(m, t) == d)
MonsterAroundDoor(d, t) = (MonsterAtDoor(PredMod(d, MaxDoor)) | 
                                             MonsterAtDoor(d) | 
                                             MonsterAtDoor(SuccMod(d, MaxDoor)))



