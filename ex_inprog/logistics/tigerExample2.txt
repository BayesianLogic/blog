type Door;
distinct Door d1, d2, d3, d4, d5;
decision Boolean chosen_open(Door d, Timestep t);
decision Boolean chosen_listen(Timestep t);
random Boolean observable(noise(Door d, Timestep t)){
	if (t == @0) then 
		= false //exists Timestep t (t<@10) & true //exists Timestep t ((t< @5) & true & false)//false
	else if (chosen_listen(Prev(t)) == true) then
		= true //forall Timestep n ( (n < @5) => true)
	else
		= false};
random Boolean noise(Door d, Timestep t){
	if (tiger_state(t) == d) then
		~ Categorical({true -> 0.85, false -> 0.15})
	else
		~ Categorical({false -> 0.85, true -> 0.15})};
		
random Door tiger_state (Timestep t){
	if (t == @0) then
		~ UniformChoice({Door s})
	else if (exists Door d chosen_open(d, Prev(t)) == true) then
		~ UniformChoice({Door s})
	else
		= tiger_state(Prev(t))};
random Integer reward (Timestep t){
	if (t == @0) then
		= 0 //~ UniformChoice({Integer n : (n <= 12)})
	else if (chosen_listen(Prev(t)) == true) then
		= -1
	else if (exists Door d(tiger_state(Prev(t)) == d & chosen_open(d, Prev(t)))) then
		= -100
	else
		= 10};
random Integer value(Timestep t){
	if (t == @0) then
		= reward(t)
	else
		= value(Prev(t)) + reward(t)}; //~ AddModN[](reward( t),reward( t), reward( t), reward( t))};//
		
random Boolean foo (Integer t) ~ Categorical({true -> 0.01, false -> 0.99});
