/**
 * Tug of war
 * 
 * The strength of each person is drawn from a normal distribution. 
 * A person is lazy 10% of the time. The pulling power of a person 
 * is half her strength if she is being lazy and otherwise is her 
 * full strength. The pulling power of a team is the sum of the 
 * pulling power of the individuals on the team. The team with the 
 * greater pulling power wins.
 * 
 * @author Lei Li
 * @date 2013/03/30
 */

type Person;
distinct Person James, David, Christopher, 
  George, Ronald, John, Richard, Daniel, 
  Kenneth, Anthony, Robert, Charles, Paul, 
  Steven, Kevin, Michael, Joseph, Mark, Edward, 
  Jason, William, Thomas, Donald, Brian, Jeff;
distinct Person Mary, Jennifer, Lisa, Sandra, Michelle,
  Patricia, Maria, Nancy, Donna, Laura, Linda, Susan,
  Karen, Carol, Sarah, Barbara, Margaret, Betty, Ruth,
  Kimberly, Elizabeth, Dorothy, Helen, Sharon, Deborah;
fixed Real mu = 10;
fixed Real sigma = 2;
random Real strength(Person p) ~ Gaussian(mu, sigma);

random Person team1player1(Integer i) // i-th match
  ~ UniformChoice({Person p});

random Person team1player2(Integer i) // i-th match
  ~ UniformChoice({Person p : p != team1player1(i)});

random Person team2player1(Integer i) // i-th match
  ~ UniformChoice({Person p : (p != team1player1(i)) 
                          & (p != team1player2(i))});

random Person team2player2(Integer i) // i-th match
  ~ UniformChoice({Person p : (p != team1player1(i)) 
                          & (p != team1player2(i))
                          & (p != team2player1(i))});

random Boolean lazy(Person p, Integer i) 
  ~ Bernoulli(0.1);

random Real pulling_power(Person p, Integer i) 
	if lazy(p, i) then = strength(p) / 2
	else = strength(p);

random Boolean team1win(Integer i)
	if (pulling_power(team1player1(i), i) + pulling_power(team1player2(i), i)
	  > pulling_power(team2player1(i), i)	+ pulling_power(team2player2(i), i) ) 
	then = true
	else = false;

obs team1player1(1) = James;
obs team1player2(1) = David;
obs team2player1(1) = John;
obs team2player2(1) = Jason;

obs team1player1(2) = James;
obs team1player2(2) = John;
obs team2player1(2) = Mary;
obs team2player2(2) = Lisa;

obs team1player1(3) = John;
obs team1player2(3) = Charles;

obs team1win(1) = true;

query team1win(2); // is team1 winning in second match?
query strength(James); // what is the strength of James? 
query strength(James) > strength(John); // is James stronger than John?
// query about unknown opponent
query (!team1win(3)) & (team2player2(3) == Mary) & (team2player2(3) == Susan);
