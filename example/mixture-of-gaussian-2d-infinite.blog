/* A Gaussian mixture model with a random number of components.  
 * This particular model applies to 2-dimensional data.  
 * Each mixture component c has a mean Theta(c).  
 * For each observation n, we choose a component Z(n), 
 * then sample X(n) from a Gaussian distribution with mean Theta(Z(n)).  
 */

type Component;

#Component ~ Poisson(3);

fixed RealMatrix mean_of_means = [0; 0];
fixed RealMatrix var_of_means = [100, 0; 0, 100];

fixed RealMatrix var_obs = [4, 0; 0, 4];

/*
 * Here we use a MultivarGaussian distribution with three parameters: 
 * the dimension, mean, and covariance matrix.
 */
random RealMatrix Theta(Component c) ~ MultivarGaussian(mean_of_means, var_of_means);

random Component Z(Integer n) ~ UniformChoice({c for Component c});

/*
 * Here we use a MultivarGaussian distribution with only two fixed 
 * parameters, the dimension and the covariant argument. 
 * The random variable Theta(Z(n)) is interpreted as the mean.  
 */
random Real[] X(Integer n) ~
  if Z(n) != null then MultivarGaussian(Theta(Z(n)), var_obs);

/* Evidence for the Gaussian mixture model.  These are 
 * 100 observations from a world-generation run (using the inference
 * engine with the --generate flag) where there happened to be 2 mixture 
 * components, with parameters:
 *   Theta((Component, 1)) = [11.192336042383083; -0.9622414804746138]
 *   Theta((Component, 2)) = [-1.3947751865473623; 4.52531882904143]
 * Note that (Component, 1) and (Component, 2) are the internal tuple 
 * representations of the components.  These tuple representations are 
 * not logical terms or BLOG argument specifications; they cannot be 
 * used in evidence or queries.  
 * 
 * The observations below can also be found in mixture.data, in a simple 
 * tab-separated format that can be used as input to a plotting program. 
 *
 * NOTE: The observations after observation 9 are currently commented 
 * out in this file.  The reason is that the inference engine's 
 * likelihood weighting algorithm does not work with 100 observations: 
 * to compute a sample's weight it has to multiply 100 small density 
 * values together (one for each observation), and the computed result 
 * is typically 0.  Working in the log domain might ameliorate this, 
 * but the more fundamental problem is that a top-down sampling 
 * algorithm like this is very unlikely to generate components with 
 * parameters that match the data well.  The rejection sampler does 
 * not work at all on continuous data, because the probability of
 * sampling a value that matches the evidence exactly is 
 * zero (at least this would be true if the values were 
 * infinite-precision numbers).  The generic Metropolis-Hastings 
 * sampler goes into an infinite loop as it tries to generate 
 * an initial world that matches the evidence exactly.  
 */

obs X(0) = [12.67793353555662; -1.9664716909857873];
obs X(1) = [-2.8532629328653387; 1.9835955994671455];
obs X(2) = [14.038276526975675; -0.7965855078759345];
obs X(3) = [7.266151580745358; -2.3250409878823604];
obs X(4) = [9.509239592358833; 0.19760082592471284];
obs X(5) = [9.468096292088818; -3.494357573180091];
obs X(6) = [0.09843279350983836; 6.486824475838083];
obs X(7) = [9.656636137170704; 1.4337030141433968];
obs X(8) = [0.2172831054584281; 4.16126230159904];
obs X(9) = [6.294380168511825; -1.4899535512591284];

/* Query file for the Gaussian mixture model.  We can 
 * find out something about the parameters of the mixture components
 * by making indirect queries, such as Theta(Z(0)) and Theta(Z(1)).  
 * With the particular data in mixture.eblog, the true posterior 
 * probability that observations 0 and 1 come from distinct 
 * components is very close to 1.  
 *
 * The current inference engine has no good way of presenting the 
 * results of queries on continuous variables.  It will just list 
 * all the values that were sampled.  Soon there should be a version 
 * that groups the sampled values into bins and reports the 
 * probability mass on each of those bins.  
 */
query Z(0) == Z(1); // do observations 0 and 1 come from same component?
//query Theta(Z(0));
//query Theta(Z(1));
