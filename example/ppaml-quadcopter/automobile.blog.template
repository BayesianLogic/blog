{# This is the jinja2 template for generating our model. #}

/*
Model for the no-noise version of the automobile problem.

At each time step, we have:
- state: x, y, theta, xdot, ydot, thetadot
  (the GPS location and orientation, and the translational and rotational
  velocities)
- observations: laser (361 readings), intensity (361 readings)
- controls: velocity, steering

The state is always hidden. The sensors are observed only in some time steps,
because of time discretization. The controls are implemented as fixed values
rather than random variables, because that makes sampling faster.

Our model is discrete-time linear Gaussian:

x_i+1 = A * x_i + B * u_i + v_i
y_i = C * x_i + w_i

where
- x_0 is the initial state, distributed as MultivarGaussian(mu_0, sigma_0)
- x_i is state at timestep i
- u_i is controls for timestep i+1
- y_i is observations at timestep i
- v_i is the dynamics noise, distributed as MultivarGaussian(0, V)
- w_i is the observation noise, distributed as MultivarGaussian(0, W)

The parameters of the model are A, B, C, V, W, mu_0, sigma_0.
For now, we assume that we know all of these matrices.

Eventually, we'll want to make A, B, C random variables and learn them.
*/


/* The fixed model params (values are completely made up): */

fixed Real[][] A = {{ model.A|blog_matrix }};

fixed Real[][] B = {{ model.B|blog_matrix }};

fixed Real[][] C = {{ model.C|blog_matrix }};

fixed Real[][] V = {{ model.V|blog_matrix }};

fixed Real[][] W = {{ model.W|blog_matrix }};

fixed Real[] mu_0 = {{ model.mu_0|blog_column_vector }};

fixed Real[][] sigma_0 = {{ model.sigma_0|blog_matrix }};


/* Dynamics model: */

random Real[] state_0 ~ MultivarGaussian(mu_0, sigma_0);

{% for timestep in range(1, last_timestep + 1) %}
random Real[] state_{{ timestep }}
    ~ MultivarGaussian(A * state_{{ timestep - 1 }} + B * controls_{{ timestep - 1 }}, V);
{%- endfor %}


/* Observation model: */

{% for timestep in range(last_timestep + 1) %}
random Real[] sensors_{{ timestep }}
    ~ MultivarGaussian(C * state_{{ timestep }}, W);
{%- endfor %}


/* The controls are fixed values. */

{% for ctl in controls %}
fixed Real[] controls_{{ ctl.timestep }} = {{ ctl.controls|blog_column_vector }};
{%- endfor %}


/* Observations: */

{% for obs in observations %}
    obs sensors_{{ obs.timestep }} = {{ obs.sensors|blog_column_vector }};
{%- endfor %}


/* Query the hidden state: */

{% for timestep in range(last_timestep + 1) %}
query state_{{ timestep }};
{%- endfor %}
