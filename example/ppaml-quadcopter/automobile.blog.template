{# This is the jinja2 template for generating our model. #}

/*
Model for the no-noise version of the automobile problem.

At each time step, we have:
- state: x, y, theta, xdot, ydot, thetadot
  (the GPS location and orientation, and the translational and rotational
  velocities)
- observations: laser (361 readings), intensity (361 readings)
- controls: velocity, steering

Because of time discretization, the sensors and controls are observed only some
of the time. The state is always hidden.

Our model is discrete-time linear Gaussian:

x_i+1 = A * x_i + B * u_i + v_i
y_i = C * x_i + w_i

where
- x_0 is the initial state, distributed as MultivarGaussian(mu_0, sigma_0)
- x_i is state at timestep i
- u_i is controls for timestep i+1
- y_i is observations at timestep i
- v_i is the dynamics noise, distributed as MultivarGaussian(0, V)
- w_i is the observation noise, distributed as MultivarGaussian(0, W)

The parameters of the model are A, B, C, V, W, mu_0, sigma_0.
For now, we assume that we know all of these matrices.

Eventually, we'll want to make A, B, C random variables and learn them.
*/


/* The fixed model params (values are completely made up): */

fixed Real[][] A = {{ model.A|blog_matrix }};

fixed Real[][] B = {{ model.B|blog_matrix }};

fixed Real[][] C = {{ model.C|blog_matrix }};

fixed Real[][] V = {{ model.V|blog_matrix }};

fixed Real[][] W = {{ model.W|blog_matrix }};

fixed Real[] mu_0 = {{ model.mu_0|blog_column_vector }};

fixed Real[][] sigma_0 = {{ model.sigma_0|blog_matrix }};


/* Dynamics model: */

random Real[] state(Timestep t) {
    if t == @0 then ~ MultivarGaussian(mu_0, sigma_0)
    else ~ MultivarGaussian(A * state(Prev(t)) + B * controls(Prev(t)), V)
};


/* Observation model: */

random Real[] sensors(Timestep t)
    ~ MultivarGaussian(C * state(t), W);


/* All controls should be observed, but we still need to define this function,
 * or else we get an error. So we provide a dummy prior here: */

fixed Real[] mu_controls = [0; 0];

fixed Real[][] sigma_controls = [
    [1, 0],
    [0, 1]
];

random Real[] controls(Timestep t) ~ MultivarGaussian(mu_controls, sigma_controls);


/* Observations: */

{% for obs in observations %}
    obs sensors(@{{ obs.timestep }}) = {{ obs.sensors|blog_column_vector }};
{%- endfor %}

{% for ctl in controls %}
obs controls(@{{ ctl.timestep }}) = {{ ctl.controls|blog_column_vector }};
{%- endfor %}


/* Query the hidden state: */

{% for timestep in range(last_timestep) %}
query state(@{{ timestep }});
{%- endfor %}
