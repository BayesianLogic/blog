/** a very simple PCFG grammar
1.0: S -> NP VP;
1.0: PP -> P NP;
0.7: VP -> V NP;
0.3: VP -> VP PP;
0.4: NP -> NP PP;
0.1: NP -> "astronomers";
0.18: NP -> "ears";
0.04: NP -> "saw";
0.18: NP -> "stars";
0.1: NP -> "telescopes";
1.0: P -> "with";
1.0: V -> "saw";
*/

/**
 * Infrastructure for defining probabilistic grammars that generate
 * strings.  
 */

type ParseNode;
type NodeClass;
type Expansion;
type Sentence;

// Non terminals from the PCFG grammar 
distinct NodeClass S, NP, VP, PP, P, V, NP1, NP2, NP3, NP4, NP5, P1, V1;

// rules in PCFG
distinct Expansion SNPVP, PPPNP, VPVNP, VPVPPP, NPNPPP, NPNP1, NPNP2, NPNP3, NPNP4, NPNP5, PP1, VV1; 

fixed NodeClass NthChildClass(Expansion e, NaturalNum n)
  = TabularInterp(2,
      SNPVP, 0, NP,
      SNPVP, 1, NP,

      PPPNP, 0, P,
      PPPNP, 1, NP,

      VPVNP, 0, V,
      VPVNP, 1, NP,

      VPVPPP, 0, VP,
      VPVPPP, 1, PP,

      NPNPPP, 0, NP,
      NPNPPP, 1, PP,

      NPNP1, 0, NP1,

      NPNP2, 0, NP2,

      NPNP3, 0, NP3,

      NPNP4, 0, NP4,

      NPNP5, 0, NP5,

      PP1, 0, P1,

      VV1, 0, V1
    );

origin ParseNode Parent(ParseNode);
origin NaturalNum GenIndex(ParseNode);

// root node of the parse tree
origin Sentence RootSentence(ParseNode);
#ParseNode(RootSentence = s) = 1;

// get the node corresponding to a sentence
random ParseNode ParseTreeRoot(Sentence s) 
  ~ Iota({ParseNode node: RootSentence(node) == s});

random NodeClass ClassAsRoot(ParseNode node) {
  if (Container(node) != null) then = S
};

random NodeClass Class(ParseNode node) {
  if (Parent(node) == null) then = ClassAsRoot(node)
  else = NthChildClass(ExpansionApplied(Parent(node)), GenIndex(node))
};

#ParseNode(Parent = p, GenIndex = n) {
    if (ExpansionApplied(p) != null) 
            & (NthChildClass(ExpansionApplied(p), n) != null)
        then = 1
};

random ParseNode NthChild(ParseNode node, NaturalNum n) {
    if (ExpansionApplied(node) != null)
            & (NthChildClass(ExpansionApplied(node), n) != null)
        then ~ Iota({ParseNode q : Parent(q) == node & GenIndex(q) == n})
};

random String TextStartingAtNthChild(ParseNode p, NaturalNum n) {
    if NthChild(p, Succ(n)) == null then = NodeText(NthChild(p, n))
    else = Concat(NodeText(NthChild(p, n)), 
                  TextStartingAtNthChild(p, Succ(n)))
};

random String NodeText(ParseNode node) {
    if (NthChild(node, 0) != null) then = TextStartingAtNthChild(node, 0)
    else if OwnText(node) != null then = OwnText(node)
    else = ""
};

random Expansion ExpansionApplied(ParseNode node) {
	if (Class(node) == S) then = SNPVP
	
	else if (Class(node) == PP) then = PPPNP
	
	else if (Class(node) == VP) then 
	  ~ Categorical({VPVNP -> 0.7, VPVPPP -> 0.3})
	
	else if (Class(node) == NP) then 
	  ~ Categorical({NPNPPP -> 0.4, 
	                 NPNP1 -> 0.1, 
	                 NPNP2 -> 0.18, 
	                 NPNP3 -> 0.04, 
	                 NPNP4 -> 0.18, 
	                 NPNP5 -> 0.1})

	else if (Class(node) == P) then = PP1

	else if (Class(node) == V) then = VV1
};

random String OwnText(ParseNode node) {
   if (Class(node) == NP1) then = "astronomers"
   else if (Class(node) == NP2) then = "ears"
   else if (Class(node) == NP3) then = "saw"
   else if (Class(node) == NP4) then = "stars"
   else if (Class(node) == NP5) then = "telescopes"   
   else if (Class(node) == P1) then = "with"   
   else if (Class(node) == V1) then = "saw"
};

random String Text(Sentence s) = NodeText(ParseTreeRoot(s));

// just one sentence
distinct Sentence Sen1;

//query Text(Sen1);
