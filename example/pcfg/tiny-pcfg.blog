/** an even simpler PCFG grammar
1.0: S -> NP VP;
1.0: PP -> P NP;
1.0: VP -> V NP;
0.5: NP -> "astronomers";
0.18: NP -> "ears";
0.04: NP -> "saw";
0.18: NP -> "stars";
0.1: NP -> "telescopes";
1.0: P -> "with";
1.0: V -> "saw";
*/

/**
 * Infrastructure for defining probabilistic grammars that generate
 * strings.  
 */

type ParseNode;
type NodeClass;
type Expansion;
type Sentence;

// just one sentence
distinct Sentence Sen1;

// Non terminals from the PCFG grammar 
distinct NodeClass S, NP, VP, PP, P, V, w_astronomers, w_ears, w_saw, w_stars, w_telescopes, w_with;

// rules in PCFG
distinct Expansion SNPVP, PPPNP, VPVNP, VPVPPP, NPNPPP, NPw_astronomers, NPw_ears, NPw_saw, NPw_stars, NPw_telescopes, Pw_with, Vw_saw; 

fixed NodeClass NthChildClass(Expansion e, Integer n)
  = TabularInterp(2,
      SNPVP, 0, NP,
      SNPVP, 1, VP,

      PPPNP, 0, P,
      PPPNP, 1, NP,

      VPVNP, 0, V,
      VPVNP, 1, NP,

      VPVPPP, 0, VP,
      VPVPPP, 1, PP,

      NPNPPP, 0, NP,
      NPNPPP, 1, PP,

      NPw_astronomers, 0, w_astronomers,

      NPw_ears, 0, w_ears,

      NPw_saw, 0, w_saw,

      NPw_stars, 0, w_stars,

      NPw_telescopes, 0, w_telescopes,

      Pw_with, 0, w_with,

      Vw_saw, 0, w_saw
    );

origin ParseNode Parent(ParseNode);
origin Integer GenIndex(ParseNode);

// root node of the parse tree
origin Sentence RootSentence(ParseNode);
#ParseNode(RootSentence = s) = 1;

// get the node corresponding to a sentence
random ParseNode ParseTreeRoot(Sentence s) 
  ~ Iota({ParseNode node: RootSentence(node) == s});

/*
random NodeClass ClassAsRoot(ParseNode node) {
  if (Container(node) != null) then = S
};
*/

random NodeClass Class(ParseNode node) {
  //if (Parent(node) == null) then = ClassAsRoot(node)
  if (Parent(node) == null) then = S
  else = NthChildClass(ExpansionApplied(Parent(node)), GenIndex(node))
};

#ParseNode(Parent = p, GenIndex = n) {
    if (ExpansionApplied(p) != null) 
            & (NthChildClass(ExpansionApplied(p), n) != null)
        then = 1
};

random ParseNode NthChild(ParseNode node, Integer n) {
    if (ExpansionApplied(node) != null)
            & (NthChildClass(ExpansionApplied(node), n) != null)
        then ~ Iota({ParseNode q : Parent(q) == node & GenIndex(q) == n})
};

random String TextStartingAtNthChild(ParseNode p, Integer n) {
    if (NthChild(p, Succ(n)) == null) then = NodeText(NthChild(p, n))
    else = NodeText(NthChild(p, n)) + TextStartingAtNthChild(p, Succ(n))
};

random String NodeText(ParseNode node) {
    if (NthChild(node, 0) != null) then = TextStartingAtNthChild(node, 0)
    else if OwnText(node) != null then = OwnText(node)
    else = ""
};


random Expansion ExpansionApplied(ParseNode node) {
	if (Class(node) == S) then = SNPVP
	
	else if (Class(node) == PP) then = PPPNP
	
	else if (Class(node) == VP) then = VPVNP
	
	else if (Class(node) == NP) then 
	  ~ Categorical({NPw_astronomers -> 0.5, 
	                 NPw_ears -> 0.18, 
	                 NPw_saw -> 0.04, 
	                 NPw_stars -> 0.18, 
	                 NPw_telescopes -> 0.1})

	else if (Class(node) == P) then = Pw_with

	else if (Class(node) == V) then = Vw_saw
};

random String OwnText(ParseNode node) {
   if (Class(node) == w_astronomers) then = "astronomers "
   else if (Class(node) == w_ears) then = "ears "
   else if (Class(node) == w_saw) then = "saw "
   else if (Class(node) == w_stars) then = "stars "
   else if (Class(node) == w_telescopes) then = "telescopes "   
   else if (Class(node) == w_with) then = "with "   
   else if (Class(node) == w_saw) then = "saw "
};

random String Text(Sentence s) = NodeText(ParseTreeRoot(s));

query Text(Sen1);
