

/*
Model for the no-noise version of the automobile problem.

At each time step, we have:
- state: x, y, theta, xdot, ydot, thetadot
  (the GPS location and orientation, and the translational and rotational
  velocities)
- observations: laser (361 readings)
- controls: velocity, steering

Notes:
- We ignore the intensity observations, for now.
- We assume the obstacles are fixed and at a known location, for now.

The state is always hidden. The lasers are observed only in some time steps,
because of time discretization.
*/


//////////////////////////////////////////////////////////////////////////////

/*
 * Dynamics model.
 * We assume H = 0 so the velocity is measured at the center of the back axle.
 * We assume delta_t is the fixed step size.
 */

fixed Real param_a = 0.299541;
fixed Real param_b = 0.0500507;
fixed Real param_h = 0.0;
fixed Real param_L = 0.257717;
fixed Real delta_t = 0.005;
fixed Real xdot_sigma = 1.0;
fixed Real ydot_sigma = 1.0;
fixed Real thetadot_sigma = 1.0;
fixed Real x_sigma = 1.0;
fixed Real y_sigma = 1.0;
fixed Real theta_sigma = 1.0;

random Real new_xdot(Real theta, Real vel, Real steer) {
    = vel * cos(theta) - tan(steer) * (vel / param_L) * (
        (param_a * sin(theta) + param_b * cos(theta)))
};

random Real state_xdot(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_xdot(state_theta(timestep - 1), velocity(timestep), steering(timestep)),
        xdot_sigma)
};

random Real new_ydot(Real theta, Real vel, Real steer) {
    = vel * sin(theta) - tan(steer) * (vel / param_L) * (
        (param_a * cos(theta) + param_b * sin(theta)))
};

random Real state_ydot(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_ydot(state_theta(timestep - 1), velocity(timestep), steering(timestep)),
        ydot_sigma)
};

random Real new_thetadot(Real vel, Real steer) {
    = tan(steer) * (vel / param_L)
};

random Real state_thetadot(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_thetadot(velocity(timestep), steering(timestep)),
        thetadot_sigma)
};

random Real new_x(Real x, Real xdot) {
    = x + delta_t * xdot
};

random Real state_x(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_x(state_x(timestep - 1), state_xdot(timestep - 1)),
        x_sigma)
};

random Real new_y(Real y, Real ydot) {
    = y + delta_t * ydot
};

random Real state_y(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_y(state_y(timestep - 1), state_ydot(timestep - 1)),
        y_sigma)
};

random Real new_theta(Real theta, Real thetadot) {
    = theta + delta_t * thetadot
};

random Real state_theta(Integer timestep) {
    if timestep == 0 then ~ UnivarGaussian(0, 1)  /* TODO prior */
    else ~ UnivarGaussian(
        new_theta(state_theta(timestep - 1), state_thetadot(timestep - 1)),
        theta_sigma)
};


//////////////////////////////////////////////////////////////////////////////

/*
 * Observation model.
 * For now, we assume a single obstacle with known location and radius.
 * We also assume uncorrelated noise for the laser observations.
 */

fixed Real obstacle_x = 3.0;
fixed Real obstacle_y = 2.0;
fixed Real obstacle_r = 1.0;

fixed RealMatrix laser_solns(
        Real laser_x, Real laser_y, Real laser_theta,
        Real obstacle_x, Real obstacle_y, Real obstacle_r)
    = LaserInterp();

fixed RealMatrix lasers_sigma = eye(361);

random RealMatrix lasers_func(Real x, Real y, Real theta) {
    ~ MultivarGaussian(
        laser_solns(x, y, theta, obstacle_x, obstacle_y, obstacle_r),
        lasers_sigma)
};

random RealMatrix lasers(Integer timestep) {
    = lasers_func(state_x(timestep), state_y(timestep), state_theta(timestep))
};


//////////////////////////////////////////////////////////////////////////////

/*
 * The controls are fixed values.
 * Using "random" instead of "fixed" because of bug in BLOG.
 */

random Real velocity(Integer timestep) {
    if false then = 0
    else if timestep == 0 then = 0.0
    else if timestep == 1 then = 0.0
    else if timestep == 2 then = 0.0
    else if timestep == 3 then = 0.0948206
    else if timestep == 4 then = 0.0948206
    else if timestep == 5 then = 0.0948206
    else if timestep == 6 then = 0.0948206
    else if timestep == 7 then = 0.0948206
    else if timestep == 8 then = 0.0948206
    else if timestep == 9 then = 0.386847
    else if timestep == 10 then = 0.386847
    else if timestep == 11 then = 0.386847
    else if timestep == 12 then = 0.386847
    else if timestep == 13 then = 0.386847
    else if timestep == 14 then = 0.632096
    else if timestep == 15 then = 0.632096
    else if timestep == 16 then = 0.632096
    else if timestep == 17 then = 0.632096
    else if timestep == 18 then = 0.632096
    else if timestep == 19 then = 0.026586
    else if timestep == 20 then = 0.026586
    else if timestep == 21 then = 0.026586
    else if timestep == 22 then = 0.026586
    else if timestep == 23 then = 0.0613034
};

random Real steering(Integer timestep) {
    if false then = 0
    else if timestep == 0 then = 0.0
    else if timestep == 1 then = 0.0
    else if timestep == 2 then = 0.0
    else if timestep == 3 then = 0.273443
    else if timestep == 4 then = 0.273443
    else if timestep == 5 then = 0.273443
    else if timestep == 6 then = 0.273443
    else if timestep == 7 then = 0.273443
    else if timestep == 8 then = 0.273443
    else if timestep == 9 then = 0.161407
    else if timestep == 10 then = 0.161407
    else if timestep == 11 then = 0.161407
    else if timestep == 12 then = 0.161407
    else if timestep == 13 then = 0.161407
    else if timestep == 14 then = 0.0952578
    else if timestep == 15 then = 0.0952578
    else if timestep == 16 then = 0.0952578
    else if timestep == 17 then = 0.0952578
    else if timestep == 18 then = 0.0952578
    else if timestep == 19 then = 0.063464
    else if timestep == 20 then = 0.063464
    else if timestep == 21 then = 0.063464
    else if timestep == 22 then = 0.063464
    else if timestep == 23 then = 0.0433979
};


//////////////////////////////////////////////////////////////////////////////

/* Observations: */


obs lasers(4) = [10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 1.99055; 1.83414; 1.78045; 1.77715; 1.74479; 1.71689; 1.69717; 1.67535; 1.66308; 1.66078; 1.64888; 1.63722; 1.62673; 1.62002; 1.61841; 1.61202; 1.60577; 1.60083; 1.59857; 1.5976; 1.59558; 1.58869; 1.59184; 1.59136; 1.59618; 1.59826; 1.60045; 1.60639; 1.60651; 1.61282; 1.61928; 1.62594; 1.63766; 1.63841; 1.65012; 1.66211; 1.67881; 1.69785; 1.69928; 1.71904; 1.74972; 1.78202; 1.8403; 1.84256; 2.00401; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 4.46783; 4.48283; 4.3454; 4.27446; 4.22632; 4.1894; 4.17016; 4.14952; 4.13984; 4.12982; 4.12886; 4.12747; 4.13471; 4.14157; 4.15751; 4.1806; 4.2071; 4.25178; 4.31284; 4.41775; 10.0; 7.31162; 7.2131; 7.15713; 7.12309; 7.05213; 7.04966; 7.06244; 7.07982; 7.10574; 7.15357; 7.30796; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 8.69301; 8.59745; 8.54015; 8.51258; 8.54487; 8.55175; 8.57377; 5.84872; 5.74758; 5.68344; 5.64031; 5.61313; 5.61791; 5.60086; 5.61584; 5.62062; 5.64037; 5.66787; 5.7072; 5.76636; 5.87012; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 3.33627; 3.05414; 2.99076; 2.95583; 2.92238; 2.90034; 2.87919; 2.86598; 2.85774; 2.84521; 2.83921; 2.8335; 2.83525; 2.83583; 2.84078; 2.83426; 2.84145; 2.84379; 2.86503; 2.87987; 2.90359; 2.89832; 2.92275; 2.96091; 3.01084; 3.07146; 3.06709; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0];
obs lasers(10) = [10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 1.99983; 1.83626; 1.78156; 1.77826; 1.74579; 1.71754; 1.69783; 1.67579; 1.66348; 1.66119; 1.64925; 1.63758; 1.62695; 1.62024; 1.61863; 1.61222; 1.60597; 1.60089; 1.59862; 1.59764; 1.59564; 1.58872; 1.59166; 1.59117; 1.59612; 1.59818; 1.60037; 1.60618; 1.6063; 1.61259; 1.61905; 1.62568; 1.63723; 1.63798; 1.6497; 1.66168; 1.67814; 1.69717; 1.69859; 1.71833; 1.74865; 1.78091; 1.83827; 1.84052; 1.99654; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 4.47295; 4.48796; 4.34822; 4.27597; 4.2274; 4.19614; 4.17101; 4.14989; 4.14031; 4.13001; 4.12896; 4.12728; 4.13434; 4.14093; 4.15687; 4.17978; 4.20627; 4.25018; 4.31034; 4.41304; 10.0; 7.3168; 7.21626; 7.15945; 7.12462; 7.05263; 7.04991; 7.06244; 7.07909; 7.10427; 7.15135; 7.30257; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 8.69696; 8.60028; 8.54191; 8.51364; 8.54452; 8.55139; 8.57232; 5.85518; 5.75006; 5.68506; 5.64096; 5.61441; 5.61855; 5.60183; 5.61552; 5.62013; 5.63954; 5.6667; 5.70532; 5.76513; 5.86592; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 3.32818; 3.05611; 2.99205; 2.95714; 2.92324; 2.90119; 2.87975; 2.86653; 2.8583; 2.84549; 2.83953; 2.83382; 2.83534; 2.83592; 2.84069; 2.83417; 2.84136; 2.84291; 2.8647; 2.87949; 2.90295; 2.89768; 2.92205; 2.95983; 3.00898; 3.06968; 3.06532; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0];
obs lasers(16) = [10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 1.99957; 1.83637; 1.78156; 1.77826; 1.74577; 1.71746; 1.69776; 1.67568; 1.66339; 1.66109; 1.64915; 1.6375; 1.62682; 1.62011; 1.6185; 1.61211; 1.60586; 1.60078; 1.59851; 1.59754; 1.59553; 1.58861; 1.59151; 1.59102; 1.59598; 1.59803; 1.60022; 1.60605; 1.60617; 1.61245; 1.61891; 1.62554; 1.63709; 1.63784; 1.64954; 1.6615; 1.67796; 1.697; 1.69842; 1.71814; 1.74845; 1.78063; 1.83791; 1.84016; 1.99532; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 4.45476; 4.46971; 4.34885; 4.27617; 4.22759; 4.19643; 4.17092; 4.1497; 4.14012; 4.12982; 4.12877; 4.12692; 4.13416; 4.14057; 4.15651; 4.17932; 4.20562; 4.24943; 4.30967; 4.41154; 10.0; 7.31816; 7.21679; 7.15971; 7.12436; 7.05238; 7.04941; 7.06219; 7.07859; 7.10353; 7.15036; 7.30053; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 8.69804; 8.60099; 8.54261; 8.51364; 8.54452; 8.55139; 8.57196; 5.89408; 5.75088; 5.68538; 5.64144; 5.61457; 5.61807; 5.60296; 5.61535; 5.62029; 5.63921; 5.66602; 5.70464; 5.76197; 5.86391; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 3.325; 3.05688; 2.9923; 2.95743; 2.92343; 2.90138; 2.87975; 2.86653; 2.8583; 2.84535; 2.83939; 2.83369; 2.83516; 2.83573; 2.84041; 2.83389; 2.84108; 2.84066; 2.86427; 2.8791; 2.90246; 2.89719; 2.92151; 2.95922; 3.01015; 3.06863; 3.06427; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0];
obs lasers(22) = [10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 1.99193; 1.83393; 1.78014; 1.77684; 1.74438; 1.71645; 1.69678; 1.67487; 1.66267; 1.66037; 1.64845; 1.63679; 1.62629; 1.61959; 1.61798; 1.61157; 1.60533; 1.60035; 1.59809; 1.59711; 1.59511; 1.5882; 1.59131; 1.59083; 1.59568; 1.59774; 1.59993; 1.60587; 1.60599; 1.61228; 1.61874; 1.62537; 1.63705; 1.6378; 1.6495; 1.66149; 1.67809; 1.69712; 1.69854; 1.71831; 1.74887; 1.78114; 1.83916; 1.84142; 2.00004; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 4.47095; 4.48595; 4.34707; 4.27527; 4.22661; 4.19537; 4.17025; 4.14924; 4.13957; 4.12936; 4.12841; 4.12665; 4.1338; 4.14048; 4.15642; 4.17932; 4.20581; 4.2499; 4.31015; 4.41304; 10.0; 7.31625; 7.21521; 7.15816; 7.1236; 7.05188; 7.04917; 7.06195; 7.07859; 7.10402; 7.15085; 7.30206; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 8.69661; 8.59957; 8.54121; 8.51294; 8.54452; 8.55068; 8.57196; 5.85535; 5.74956; 5.68457; 5.64112; 5.61361; 5.61952; 5.60183; 5.61503; 5.61964; 5.63888; 5.66602; 5.70464; 5.76706; 5.86446; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 3.32573; 3.05605; 2.99166; 2.9568; 2.92281; 2.90086; 2.87923; 2.86602; 2.85779; 2.84498; 2.83898; 2.83327; 2.83474; 2.83532; 2.83999; 2.83348; 2.84071; 2.84019; 2.86399; 2.87881; 2.90216; 2.8969; 2.92131; 2.95901; 3.00792; 3.06852; 3.06416; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0; 10.0];


//////////////////////////////////////////////////////////////////////////////

/* Query the hidden state: */


query state_x(0);
query state_y(0);
query state_theta(0);
query state_x(1);
query state_y(1);
query state_theta(1);
query state_x(2);
query state_y(2);
query state_theta(2);
query state_x(3);
query state_y(3);
query state_theta(3);
query state_x(4);
query state_y(4);
query state_theta(4);
query state_x(5);
query state_y(5);
query state_theta(5);
query state_x(6);
query state_y(6);
query state_theta(6);
query state_x(7);
query state_y(7);
query state_theta(7);
query state_x(8);
query state_y(8);
query state_theta(8);
query state_x(9);
query state_y(9);
query state_theta(9);
query state_x(10);
query state_y(10);
query state_theta(10);
query state_x(11);
query state_y(11);
query state_theta(11);
query state_x(12);
query state_y(12);
query state_theta(12);
query state_x(13);
query state_y(13);
query state_theta(13);
query state_x(14);
query state_y(14);
query state_theta(14);
query state_x(15);
query state_y(15);
query state_theta(15);
query state_x(16);
query state_y(16);
query state_theta(16);
query state_x(17);
query state_y(17);
query state_theta(17);
query state_x(18);
query state_y(18);
query state_theta(18);
query state_x(19);
query state_y(19);
query state_theta(19);
query state_x(20);
query state_y(20);
query state_theta(20);
query state_x(21);
query state_y(21);
query state_theta(21);
query state_x(22);
query state_y(22);
query state_theta(22);
query state_x(23);
query state_y(23);
query state_theta(23);