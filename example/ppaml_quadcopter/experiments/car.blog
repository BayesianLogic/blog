

/*
Model for the automobile problem (simple version with access to noisy GPS).

At each time step, we have:
- controls: velocity, steering (observed in all timesteps)
- true_state: x, y, theta (never observed)
- noisy_state: x, y, theta (observed in some timesteps)

We ignore the obstacles and the laser / intensity observations, for now.
*/


//////////////////////////////////////////////////////////////////////////////

/*
 * Dynamics model.
 * We assume H = 0 so the velocity is measured at the center of the back axle.
 * We assume delta_t is the fixed step size.
 * The dynamics equations are taken from guivant_2000.
 * See DynamicsLogic.java for the implementation.
 *
 * xdot <- vc * cos(phi) - vc/L * (a * sin(phi) + b * cos(phi)) * tan(alpha)
 * ydot <- vc * sin(phi) - vc/L * (a * cos(phi) - b * sin(phi)) * tan(alpha)
 * thetadot <- vc/L * tan(alpha)
 * x <- x + delta_t * xdot
 * y <- y + delta_t * ydot
 * theta <- theta + delta_t * thetadot
 */

fixed RealMatrix car_params = [0.299541; 0.0500507; 0.0; 0.257717];
fixed RealMatrix initial_state = [-0.0499928; -6.1039; -0.000112265];

fixed RealMatrix dynamics(
        RealMatrix car_params, RealMatrix old_state,
        Real velocity, Real steering, Real delta_t)
    = DynamicsInterp();

random RealMatrix true_state(Timestep timestep) {
    if timestep == @0 then = initial_state
    else = dynamics(
        car_params, true_state(Prev(timestep)),
        toReal(controls[toInt(timestep)][0]),
        toReal(controls[toInt(timestep)][1]),
        toReal(time[toInt(timestep)] - time[toInt(Prev(timestep))]))
};


//////////////////////////////////////////////////////////////////////////////

/*
 * Observation model.
 * We assume Gaussian noise on top of the true location.
 */

fixed RealMatrix state_sigma = 0.001 * eye(3);

random RealMatrix noisy_state(Timestep timestep) {
    ~ MultivarGaussian(true_state(timestep), state_sigma)
};


//////////////////////////////////////////////////////////////////////////////

/* Time: */

fixed RealMatrix time = [0.01; 0.245; 0.246; 0.271; 0.296; 0.316; 0.341; 0.361; 0.381; 0.406; 0.431; 0.456; 0.475; 0.476; 0.501; 0.521; 0.546; 0.566; 0.586; 0.611; 0.636; 0.656; 0.681; 0.7; 0.700999; 0.720999; 0.745999; 0.770999; 0.795999; 0.815999; 0.840999; 0.860999; 0.885999; 0.905999; 0.924999; 0.925999; 0.950999; 0.970999; 0.990999; 1.016; 1.036; 1.061; 1.086; 1.106; 1.131; 1.15; 1.151; 1.176; 1.196; 1.216; 1.241; 1.261; 1.281; 1.306];


//////////////////////////////////////////////////////////////////////////////

/* Controls: */

fixed RealMatrix controls = [
    [0.0, 0.0],
    [0.0, 0.0],
    [0.0, 0.0],
    [0.0316302, 0.00630037],
    [0.0066694, 0.00407235],
    [0.0115716, 0.0029854],
    [0.0272438, 0.00211613],
    [0.022349, 0.00120382],
    [0.00975375, 0.00131373],
    [0.00306316, 0.000993534],
    [0.00358699, 0.00093536],
    [0.00241303, 0.000841304],
    [0.00439033, 0.000705286],
    [0.00439033, 0.000705286],
    [0.0012681, 0.00077252],
    [0.0213304, 0.00113611],
    [0.0251015, 0.000754639],
    [0.012648, 0.00082068],
    [0.0116147, 0.000794216],
    [0.0266456, 0.00167064],
    [0.0227546, 0.00106482],
    [0.0209438, 0.000891252],
    [0.0206498, 0.000685497],
    [0.034081, 0.000678106],
    [0.034081, 0.000678106],
    [0.0341598, 0.000763698],
    [0.032625, 0.000753923],
    [0.0402039, 0.000668689],
    [0.0442618, 0.000510617],
    [0.0441632, 0.000687643],
    [0.0437595, 0.000364228],
    [0.0566399, 0.000493093],
    [0.0566137, 0.000435873],
    [0.0553621, 0.000465198],
    [0.0546848, 0.000366016],
    [0.0546848, 0.000366016],
    [0.0609522, 0.00049214],
    [0.0667989, -0.000240401],
    [0.0657176, -0.000189976],
    [0.0654672, 7.12117e-05],
    [0.0699415, -7.98265e-05],
    [0.0802708, 6.48101e-06],
    [0.0775471, 0.000115438],
    [0.0765731, 0.000228687],
    [0.0768704, 0.000402613],
    [0.0903706, -1.52151e-05],
    [0.0903706, -1.52151e-05],
    [0.088876, -4.12861e-06],
    [0.0878814, -0.000408725],
    [0.0871795, -0.000165419],
    [0.100637, -2.46326e-05],
    [0.0995751, 0.000591679],
    [0.0988392, 0.000606819],
    [0.0996569, 0.000503345]
];


//////////////////////////////////////////////////////////////////////////////

/* Observations: */


obs noisy_state(@0) = [-0.0499928; -6.1039; -0.000112265];
obs noisy_state(@1) = [-0.0500417; -6.10383; 0.000461668];
obs noisy_state(@12) = [-0.050042; -6.10414; 0.000571162];
obs noisy_state(@23) = [-0.0500256; -6.09994; 0.000523716];
obs noisy_state(@34) = [-0.0500311; -6.08938; 0.000495851];
obs noisy_state(@45) = [-0.0500489; -6.07257; 0.000594229];


//////////////////////////////////////////////////////////////////////////////

/* Query the hidden state: */


query true_state(@0);
query true_state(@1);
query true_state(@12);
query true_state(@23);
query true_state(@34);
query true_state(@45);
