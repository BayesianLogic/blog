{# This is the jinja2 template for generating our model. #}

/*
Model for the no-noise version of the automobile problem.

At each time step, we have:
- state: x, y, theta, xdot, ydot, thetadot
  (the GPS location and orientation, and the translational and rotational
  velocities)
- observations: laser (361 readings)
- controls: velocity, steering

Notes:
- We ignore the intensity observations, for now.
- We assume the obstacles are fixed and at a known location, for now.

The state is always hidden. The lasers are observed only in some time steps,
because of time discretization.
*/


//////////////////////////////////////////////////////////////////////////////

/*
 * Dynamics model.
 * We assume H = 0 so the velocity is measured at the center of the back axle.
 * We assume delta_t is the fixed step size.
 */

fixed Real delta_t = {{ model.delta_t }};
fixed RealMatrix car_params = {{ model.car_params |blog_column_vector }};
fixed RealMatrix initial_state = {{ model.initial_state |blog_column_vector }};
fixed RealMatrix state_sigma = 0.001 * eye(6);

fixed RealMatrix dynamics(
        RealMatrix car_params, RealMatrix old_state,
        Real velocity, Real steering, Real delta_t)
    = DynamicsInterp();

random RealMatrix state(Timestep timestep) {
    if timestep == @0 then = initial_state
    else ~ MultivarGaussian(
        dynamics(
            car_params, state(Prev(timestep)),
            toReal(controls[toInt(timestep)][0]),
            toReal(controls[toInt(timestep)][1]),
            delta_t),
        state_sigma)
};


//////////////////////////////////////////////////////////////////////////////

/*
 * Observation model.
 * For now, we assume a single obstacle with known location and radius.
 * We also assume uncorrelated noise for the laser observations.
 */

fixed Real obstacle_x = {{ model.obstacle_x }};
fixed Real obstacle_y = {{ model.obstacle_y }};
fixed Real obstacle_r = {{ model.obstacle_r }};

fixed RealMatrix laser_solns(
        Real laser_x, Real laser_y, Real laser_theta,
        Real obstacle_x, Real obstacle_y, Real obstacle_r)
    = LaserInterp();

fixed RealMatrix lasers_sigma = 0.001 * eye(361);

random RealMatrix lasers(Timestep timestep) {
    ~ MultivarGaussian(
        laser_solns(
            toReal(state(timestep)[0]),
            toReal(state(timestep)[1]),
            toReal(state(timestep)[2]),
            obstacle_x, obstacle_y, obstacle_r),
        lasers_sigma)
};


//////////////////////////////////////////////////////////////////////////////

/* Controls: */

fixed RealMatrix controls = {{ controls |blog_matrix }};


//////////////////////////////////////////////////////////////////////////////

/* Observations: */

{% for obs in observations %}
obs lasers(@{{ obs.timestep }}) = {{ obs.laser|blog_column_vector }};
{%- endfor %}


//////////////////////////////////////////////////////////////////////////////

/* Query the hidden state: */

{% for timestep in range(last_timestep + 1) %}
query state(@{{ timestep }});
{%- endfor %}
