{# This is the jinja2 template for generating our model. #}

/*
Model for the automobile problem (simple version with access to noisy GPS).

At each time step, we have:
- controls: velocity, steering (observed in all timesteps)
- true_state: x, y, theta (never observed)
- noisy_state: x, y, theta (observed in some timesteps)

We ignore the obstacles and the laser / intensity observations, for now.
*/


//////////////////////////////////////////////////////////////////////////////

/*
 * Dynamics model.
 * We assume H = 0 so the velocity is measured at the center of the back axle.
 * We assume delta_t is the fixed step size.
 * The dynamics equations are taken from guivant_2000.
 * See DynamicsLogic.java for the implementation.
 *
 * xdot <- vc * cos(phi) - vc/L * (a * sin(phi) + b * cos(phi)) * tan(alpha)
 * ydot <- vc * sin(phi) - vc/L * (a * cos(phi) - b * sin(phi)) * tan(alpha)
 * thetadot <- vc/L * tan(alpha)
 * x <- x + delta_t * xdot
 * y <- y + delta_t * ydot
 * theta <- theta + delta_t * thetadot
 */

fixed RealMatrix car_params = {{ model.car_params |blog_column_vector }};
fixed RealMatrix initial_state = {{ model.initial_state |blog_column_vector }};

fixed RealMatrix dynamics(
        RealMatrix car_params, RealMatrix old_state,
        Real velocity, Real steering, Real delta_t)
    = DynamicsInterp();

random RealMatrix true_state(Timestep timestep) {
    if timestep == @0 then = initial_state
    else = dynamics(
        car_params, true_state(Prev(timestep)),
        jittered_velocity(timestep),
        jittered_steering(timestep),
        toReal(time[toInt(timestep)] - time[toInt(Prev(timestep))]))
};


//////////////////////////////////////////////////////////////////////////////

/*
 * Observation model.
 * We assume Gaussian noise on top of the true location.
 */

fixed RealMatrix state_sigma = 0.001 * eye(3);

random RealMatrix noisy_state(Timestep timestep) {
    ~ MultivarGaussian(true_state(timestep), state_sigma)
};


//////////////////////////////////////////////////////////////////////////////

/* Time: */

fixed RealMatrix time = {{ time |blog_column_vector }};


//////////////////////////////////////////////////////////////////////////////

/*
 * Controls.
 * We put some Gaussian noise on top of the observed controls.
 */

fixed RealMatrix controls = {{ controls |blog_matrix }};

fixed Real velocity_variance = 0.01;
fixed Real steering_variance = 0.01;

random Real jittered_velocity(Timestep timestep) {
    ~ UnivarGaussian(toReal(controls[toInt(timestep)][0]), velocity_variance)
};

random Real jittered_steering(Timestep timestep) {
    ~ UnivarGaussian(toReal(controls[toInt(timestep)][1]), steering_variance)
};


//////////////////////////////////////////////////////////////////////////////

/* Observations: */

{% for timestep, state in observations %}
obs noisy_state(@{{ timestep }}) = {{ state |blog_column_vector }};
{%- endfor %}


//////////////////////////////////////////////////////////////////////////////

/* Query the hidden state: */

{% for timestep in query_timesteps %}
query true_state(@{{ timestep }});
{%- endfor %}

