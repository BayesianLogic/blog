/**
 * Tug of war
 * 
 * The strength of each person is drawn from a normal distribution. 
 * A person is lazy 10% of the time. The pulling power of a person 
 * is half her strength if she is being lazy and otherwise is her 
 * full strength. The pulling power of a team is the sum of the 
 * pulling power of the individuals on the team. The team with the 
 * greater pulling power wins.
 * 
 * @author Lei Li
 * @date 2013/03/30
 */

type Person;
type Match;
distinct Person James, David,
  Jason, Brian, Mary, Nancy, Susan, Karen;
distinct Match M[4];
random Real strength(Person p) ~ Gaussian(10, 2);

random Person team1player1(Match m) 
  ~ UniformChoice({p for Person p});

random Person team1player2(Match m)
  ~ UniformChoice({p for Person p : p != team1player1(m)});

random Person team2player1(Match m) 
  ~ UniformChoice({p for Person p : (p != team1player1(m)) 
                          & (p != team1player2(m))});

random Person team2player2(Match m) 
  ~ UniformChoice({p for Person p : (p != team1player1(m)) 
                          & (p != team1player2(m))
                          & (p != team2player1(m))});

random Boolean lazy(Person p, Match m) 
  ~ BooleanDistrib(0.1);

random Real pulling_power(Person p, Match m) ~
  if lazy(p, m) then strength(p) / 2.0
  else strength(p);

random Boolean team1win(Match m) ~
  if (pulling_power(team1player1(m), m) + pulling_power(team1player2(m), m)
    > pulling_power(team2player1(m), m)  + pulling_power(team2player2(m), m) ) 
  then true
  else false;

obs team1player1(M[0]) = James;
obs team1player2(M[0]) = David;
obs team2player1(M[0]) = Brian;
obs team2player2(M[0]) = Jason;

obs team1player1(M[1]) = James;
obs team1player2(M[1]) = David;
obs team2player1(M[1]) = Mary;
obs team2player2(M[1]) = Nancy;

obs team1player1(M[2]) = James;
obs team1player2(M[2]) = Karen;

obs team1win(M[0]) = true;

/**
 * The first query is comparing the strength of members 
 * from two team with the evidence that one team win once. 
 * So it is naturally that the member in the winning team 
 * might be stronger.
 *
 * The second query asks about a hypothetical game 
 * between the winner team of past game and a new team. 
 * It is reasonable that the past winner team might have 
 * higher chance to win again in the new game.
 *
 * The third query is asking what is the winning 
 * probability of a new player joining a past winning
 * player against an unknown team. Therefore, new players 
 * may prefer to joining past winning players.
 *
 * The last query is about the probability of a new team 
 * winning against such old+new player pair. 
 */

query strength(James) > strength(Brian); // is James stronger than Brian?
query team1win(M[1]); // is team1 winning in second match?
query team1win(M[2]); // is team1 winning in third match?
// query about unknown opponent
query (!team1win(M[3])) & (team2player1(M[3]) == Mary) & (team2player2(M[3]) == Susan);
