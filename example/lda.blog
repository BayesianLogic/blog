/** Latent Dirichlet Allocation (LDA) represented in blog model.
 * (Blei, Ng and Jordan, 2003)
 * 
 * @author: leili  
 * @author: rbharath
 */

type Document;

distinct Document Document[5];
//#Document ~ Poisson(2);

// Suppose we have five topics. 
//fixed Integer k = 5;
fixed Real alpha = 1.0;
fixed Real[][] beta =
    [[0.1, 0.4, 0.4, 0.1],
     [0.1, 0.3, 0.5, 0.1],
     [0.4, 0.2, 0.3, 0.1],
     [0.5, 0.3, 0.1, 0.1],
     [0.1, 0.7, 0.1, 0.1]];

random Integer doclen(Document d) ~ UniformInt(4, 7);

random Real[] theta(Document d) ~ Dirichlet(0.2, 0.2, 0.2, 0.2, 0.2);

random Integer topic(Document d, Integer i) {
    if (i < doclen(d)) then ~ Categorical(theta(d))
};

random Integer wordidx(Document d, Integer i) {
    ~ Categorical(beta[topic(d, i)])
};

// define a dictionary mapping from index to word
fixed String Dictionary(Integer i)
    = TabularInterp(1,
	0, "AAA",
	1, "BBB",
	2, "CCC",
	3, "DDD"
      );

query wordidx(Document[1], 0);
query wordidx(Document[1], 1);
query wordidx(Document[1], 2);

random String word(Document d, Integer i) {
    = Dictionary( wordidx(d, i) )
};

query word(Document[1], 0);
query word(Document[1], 1);
query word(Document[1], 2);
query word(Document[1], 3);