/**
 * 
 */
package blog.sample;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;

import blog.ObjectIdentifier;
import blog.bn.BasicVar;
import blog.bn.NumberVar;
import blog.bn.OriginVar;
import blog.bn.VarWithDistrib;
import blog.common.HashMapWithPreimages;
import blog.distrib.CondProbDistrib;
import blog.model.DependencyModel;
import blog.model.NonGuaranteedObject;
import blog.world.PartialWorld;

/**
 * @author Da Tang
 * 
 */
public class TraceParentRecEvalContext extends ClassicInstantiatingEvalContext {

  public TraceParentRecEvalContext(PartialWorld world) {
    super(world);
  }

  protected TraceParentRecEvalContext(
      PartialWorld world,
      LinkedHashMap<VarWithDistrib, ClassicInstantiatingEvalContext> respVarsAndContexts) {
    super(world, respVarsAndContexts);
  }

  protected Object getOrComputeValue(BasicVar var) {
    Object value = world.getValue(var);
    if (value == null) {
      numCalculateNewVars++;
      if (var instanceof VarWithDistrib) {
        value = instantiate((VarWithDistrib) var);
      } else {
        throw new IllegalArgumentException("Don't know how to instantiate: "
            + var);
      }
    }
    return value;
  }

  public Object getValue(BasicVar var) {
    Object value = getOrComputeValue(var);
    if (value == null) {
      latestUninstParent = var;
      var.ensureStable();
      handleMissingVar(var);
    } else {
      if (parents.add(var)) {
        var.ensureStable();
        parentTrace.addLast(var);
        caseLevelTrace.addLast(caseLevel);
      }
    }
    correspondingVar = var;
    return value;
  }

  public NumberVar getPOPAppSatisfied(Object obj) {
    if (obj instanceof NonGuaranteedObject) {
      return ((NonGuaranteedObject) obj).getNumberVar();
    }

    if (obj instanceof ObjectIdentifier) {
      parents.add(new OriginVar((ObjectIdentifier) obj));
      parentTrace.addLast(new OriginVar((ObjectIdentifier) obj));
      caseLevelTrace.addLast(caseLevelTrace);
      return world.getPOPAppSatisfied(obj);
    }

    // Must be guaranteed object, so not generated by any number var
    return null;
  }

  protected Object instantiate(VarWithDistrib var) {
    var.ensureStable();

    /*
     * if (Util.verbose()) { System.out.println("Need to instantiate: " + var);
     * }
     */

    if (respVarsAndContexts.containsKey(var)) {
      cycleError(var);
    }

    // Create a new "child" context and get the distribution for
    // var in that context.
    respVarsAndContexts.put(var, this);
    TraceParentRecEvalContext spawn = new TraceParentRecEvalContext(world,
        respVarsAndContexts);
    spawn.afterSamplingListener = afterSamplingListener;
    DependencyModel.Distrib distrib = var.getDistrib(spawn);
    logProb += spawn.getLogProbability();
    respVarsAndContexts.remove(var);
    List parentTrace = spawn.getParentTrace(), caseLevelTrace = spawn
        .getCaseLevelTrace();
    for (int i = 0; i < parentTrace.size(); i++) {
      this.parentTrace.addLast(parentTrace.get(i));
      this.caseLevelTrace.addLast((Integer) caseLevelTrace.get(i)
          + this.caseLevel);
    }
    this.caseLevel += spawn.getCaseLevel();

    // Sample new value for var
    CondProbDistrib cpd = distrib.getCPD();
    cpd.setParams(distrib.getArgValues());
    Object newValue = cpd.sampleVal();
    double logProbForThisValue = cpd.getLogProb(newValue);
    logProb += logProbForThisValue;

    // Assert any identifiers that are used by var
    Object[] args = var.args();
    for (int i = 0; i < args.length; ++i) {
      if (args[i] instanceof ObjectIdentifier) {
        world.assertIdentifier((ObjectIdentifier) args[i]);
      }
    }
    if (newValue instanceof ObjectIdentifier) {
      world.assertIdentifier((ObjectIdentifier) newValue);
    }

    // Actually set value
    world.setValue(var, newValue);

    if (afterSamplingListener != null) {
      afterSamplingListener.evaluate(var, newValue, logProbForThisValue);
    }

    if (staticAfterSamplingListener != null) {
      staticAfterSamplingListener.evaluate(var, newValue, logProbForThisValue);
    }

    /*
     * if (Util.verbose()) { System.out.println("Instantiated: " + var); }
     */

    return newValue;
  }

  public List getParentTrace() {
    return Collections.unmodifiableList(parentTrace);
  }

  public void increaseCaseLevel() {
    caseLevel++;
  }

  public List getCaseLevelTrace() {
    return Collections.unmodifiableList(caseLevelTrace);
  }

  public int getCaseLevel() {
    return caseLevel;
  }

  public int getNumCalculateNewVars() {
    return numCalculateNewVars;
  }

  public BasicVar getCorrespondingVar() {
    return correspondingVar;
  }

  private LinkedList parentTrace = new LinkedList();
  private LinkedList caseLevelTrace = new LinkedList();
  private int caseLevel = 0;
  private HashMapWithPreimages assignment;
  private int numCalculateNewVars = 0;
  private BasicVar correspondingVar = null;
}
