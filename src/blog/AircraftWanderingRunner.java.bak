package blog;

import java.util.*;

import common.OneToOneMappingsIterator;
import common.Util;
import common.HashMultiset;

public class AircraftWanderingRunner extends ParticleFilterRunnerOnGenerator {

    public AircraftWanderingRunner(
	    Model model,
	    Collection queryStrings,
	    Properties particleFilterProperties,
	    boolean randomizeGenerator) {
	super(model,
		Util.list(),
		queryStrings,
		particleFilterProperties);
    }
    
    protected class AircraftWanderingParticleFilter extends ParticleFilter {
	public AircraftWanderingParticleFilter(Model model, Properties properties) {
	    super(model, properties);
	}
	protected Particle makeParticle(Set idTypes, int numTimeSlicesInMemory) {
	    return new AircraftWanderingParticle(idTypes, numTimeSlicesInMemory);
	}
    }
    
    protected class AircraftWanderingParticle extends Particle {
	public AircraftWanderingParticle(Set idTypes, int numTimeSlicesInMemory) {
	    super(idTypes, numTimeSlicesInMemory);
	}

//	public void takeOld(Evidence evidence) {
//	    //super.take(evidence);
//	    
//	    weight = 0;
//	    blips = getBlips();
//	    apparentPosEvidence = getApparentPosEvidenceValues();
//	    for (Iterator it = new OneToOneMappingsIterator(blips, apparentPosEvidence); it.hasNext(); ) {
//		Map binding = (Map) it.next();
//		weight += weight(binding);
//	    }
//	}

//	protected double weight(Map binding) {
//	    double prob = 1;
//	    for (Iterator it = binding.entrySet().iterator(); it.hasNext(); ) {
//		Map.Entry entry = (Map.Entry) it.next();
//		Object blip = entry.getKey();
//		Object apparentPosEvidenceValue = entry.getValue();
//		prob *= probabilityOfApparentPosGivenBlip(apparentPosEvidenceValue, blip);
//	    }
//	    return prob;
//	}

//	protected double probabilityOfApparentPosGivenBlip(
//		Object apparentPosEvidenceValue,
//		Object blip) {
//	    String apparentPosString = "ApparentPos(" + blip + ")";
//	    System.out.println(apparentPosString);
//	    VarWithDistrib apparentPosVariable =
//		(VarWithDistrib) BLOGUtil.parseVariable_NE(
//			apparentPosString, model);
//	    return BLOGUtil.probability(apparentPosVariable, apparentPosEvidenceValue, curWorld);
//	}
//
//	private LinkedList getBlipsOld() {
//	    String blipsString = replaceTByLatestTimeStep("{Blip b : Time(b) = t}");
//	    Object blipsObject = BLOGUtil.getValue(blipsString, curWorld, model);
//	    System.out.println(blipsObject);
//	    HashMultiset blips = (HashMultiset) blipsObject;
//	    return new LinkedList(blips);
//	}
//
//	private LinkedList getBlips() {
//	    String positionsString = replaceTByLatestTimeStep("{ApparentPos(b) for Blip b : Time(b) = t}");
//	    BLOGUtil.getValue(positionsString, curWorld, model);
//	    RandomFunction apparentPosFunction = (RandomFunction) Util.getFirst(model.getFuncsWithName("ApparentPos"));
//	    LinkedList blips = new LinkedList();
//	    for (Iterator it = curWorld.basicVarToValueMap().keySet().iterator(); it.hasNext(); ) {
//		BasicVar var = (BasicVar) it.next();
//		if (var instanceof RandFuncAppVar) {
//		    RandFuncAppVar fVar = (RandFuncAppVar) var;
//		    if (fVar.func().equals(apparentPosFunction))
//			blips.add(fVar.args()[0]);
//		}
//	    }
//	    return blips;
//	}
//
//	protected LinkedList blips;
//	protected LinkedList apparentPosEvidence;

	public void take(Evidence evidence) {
	    //super.take(evidence);
	    
	    weight = 0;
	    LinkedList apparentPosVars = getApparentPosVars();
	    LinkedList apparentPosEvidence = getApparentPosEvidenceValues();
	    // System.out.println("Vars  : " + apparentPosVars);
	    // System.out.println("Values: " + apparentPosEvidence);
	    
	    int numBlips = ((Number)
		    BLOGUtil.getValue(replaceTByLatestTimeStep("#{Blip b : Time(b) = t}"), curWorld, model)).intValue();

	    if (numBlips != apparentPosVars.size()) {
		Util.fatalError("Num of blips different from num of ApparentPos: " + numBlips + ", " + apparentPosVars.size());
	    }

	    // System.out.println("Summing over all bindings.");
	    for (Iterator it = new OneToOneMappingsIterator(apparentPosVars, apparentPosEvidence); it.hasNext(); ) {
		Map binding = (Map) it.next();
		weight += weightVarValue(binding);
	    }
	    // System.out.println("Sum over all bindings: " + weight);
	    
//	    System.out.println("Aircraft: " + getAircraftPosValuesSet());
//	    System.out.println("Blips: " + apparentPosEvidence);
//	    System.out.println("Weight: " + weight);
	    
	    for (Iterator it = apparentPosVars.iterator(); it.hasNext(); ) {
		RandFuncAppVar var = (RandFuncAppVar) it.next();
		curWorld.setValue(var, null);
	    }
	}

	protected double weightVarValue(Map binding) {
	    //System.out.println("Binding: " + binding);
	    double prob = 1;
	    for (Iterator it = binding.entrySet().iterator(); it.hasNext(); ) {
		Map.Entry entry = (Map.Entry) it.next();
		VarWithDistrib apparentPosVariable = (VarWithDistrib) entry.getKey();
		Object apparentPosEvidenceValue = entry.getValue();
		//curWorld.setValue(apparentPosVariable, apparentPosEvidenceValue);
		prob *= BLOGUtil.probability(apparentPosVariable, apparentPosEvidenceValue, curWorld);
	    }
	    //System.out.println("Has probability " + prob);
	    return prob;
	}
	
	private LinkedList getApparentPosVars() {
	    String positionsString = replaceTByLatestTimeStep("{ApparentPos(b) for Blip b : Time(b) = t}");
	    BLOGUtil.getValue(positionsString, curWorld, model);
	    RandomFunction apparentPosFunction = (RandomFunction) Util.getFirst(model.getFuncsWithName("ApparentPos"));
	    LinkedList apparentPosVars = new LinkedList();
	    for (Iterator it = curWorld.basicVarToValueMap().keySet().iterator(); it.hasNext(); ) {
		BasicVar var = (BasicVar) it.next();
		if (var instanceof RandFuncAppVar) {
		    RandFuncAppVar fVar = (RandFuncAppVar) var;
		    if (fVar.func().equals(apparentPosFunction))
			apparentPosVars.add(fVar);
		}
	    }
	    return apparentPosVars;
	}
	
	public Particle copy() {
	    return copyInto(new AircraftWanderingParticle(idTypes, numTimeSlicesInMemory));
	}
    }
    
    protected ParticleFilter makeParticleFilter(
	    Model model,
	    Properties particleFilterProperties) {
	return new AircraftWanderingParticleFilter(model, particleFilterProperties);
    }
    
    public Evidence getEvidence() {
/*// specialized particle filter does not use this evidence.	
	HashMultiset positions = getApparentPosEvidenceValuesSet();
	int numberOfBlips = positions.size();
	addIndicatorToModel(positions);
	
	Evidence evidence = BLOGUtil.parseEvidence_NE("obs Indicator = true;", model);
	
	indicatorVariable = (BasicVar) Util.getFirst(evidence.getEvidenceVars());
	
	evidence.addAll(getCardinalityLinkEvidence("#{Blip b : Time(b) = t}", "B", numberOfBlips));
	
	System.out.println("Evidence: " + evidence);
	
	return evidence;
 */
	return new Evidence();
    }

    private LinkedList evidenceValues;
    private int lastTimestepOfEvidenceValues = -1;
    private LinkedList getApparentPosEvidenceValues() {
	if (generator.lastTimeStep == lastTimestepOfEvidenceValues)
	    return evidenceValues;
	
	evidenceValues = new LinkedList();
	for (Iterator it = getApparentPosEvidenceValuesSet().iterator(); it.hasNext(); ) {
	    evidenceValues.add(Util.getFirst((Collection) it.next()));
	}
	lastTimestepOfEvidenceValues = generator.lastTimeStep;
	return evidenceValues;
    }
    
    private HashMultiset getApparentPosEvidenceValuesSet() {
	String positionsString = replaceTByLatestTimeStep("{ApparentPos(b) for Blip b : Time(b) = t}");
	HashMultiset positions = (HashMultiset) BLOGUtil.getValue(positionsString, generator.currentPartialWorld, model);
	return positions;
    }
    
    private HashMultiset getAircraftPosValuesSet(PartialWorld world) {
	String positionsString = replaceTByLatestTimeStep("{Position(a, t) for Aircraft a}");
	HashMultiset positions = (HashMultiset) BLOGUtil.getValue(positionsString, world, model);
	return positions;
    }
    
    public double aircraftMeanError;
    
    protected void afterEvidenceAndQueries() {
	aircraftMeanError = 0;
// TEMP	
//	beginGeneratorRandomContext();
//	HashMultiset aircraftPosition = getAircraftPosValuesSet(generator.currentPartialWorld);
//	endGeneratorRandomContext();
	HashMultiset aircraftPosition = getAircraftPositionFromGenerator();
	for (Iterator it = particleFilter.particles.iterator(); it.hasNext(); ) {
	    Particle particle = (Particle) it.next();
	    HashMultiset aircraftPositionInParticle = getAircraftPosValuesSet(particle.getLatestWorld());
	    aircraftMeanError += particle.getLatestWeight() * aircraftPositionError(aircraftPositionInParticle, aircraftPosition);
	}
	
	System.out.println("Aircraft mean error: " + aircraftMeanError);
    }

    private HashMultiset getAircraftPositionFromGenerator() {
	String positionsString = replaceTByLatestTimeStep("{Position(a, t) for Aircraft a}");
	HashMultiset aircraftPosition = (HashMultiset) BLOGUtil.getValue(positionsString, generator.currentPartialWorld, model);
	return aircraftPosition;
    }
    
    protected double aircraftPositionError(
	    HashMultiset aircraftPositionsInParticle,
	    HashMultiset aircraftPositions) {

	if (aircraftPositionsInParticle.size() != aircraftPositions.size())
	    return 500;
	
	double error = 0;
	for (Iterator it = aircraftPositionsInParticle.iterator(); it.hasNext(); ) {
	    ArrayList element = (ArrayList) it.next();
	    double positionInParticle = ((Number)element.get(0)).doubleValue();
	    error += distance(positionInParticle, aircraftPositions);
	}
	return error / aircraftPositionsInParticle.size();
    }

    protected double distance(double positionInParticle, HashMultiset aircraftPositions) {
	double error = -1;
	for (Iterator it = aircraftPositions.iterator(); it.hasNext(); ) {
	    ArrayList element = (ArrayList) it.next();
	    double position = ((Number)element.get(0)).doubleValue();
	    double square = Math.pow(positionInParticle - position, 2); 
	    if (error == -1 || square < error)
		error = square;
	}
	return error;
    }
    
//    protected void addIndicatorToModel(HashMultiset positions) {
//	model.removeFunctionWithName("Indicator");
//	removeIndicatorFromPF();
//	removeIndicatorFromGenerator();
//
//	String expression = existentialExpression(positions);
//	System.out.println("Indicator: " + expression);
//
//	model.augmentFromString(
//		"random Boolean Indicator;" +
//		"Indicator = " + expression + ";");
//    }
//    
//    protected String existentialExpression(HashMultiset positions) {
//	return existentialExpression(positions, 0);
//    }
//    
//    protected String existentialExpression(HashMultiset positions, int index) {
//	if (positions.size() == 0)
//	    return null;
//
//	Double position = (Double) Util.getFirst((ArrayList)Util.pop(positions));
//	String variableName = "b" + index;
//	LinkedList conjuncts = new LinkedList();
//	conjuncts.add("exists Blip " + variableName + " Time(" + variableName + ") = @" + generator.lastTimeStep);
//	conjuncts.add("ApparentPos(" + variableName + ") > " + (position.doubleValue() - 5));
//	conjuncts.add("ApparentPos(" + variableName + ") < " + (position.doubleValue() + 5));
//	String distinct = distinctFromPreviousOnes(index);
//	if (!distinct.equals(""))
//	    conjuncts.add(distinctFromPreviousOnes(index));
//	String recursion = existentialExpression(positions, index + 1);
//	if (recursion != null)
//	    conjuncts.add(recursion);
//	String expression = Util.join(" & ", conjuncts);
//	return expression;
//    }
//    
//    protected String distinctFromPreviousOnes(int index) {
//	LinkedList list = new LinkedList();
//	for (int i = 0; i != index; i++)
//	    list.add("b" + index + " != b" + i);
//	return Util.join(" & ", list);
//    }
//    
//    private BasicVar indicatorVariable;
//    
//    protected void removeIndicatorFromPF() {
//	if (particleFilter.particles == null)
//	    return;
//	for (Iterator it = particleFilter.particles.iterator(); it.hasNext(); ) {
//	    Particle particle = (Particle) it.next();
//	    BLOGUtil.uninstantiate(particle.getLatestWorld(), indicatorVariable);
//	}
//    }
//    
//    protected void removeIndicatorFromGenerator() {
//	BLOGUtil.uninstantiate(generator.currentPartialWorld, indicatorVariable);
//    }
    
    public static void main(String[] args) {
	Properties properties = new Properties();
	properties.setProperty("numParticles", "1000");
	properties.setProperty("useDecayedMCMC", "false");
	properties.setProperty("numMoves", "1");
	boolean randomizeDefaultContext = true;
	boolean randomizeGenerator = false;

	String modelFile = "examples/aircraft-wandering-simplest.mblog";
	Collection queryStrings = Util.list("#{Aircraft a}", "#{Blip b : Time(b) = t}");
	    
	Util.initRandom(randomizeDefaultContext);
	new AircraftWanderingRunner(
		Model.readFromFile(modelFile), queryStrings, properties, randomizeGenerator)
	.run();
    }
}
