
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Sep 29 22:21:21 PDT 2013
//----------------------------------------------------

package blog.engine.onlinePF.parser;

import java_cup.runtime.*;
import blog.engine.onlinePF.absyn.*;

/** CUP v0.10k generated parser.
  * @version Sun Sep 29 22:21:21 PDT 2013
  */
public class PolicyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PolicyParser() {super();}

  /** Constructor which sets the default scanner. */
  public PolicyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\003\003\000\002\011\005\000\002\011" +
    "\004\000\002\011\003\000\002\004\003\000\002\004\003" +
    "\000\002\010\012\000\002\005\012\000\002\007\012\000" +
    "\002\007\006\000\002\007\002\000\002\006\003\000\002" +
    "\006\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\010\003\006\006\013\010\010\001\002\000" +
    "\004\002\067\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\004\023\ufffd\001\002\000\004\024" +
    "\060\001\002\000\004\023\ufffc\001\002\000\004\023\056" +
    "\001\002\000\004\024\014\001\002\000\004\014\016\001" +
    "\002\000\004\025\033\001\002\000\016\015\017\016\020" +
    "\017\022\020\021\021\024\022\023\001\002\000\004\012" +
    "\032\001\002\000\004\012\031\001\002\000\004\012\030" +
    "\001\002\000\004\012\027\001\002\000\004\012\026\001" +
    "\002\000\004\012\025\001\002\000\004\025\ufff0\001\002" +
    "\000\004\025\uffef\001\002\000\004\025\ufff2\001\002\000" +
    "\004\025\ufff1\001\002\000\004\025\ufff3\001\002\000\004" +
    "\025\ufff4\001\002\000\004\026\034\001\002\000\006\006" +
    "\013\014\037\001\002\000\004\027\040\001\002\000\004" +
    "\027\ufff6\001\002\000\004\027\ufff5\001\002\000\012\005" +
    "\042\007\043\023\ufff7\027\ufff7\001\002\000\006\023\ufffa" +
    "\027\ufffa\001\002\000\004\026\053\001\002\000\004\024" +
    "\044\001\002\000\004\014\016\001\002\000\004\025\046" +
    "\001\002\000\004\026\047\001\002\000\006\006\013\014" +
    "\037\001\002\000\004\027\051\001\002\000\012\005\042" +
    "\007\043\023\ufff7\027\ufff7\001\002\000\006\023\ufff9\027" +
    "\ufff9\001\002\000\006\006\013\014\037\001\002\000\004" +
    "\027\055\001\002\000\006\023\ufff8\027\ufff8\001\002\000" +
    "\012\002\uffff\003\006\006\013\010\010\001\002\000\004" +
    "\002\000\001\002\000\004\014\061\001\002\000\004\014" +
    "\062\001\002\000\004\025\063\001\002\000\004\026\064" +
    "\001\002\000\006\006\013\014\037\001\002\000\004\027" +
    "\066\001\002\000\004\023\ufffb\001\002\000\004\002\uffee" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\014\003\003\004\011\005\006\010\010\011" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\035\006\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\035\006\047\001\001\000\002\001\001\000\004\007\051" +
    "\001\001\000\002\001\001\000\006\005\035\006\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\011" +
    "\005\006\010\010\011\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\035\006\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PolicyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PolicyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PolicyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 19;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }

  public PolicyParser(Scanner s, blog.msg.ErrorMsg msg) {
    this(s);
    errorMsg = msg;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PolicyParser$actions {




    int currLineno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum();
    }


    int currColno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurColNum();
    }





  private final PolicyParser parser;

  /** Constructor */
  CUP$PolicyParser$actions(PolicyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PolicyParser$do_action(
    int                        CUP$PolicyParser$act_num,
    java_cup.runtime.lr_parser CUP$PolicyParser$parser,
    java.util.Stack            CUP$PolicyParser$stack,
    int                        CUP$PolicyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PolicyParser$result;

      /* select the action based on the action number */
      switch (CUP$PolicyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		RESULT = start_val;
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PolicyParser$parser.done_parsing();
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operation_expr ::= STRING_LITERAL NEQ DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.NEQ, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operation_expr ::= STRING_LITERAL EQEQ DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.EQ, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operation_expr ::= STRING_LITERAL GEQ DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.GEQ, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operation_expr ::= STRING_LITERAL LEQ DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.LEQ, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operation_expr ::= STRING_LITERAL GT DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.GT, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operation_expr ::= STRING_LITERAL LT DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		java.lang.String e1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.Number e2 = (java.lang.Number)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.Op.LT, e2); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(8/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // action_stmt ::= STRING_LITERAL 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new ActionStmt(currLineno(), currColno(), e); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(4/*action_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // action_stmt ::= if_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = e; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(4/*action_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elseif_stmt ::= 
            {
              Stmt RESULT = null;
		 RESULT = null; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(5/*elseif_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // elseif_stmt ::= ELSE LBRACE action_stmt RBRACE 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = e; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(5/*elseif_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elseif_stmt ::= ELSEIF LPAREN operation_expr RPAREN LBRACE action_stmt RBRACE elseif_stmt 
            {
              Stmt RESULT = null;
		int eifleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left;
		int eifright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).right;
		Object eif = (Object)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		Stmt e2 = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		Stmt e3 = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new IfStmt(eifleft, e1, e2, e3); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(5/*elseif_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // if_stmt ::= IF LPAREN operation_expr RPAREN LBRACE action_stmt RBRACE elseif_stmt 
            {
              Stmt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		Stmt e2 = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		Stmt e3 = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = new IfStmt(currLineno(), currColno(), e1, e2, e3); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(3/*if_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // for_stmt ::= FOR LPAREN STRING_LITERAL STRING_LITERAL RPAREN LBRACE action_stmt RBRACE 
            {
              Stmt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).right;
		java.lang.String typ = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-4)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		Stmt act = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new ForStmt(currLineno(), currColno(), typ, var, act); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(6/*for_stmt*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= for_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = e; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= if_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 RESULT = e; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(2/*statement*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_lst ::= error 
            {
              StmtList RESULT = null;
		 System.err.println(
		"Possible cause: forgotten semicolons" );
		RESULT = null; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_lst ::= statement SEMI 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).value;
		 RESULT = new StmtList(e, null); 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statement_lst ::= statement SEMI statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).value;
		int slstleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(7/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statement_lst 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).value;
		 parser.parseResult = e; 
              CUP$PolicyParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PolicyParser$stack.elementAt(CUP$PolicyParser$top-0)).right, RESULT);
            }
          return CUP$PolicyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

