/*
 * Copyright (c) 2012, Regents of the University of California
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.  
 *
 * * Neither the name of the University of California, Berkeley nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior 
 *   written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package blog.sample;

import blog.world.PartialWorld;
import blog.model.Model;
import blog.model.Evidence;
import java.util.List;
import java.util.Properties;

/**
 * An implementation of the open universe Gibbs Sampler described by 
 * Arora et. al. 
 * TODO: This class is currently just a stub. Will be filled out over the
 * next few commits.
 *
 * @author bramsundar
 * @date Aug 10, 2012
 */

public class GibbsSampler extends Sampler {

    /**
     *  Creates a new Gibbs Sampler for a given BLOG model.
     */
    public GibbsSampler(Model model, Properties properties) {
        super(model);
        //TODO: Fill This Out
    }

	/**
	 * set the base partial world
	 */
	public void setBaseWorld(PartialWorld world) {
		baseWorld = world;
	}

	/**
	 * get the base partial world
	 */
	public PartialWorld getBaseWorld() {
		return baseWorld;
	}

	/**
	 * Generates the next partial world and computes its weight.
	 */
	public void nextSample() {
        return;
    }

    /**
     * Returns the world generated by the latest call to nextSample. This world
     * may be modified by future calls to nextSample.
     */
    public PartialWorld getLatestWorld() {
        return baseWorld;
    }

	public void initialize(Evidence evidence, List queries) {
		super.initialize(evidence, queries);
        //TODO: Fill This Out
	}

	// overall statistics
	protected int totalNumSamples = 0;
	protected int totalNumConsistent = 0;

	// statistics since last call to initialize()
	protected int numSamplesThisTrial = 0;
	protected int numConsistentThisTrial = 0;
	protected double sumWeightsThisTrial = 0;

	protected PartialWorld curWorld = null;
	private PartialWorld baseWorld = null;
}
