/*
 * Copyright (c) 2006, Regents of the University of California
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.  
 *
 * * Neither the name of the University of California, Berkeley nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior 
 *   written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package blog;

import java.util.*;
import common.Util;

/**
 * Abstract implementation of the Proposer interface.  It provides 
 * implementations of the main getInitialState and proposeNextState 
 * methods that do some standard pre-processing and post-processing, but call 
 * abstract methods to do the interesting work.  
 */
public abstract class AbstractProposer implements Proposer {
    /**
     * Creates a new AbstractProposer for the given model.
     */
    public AbstractProposer(Model model) {
    }

    /**
     * Returns a MutablePartialWorld to serve as the initial state for 
     * a Markov chain.  This world satisfies the given evidence and is 
     * complete enough to answer the given queries.  Furthermore, the 
     * given evidence and queries are stored so that 
     * <code>proposeNextState</code> can also maintain these properties.  
     *
     * <p>This implementation first creates a world, in which the
     * types returned by <code>getIdTypes</code> will be represented
     * with object identifiers.  It instantiates all observed basic
     * variables to their observed values.  It then calls
     * <code>fillInitialState</code>, which must be implemented by
     * each subclass.  Finally, it completes the initial world by
     * instantiating any variables that were not instantiated by
     * <code>getInitialStateInternal</code>, but have deterministic
     * CPDs given the current instantiation.
     *
     * @param queries List of Query objects
     */
    public MutablePartialWorld getInitialState(Evidence evidence, 
					       List queries) {
	evidenceVars = evidence.getEvidenceVars();
	queryVars = new HashSet();
	for (Iterator iter = queries.iterator(); iter.hasNext(); ) {
	    queryVars.add(((Query) iter.next()).getVariable());
	}

	MutablePartialWorld world = new MutablePartialWorld(getIdTypes());

	for (Iterator iter = evidenceVars.iterator(); iter.hasNext(); ) {
	    BayesNetVar var = (BayesNetVar) iter.next();
	    if (var instanceof BasicVar) {
		world.setValue(var, evidence.getObservedValue(var));
	    }
	}
	
	fillInitialState(world, evidence, queries);

	completeWorld(world);
	return world;
    }

    /**
     * Proposes a next state for the Markov chain given the current state.  
     * The world argument is a MutablePartialWorld that the proposer 
     * can modify to create the proposal; the saved version stored within 
     * this MutablePartialWorld is the state before the proposal.  Returns 
     * the log proposal ratio:
     *    log (q(x | x') / q(x' | x))
     *
     * <p>The proposed world satisfies the evidence and is complete enough 
     * to answer the queries specified in the last call to 
     * <code>setUpInitialState</code>.  
     *
     * <p>This implementation calls
     * <code>proposeNextStateInternal</code>, which must be
     * implemented by each subclass.  It then completes the resulting
     * world by instantiating any variables that are not already
     * instantiated but have deterministic CPDs given the proposed
     * instantiation.  Then it uninstantiates any barren variables
     * that were instantiated with deterministic CPDs in the old world
     * (this does not change the proposal probability ratio, because
     * the probability of setting these variables to their
     * determistically specified values can be assumed to be 1).
     *
     * @throws IllegalStateException if <code>getInitialState</code> 
     *                               has not been called
     */
    public double proposeNextState(MutablePartialWorld proposedWorld) {
	double logProposalRatio = proposeNextStateInternal(proposedWorld);
	System.out.println();
	proposedWorld.print(System.out);
	completeWorld(proposedWorld);
	removeBarrenDetVars(proposedWorld);
	return logProposalRatio;
    }

    /**
     * Prints any relevant statistics about the internal behavior of
     * this proposer.  This default implementation does nothing.
     */
    public void printStats() {
    }

    /**
     * Returns the set of types that this proposal distribution represents 
     * with object identifiers.  The default implementation returns 
     * an empty set.
     */
    protected Set getIdTypes() {
	return Collections.EMPTY_SET;
    }

    /**
     * Method called by getInitialState.
     *
     * @param world     a world where the only instantiated variables are 
     *                  observed basic variables
     */
    protected abstract void fillInitialState(MutablePartialWorld world, 
					     Evidence evidence, 
					     List queries);

    /**
     * Method called by proposeNextState.
     */
    protected abstract double proposeNextStateInternal
	(MutablePartialWorld proposedWorld);

    private void completeWorld(MutablePartialWorld w) {
	// Ensure all evidence and query variables are supported, 
	// passing in ValueChooser.DET_ONLY to instantiate variables whose 
	// CPDs are deterministic given w.

	// Need to make sure that vars with dirty parent sets are supported.  But only those that are ancestors of query or evidence vars -- the rest will be uninstantiated soon anyway.  

	for (Iterator iter = evidenceVars.iterator(); iter.hasNext(); ) {
	    BayesNetVar var = (BayesNetVar) iter.next();
	    var.ensureInstAndSupported(w, ValueChooser.DET_ONLY);
	}

	for (Iterator iter = queryVars.iterator(); iter.hasNext(); ) {
	    BayesNetVar var = (BayesNetVar) iter.next();
	    var.ensureInstAndSupported(w, ValueChooser.DET_ONLY);
	}
    }

    private void removeBarrenDetVars(MutablePartialWorld world) {
	LinkedList newlyBarren = new LinkedList(world.getNewlyBarrenVars());
	while (!newlyBarren.isEmpty()) {
	    BayesNetVar var = (BayesNetVar) newlyBarren.removeFirst();
	    System.out.println("Barren var: " + var);
	    if ((var instanceof BasicVar)
		    && world.getSaved().isInstantiated(var)
		    && !evidenceVars.contains(var) 
		    && !queryVars.contains(var)) {
		ParentsAndValue pav = ((BasicVar) var).getParentsAndCPD
		    (world.getSaved(), ValueChooser.NO_INSTANTIATION);
		DependencyModel.Distrib distrib 
		    = (DependencyModel.Distrib) pav.getValue();
		if (distrib.getCPD() instanceof EqualsCPD) {
		    // Variable is deterministic in old world.
		    // Uninstantiate it.
		    System.out.println("Uninstantiating barren var: " + var);
		    world.uninstantiate(var);

		    // Check to see if its parents are now barren.
		    for(Iterator parentIter = pav.getParents().iterator();
			parentIter.hasNext(); ) {

			// If parent is barren, add to the end of this
			// linked list. Note that if a parent has two
			// barren children, it will only be added to the
			// end of the list once, when the last child is
			// considered.
			BayesNetVar p = (BayesNetVar) parentIter.next();
			if (world.isInstantiated(p) 
			    && world.getBayesNet().getChildren(p).isEmpty()) {
			    newlyBarren.addLast(p);
			}
		    }
		}
	    }
	}
    }

    /**
     * Set of BayesNetVars that are observed in the evidence object
     * passed to the most recent invocation of getInitialState.
     */
    protected Set evidenceVars;

    /**
     * Set of BayesNetVars corresponding to the queries passed to the most
     * recent invocation of getInitialState.
     */
    protected Set queryVars;
}
