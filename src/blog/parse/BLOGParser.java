
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 30 14:34:51 EST 2012
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 30 14:34:51 EST 2012
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\003\003\000\002\004\002\000\002\004" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\056\003\000\002\054\006\000\002" +
    "\053\004\000\002\057\004\000\002\057\005\000\002\055" +
    "\010\000\002\060\002\000\002\060\004\000\002\060\005" +
    "\000\002\061\006\000\002\061\004\000\002\011\011\000" +
    "\002\012\010\000\002\013\007\000\002\062\005\000\002" +
    "\062\002\000\002\063\007\000\002\063\005\000\002\014" +
    "\011\000\002\015\006\000\002\065\003\000\002\065\005" +
    "\000\002\064\003\000\002\064\006\000\002\016\012\000" +
    "\002\066\003\000\002\066\005\000\002\042\004\000\002" +
    "\042\003\000\002\042\007\000\002\042\005\000\002\042" +
    "\006\000\002\041\004\000\002\041\002\000\002\017\006" +
    "\000\002\017\010\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\006\000\002" +
    "\030\003\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\032\006\000\002\032\006" +
    "\000\002\034\006\000\002\036\003\000\002\033\007\000" +
    "\002\047\003\000\002\047\002\000\002\050\005\000\002" +
    "\050\003\000\002\035\005\000\002\035\005\000\002\046" +
    "\005\000\002\046\005\000\002\037\005\000\002\037\007" +
    "\000\002\051\007\000\002\051\011\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\043\003\000\002" +
    "\043\003\000\002\044\005\000\002\045\010\000\002\045" +
    "\006\000\002\020\005\000\002\022\003\000\002\022\003" +
    "\000\002\023\005\000\002\024\005\000\002\021\005\000" +
    "\002\025\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\032\002\000\003\026\007\021\010\022\011" +
    "\030\012\020\013\025\014\032\015\017\016\035\021\027" +
    "\065\004\001\002\000\004\032\307\001\002\000\032\002" +
    "\ufff9\003\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\021\ufff9\065\ufff9\001\002\000" +
    "\032\002\ufff1\003\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\065\ufff1\001" +
    "\002\000\004\002\uffff\001\002\000\032\002\ufff7\003\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\021\ufff7\065\ufff7\001\002\000\032\002\ufffd" +
    "\003\026\007\021\010\022\011\030\012\020\013\025\014" +
    "\032\015\017\016\035\021\027\065\004\001\002\000\032" +
    "\002\ufff5\003\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\021\ufff5\065\ufff5\001\002" +
    "\000\032\002\ufff6\003\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\021\ufff6\065\ufff6" +
    "\001\002\000\032\002\ufffa\003\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\021\ufffa" +
    "\065\ufffa\001\002\000\032\002\ufff3\003\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\021\ufff3\065\ufff3\001\002\000\004\002\371\001\002\000" +
    "\044\022\075\023\052\024\103\025\064\026\110\027\054" +
    "\030\071\031\065\032\063\040\056\042\073\055\104\056" +
    "\053\065\051\067\057\071\062\073\061\001\002\000\010" +
    "\017\037\020\042\032\036\001\002\000\004\032\346\001" +
    "\002\000\010\017\037\020\042\032\036\001\002\000\032" +
    "\002\ufff0\003\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\065\ufff0\001\002" +
    "\000\032\002\ufffb\003\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\021\ufffb\065\ufffb" +
    "\001\002\000\004\032\307\001\002\000\006\002\ufffc\062" +
    "\306\001\002\000\004\032\277\001\002\000\010\017\037" +
    "\020\042\032\036\001\002\000\004\002\001\001\002\000" +
    "\044\022\075\023\052\024\103\025\064\026\110\027\054" +
    "\030\071\031\065\032\063\040\056\042\073\055\104\056" +
    "\053\065\051\067\057\071\062\073\061\001\002\000\032" +
    "\002\ufff2\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\065\ufff2\001\002" +
    "\000\032\002\ufff4\003\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\065\ufff4" +
    "\001\002\000\010\017\037\020\042\032\036\001\002\000" +
    "\070\004\uffea\005\uffea\006\uffea\032\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073" +
    "\217\074\uffea\001\002\000\004\046\253\001\002\000\070" +
    "\004\uffee\005\uffee\006\uffee\032\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061" +
    "\uffee\062\uffee\066\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\001\002\000\070\004\uffed\005\uffed\006\uffed\032" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\066\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\001\002\000\004\046" +
    "\246\001\002\000\004\032\046\001\002\000\070\004\uffeb" +
    "\005\uffeb\006\uffeb\032\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\066\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\001\002\000\070\004\uffec\005\uffec\006\uffec\032\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\066\uffec\070\uffec\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\001\002\000\006\062\047\063" +
    "\050\001\002\000\032\002\uffc8\003\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\021" +
    "\uffc8\065\uffc8\001\002\000\044\022\075\023\052\024\103" +
    "\025\064\026\110\027\054\030\071\031\065\032\063\040" +
    "\056\042\073\055\104\056\053\065\051\067\057\071\062" +
    "\073\061\001\002\000\014\003\245\017\037\020\042\032" +
    "\036\071\242\001\002\000\010\017\037\020\042\032\036" +
    "\001\002\000\044\022\075\023\052\024\103\025\064\026" +
    "\110\027\054\030\071\031\065\032\063\040\056\042\073" +
    "\055\104\056\053\065\051\067\057\071\062\073\061\001" +
    "\002\000\066\004\uffb8\005\uffb8\006\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\073" +
    "\uffb8\074\uffb8\001\002\000\066\004\uffc3\005\uffc3\006\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\066\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\001\002\000\044\022\075" +
    "\023\052\024\103\025\064\026\110\027\054\030\071\031" +
    "\065\032\063\040\056\042\073\055\104\056\053\065\051" +
    "\067\057\071\062\073\061\001\002\000\044\022\075\023" +
    "\052\024\103\025\064\026\110\027\054\030\071\031\065" +
    "\032\063\040\056\042\073\055\104\056\053\065\051\067" +
    "\057\071\062\073\061\001\002\000\066\004\uff8d\005\uff8d" +
    "\006\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046" +
    "\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d" +
    "\055\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\066\uff8d\070" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\001\002\000\046" +
    "\022\075\023\052\024\103\025\064\026\110\027\054\030" +
    "\071\031\065\032\063\040\056\042\073\055\104\056\053" +
    "\065\051\067\057\071\062\073\061\074\uff9c\001\002\000" +
    "\052\017\037\020\042\022\075\023\052\024\103\025\064" +
    "\026\110\027\054\030\071\031\065\032\174\040\056\042" +
    "\073\055\104\056\053\065\051\067\057\071\062\072\uff9c" +
    "\073\061\001\002\000\072\004\uff9f\005\uff9f\006\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\064\161\066\uff9f\067\uffd1" +
    "\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\001\002\000" +
    "\066\004\uffba\005\uffba\006\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\066\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\001\002\000\066\004\uffbc\005\uffbc\006\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\066\uffbc\070\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\074\uffbc\001\002\000\066\004\uffc5\005\uffc5" +
    "\006\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\066\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\001\002\000\066" +
    "\004\uffbe\005\uffbe\006\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\001\002\000\042\041\126\042\120\043\124\044\127\045" +
    "\123\046\135\047\130\050\137\051\134\052\122\053\125" +
    "\057\121\060\136\062\172\066\132\073\133\001\002\000" +
    "\066\004\uffbb\005\uffbb\006\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\066\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\001\002\000\066\004\uff8e\005\uff8e\006\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\066\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\001\002\000\044\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\073\061\001\002\000\066\004\uffbd\005\uffbd\006" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\066\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\074\uffbd\001\002\000\010\017" +
    "\037\020\042\032\036\001\002\000\004\067\163\001\002" +
    "\000\066\004\uffc4\005\uffc4\006\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\001\002\000\066\004\uffc6\005\uffc6\006\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\066\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\001\002\000\066\004\uffa7\005" +
    "\uffa7\006\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\066\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002\000" +
    "\066\004\uffc0\005\uffc0\006\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\001\002\000\066\004\uffb7\005\uffb7\006\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\066\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\001\002\000\004\032\111\001\002" +
    "\000\066\004\uffbf\005\uffbf\006\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\001\002\000\066\004\uffc1\005\uffc1\006\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\066\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\074\uffc1\001\002\000\066\004\uffc2\005" +
    "\uffc2\006\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\066\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\001\002\000" +
    "\066\004\uffb9\005\uffb9\006\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\001\002\000\006\064\161\067\uffd1\001\002\000\004" +
    "\067\113\001\002\000\046\022\075\023\052\024\103\025" +
    "\064\026\110\027\054\030\071\031\065\032\063\040\056" +
    "\042\073\055\104\056\053\065\051\067\057\070\uff9c\071" +
    "\062\073\061\001\002\000\052\041\126\042\120\043\124" +
    "\044\127\045\123\046\135\047\130\050\137\051\134\052" +
    "\122\053\125\057\121\060\136\061\131\062\uff9a\066\132" +
    "\070\uff9a\072\uff9a\073\133\074\uff9a\001\002\000\006\070" +
    "\uff9d\072\uff9d\001\002\000\004\070\117\001\002\000\066" +
    "\004\uff9e\005\uff9e\006\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\001\002\000\044\022\075\023\052\024\103\025\064\026" +
    "\110\027\054\030\071\031\065\032\063\040\056\042\073" +
    "\055\104\056\053\065\051\067\057\071\062\073\061\001" +
    "\002\000\044\022\075\023\052\024\103\025\064\026\110" +
    "\027\054\030\071\031\065\032\063\040\056\042\073\055" +
    "\104\056\053\065\051\067\057\071\062\073\061\001\002" +
    "\000\044\022\075\023\052\024\103\025\064\026\110\027" +
    "\054\030\071\031\065\032\063\040\056\042\073\055\104" +
    "\056\053\065\051\067\057\071\062\073\061\001\002\000" +
    "\044\022\075\023\052\024\103\025\064\026\110\027\054" +
    "\030\071\031\065\032\063\040\056\042\073\055\104\056" +
    "\053\065\051\067\057\071\062\073\061\001\002\000\044" +
    "\022\075\023\052\024\103\025\064\026\110\027\054\030" +
    "\071\031\065\032\063\040\056\042\073\055\104\056\053" +
    "\065\051\067\057\071\062\073\061\001\002\000\044\022" +
    "\075\023\052\024\103\025\064\026\110\027\054\030\071" +
    "\031\065\032\063\040\056\042\073\055\104\056\053\065" +
    "\051\067\057\071\062\073\061\001\002\000\044\022\075" +
    "\023\052\024\103\025\064\026\110\027\054\030\071\031" +
    "\065\032\063\040\056\042\073\055\104\056\053\065\051" +
    "\067\057\071\062\073\061\001\002\000\044\022\075\023" +
    "\052\024\103\025\064\026\110\027\054\030\071\031\065" +
    "\032\063\040\056\042\073\055\104\056\053\065\051\067" +
    "\057\071\062\073\061\001\002\000\044\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\073\061\001\002\000\044\022\075\023\052\024" +
    "\103\025\064\026\110\027\054\030\071\031\065\032\063" +
    "\040\056\042\073\055\104\056\053\065\051\067\057\071" +
    "\062\073\061\001\002\000\044\022\075\023\052\024\103" +
    "\025\064\026\110\027\054\030\071\031\065\032\063\040" +
    "\056\042\073\055\104\056\053\065\051\067\057\071\062" +
    "\073\061\001\002\000\044\022\075\023\052\024\103\025" +
    "\064\026\110\027\054\030\071\031\065\032\063\040\056" +
    "\042\073\055\104\056\053\065\051\067\057\071\062\073" +
    "\061\001\002\000\044\022\075\023\052\024\103\025\064" +
    "\026\110\027\054\030\071\031\065\032\063\040\056\042" +
    "\073\055\104\056\053\065\051\067\057\071\062\073\061" +
    "\001\002\000\044\022\075\023\052\024\103\025\064\026" +
    "\110\027\054\030\071\031\065\032\063\040\056\042\073" +
    "\055\104\056\053\065\051\067\057\071\062\073\061\001" +
    "\002\000\044\022\075\023\052\024\103\025\064\026\110" +
    "\027\054\030\071\031\065\032\063\040\056\042\073\055" +
    "\104\056\053\065\051\067\057\071\062\073\061\001\002" +
    "\000\044\022\075\023\052\024\103\025\064\026\110\027" +
    "\054\030\071\031\065\032\063\040\056\042\073\055\104" +
    "\056\053\065\051\067\057\071\062\073\061\001\002\000" +
    "\052\004\uffaf\005\uffaf\006\uffaf\041\126\042\120\043\124" +
    "\044\127\045\123\054\uffaf\055\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\066\uffaf\070\uffaf\071\uffaf\072\uffaf\073\133" +
    "\074\uffaf\001\002\000\066\004\uffaa\005\uffaa\006\uffaa\041" +
    "\126\042\120\043\124\044\127\045\123\046\135\047\130" +
    "\050\137\051\134\052\122\053\125\054\uffaa\055\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\066\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\073\133\074\uffaa\001\002\000\052\004\uffb1\005" +
    "\uffb1\006\uffb1\041\126\042\120\043\124\044\127\045\123" +
    "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\066" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\133\074\uffb1\001\002" +
    "\000\052\004\uffae\005\uffae\006\uffae\041\126\042\120\043" +
    "\124\044\127\045\123\054\uffae\055\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\066\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\133\074\uffae\001\002\000\042\041\126\042\120\043\124" +
    "\044\127\045\123\046\135\047\130\050\137\051\134\052" +
    "\122\053\125\057\121\060\136\066\132\073\133\074\145" +
    "\001\002\000\066\004\uffa8\005\uffa8\006\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\066\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\001\002\000\066\004\uffa9\005\uffa9\006" +
    "\uffa9\041\126\042\120\043\124\044\127\045\123\046\135" +
    "\047\130\050\137\051\134\052\122\053\125\054\uffa9\055" +
    "\uffa9\057\121\060\136\061\uffa9\062\uffa9\066\132\070\uffa9" +
    "\071\uffa9\072\uffa9\073\133\074\uffa9\001\002\000\012\062" +
    "\uff9b\070\uff9b\072\uff9b\074\uff9b\001\002\000\052\004\uffb0" +
    "\005\uffb0\006\uffb0\041\126\042\120\043\124\044\127\045" +
    "\123\054\uffb0\055\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073\133\074\uffb0\001" +
    "\002\000\066\004\uffb3\005\uffb3\006\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\062\uffb3\066\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\133\074\uffb3\001\002\000\066\004\uffb6\005\uffb6\006\uffb6" +
    "\041\uffb6\042\uffb6\043\124\044\127\045\123\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\066\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\133\074\uffb6\001\002\000\052\004\uffac" +
    "\005\uffac\006\uffac\041\126\042\120\043\124\044\127\045" +
    "\123\054\uffac\055\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\066\uffac\070\uffac\071\uffac\072\uffac\073\133\074\uffac\001" +
    "\002\000\066\004\uffb4\005\uffb4\006\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\066\uffb4\070\uffb4\071\uffb4\072\uffb4\073" +
    "\133\074\uffb4\001\002\000\066\004\uffb2\005\uffb2\006\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\066\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\133\074\uffb2\001\002\000\052\004\uffad" +
    "\005\uffad\006\uffad\041\126\042\120\043\124\044\127\045" +
    "\123\054\uffad\055\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\066\uffad\070\uffad\071\uffad\072\uffad\073\133\074\uffad\001" +
    "\002\000\066\004\uffab\005\uffab\006\uffab\041\126\042\120" +
    "\043\124\044\127\045\123\046\135\047\130\050\137\051" +
    "\134\052\122\053\125\054\uffab\055\uffab\057\uffab\060\uffab" +
    "\061\uffab\062\uffab\066\uffab\070\uffab\071\uffab\072\uffab\073" +
    "\133\074\uffab\001\002\000\066\004\uffb5\005\uffb5\006\uffb5" +
    "\041\uffb5\042\uffb5\043\124\044\127\045\123\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\066\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\073\133\074\uffb5\001\002\000\004\032\111" +
    "\001\002\000\004\067\uffd0\001\002\000\046\022\075\023" +
    "\052\024\103\025\064\026\110\027\054\030\071\031\065" +
    "\032\063\040\056\042\073\055\104\056\053\065\051\067" +
    "\057\070\uff9c\071\062\073\061\001\002\000\004\070\165" +
    "\001\002\000\066\004\uffa0\005\uffa0\006\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\066\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\001\002\000\004\032\167\001\002\000" +
    "\044\022\075\023\052\024\103\025\064\026\110\027\054" +
    "\030\071\031\065\032\063\040\056\042\073\055\104\056" +
    "\053\065\051\067\057\071\062\073\061\001\002\000\066" +
    "\004\uffa1\005\uffa1\006\uffa1\041\126\042\120\043\124\044" +
    "\127\045\123\046\135\047\130\050\137\051\134\052\122" +
    "\053\125\054\uffa1\055\uffa1\057\121\060\136\061\uffa1\062" +
    "\uffa1\066\132\070\uffa1\071\uffa1\072\uffa1\073\133\074\uffa1" +
    "\001\002\000\066\004\uffa6\005\uffa6\006\uffa6\041\uffa6\042" +
    "\uffa6\043\124\044\127\045\123\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\066\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\133\074\uffa6\001\002\000\032\002\uffc7\003\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\021\uffc7\065\uffc7\001\002\000\004\072\222\001" +
    "\002\000\052\032\uffea\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\057\uff9f\060\uff9f\061\uff9f\064\161\066\uff9f\067\uffd1" +
    "\072\uff9f\073\217\001\002\000\044\041\126\042\120\043" +
    "\124\044\127\045\123\046\135\047\130\050\137\051\134" +
    "\052\122\053\125\057\121\060\136\061\131\066\206\072" +
    "\uff9a\073\133\001\002\000\004\072\205\001\002\000\004" +
    "\032\200\001\002\000\006\063\201\072\202\001\002\000" +
    "\044\022\075\023\052\024\103\025\064\026\110\027\054" +
    "\030\071\031\065\032\063\040\056\042\073\055\104\056" +
    "\053\065\051\067\057\071\062\073\061\001\002\000\066" +
    "\004\uff8a\005\uff8a\006\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\057\uff8a\060\uff8a\061\uff8a\062" +
    "\uff8a\066\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\001\002\000\042\041\126\042\120\043\124\044\127\045" +
    "\123\046\135\047\130\050\137\051\134\052\122\053\125" +
    "\057\121\060\136\066\132\072\204\073\133\001\002\000" +
    "\066\004\uff8b\005\uff8b\006\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b\061\uff8b" +
    "\062\uff8b\066\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\001\002\000\066\004\uff8c\005\uff8c\006\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\066\uff8c\070\uff8c\071\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\001\002\000\044\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\073\061\001\002\000\044\041\126\042\120\043" +
    "\124\044\127\045\123\046\135\047\130\050\137\051\134" +
    "\052\122\053\125\057\121\060\136\061\uffa9\066\132\072" +
    "\uffa9\073\133\001\002\000\044\022\075\023\052\024\103" +
    "\025\064\026\110\027\054\030\071\031\065\032\063\040" +
    "\056\042\073\055\104\056\053\065\051\067\057\071\062" +
    "\073\061\001\002\000\066\004\uff94\005\uff94\006\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\057" +
    "\uff94\060\uff94\061\uff94\062\uff94\066\uff94\070\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\001\002\000\004\072\uff93\001" +
    "\002\000\040\041\126\042\120\043\124\044\127\045\123" +
    "\046\135\047\130\050\137\051\134\052\122\053\125\057" +
    "\121\060\136\066\214\073\133\001\002\000\044\022\075" +
    "\023\052\024\103\025\064\026\110\027\054\030\071\031" +
    "\065\032\063\040\056\042\073\055\104\056\053\065\051" +
    "\067\057\071\062\073\061\001\002\000\044\041\126\042" +
    "\120\043\124\044\127\045\123\046\135\047\130\050\137" +
    "\051\134\052\122\053\125\057\121\060\136\061\210\066" +
    "\132\072\uff92\073\133\001\002\000\070\004\uffe8\005\uffe8" +
    "\006\uffe8\032\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\066" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002" +
    "\000\004\074\220\001\002\000\070\004\uffe7\005\uffe7\006" +
    "\uffe7\032\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\055\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\217\074\uffe7\001\002\000" +
    "\070\004\uffe6\005\uffe6\006\uffe6\032\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\066\uffe6\070\uffe6\071\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\001\002\000\066\004\uff95\005\uff95\006\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\057\uff95\060\uff95\061\uff95\062\uff95\066\uff95\070\uff95\071" +
    "\uff95\072\uff95\073\uff95\074\uff95\001\002\000\004\074\232" +
    "\001\002\000\006\062\227\074\uff9d\001\002\000\004\074" +
    "\226\001\002\000\066\004\uff99\005\uff99\006\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\066\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\074\uff99\001\002\000\044\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\073\061\001\002\000\004\074\uff97\001\002\000" +
    "\006\062\227\074\uff96\001\002\000\066\004\uff98\005\uff98" +
    "\006\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98" +
    "\055\uff98\057\uff98\060\uff98\061\uff98\062\uff98\066\uff98\070" +
    "\uff98\071\uff98\072\uff98\073\uff98\074\uff98\001\002\000\042" +
    "\041\126\042\120\043\124\044\127\045\123\046\135\047" +
    "\130\050\137\051\134\052\122\053\125\057\121\060\136" +
    "\066\132\070\234\073\133\001\002\000\066\004\uffa3\005" +
    "\uffa3\006\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\066\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\001\002\000" +
    "\066\004\uffa4\005\uffa4\006\uffa4\041\126\042\120\043\124" +
    "\044\127\045\123\046\135\047\130\050\137\051\134\052" +
    "\122\053\125\054\uffa4\055\uffa4\057\121\060\136\061\uffa4" +
    "\062\uffa4\066\132\070\uffa4\071\uffa4\072\uffa4\073\133\074" +
    "\uffa4\001\002\000\066\004\uffa5\005\uffa5\006\uffa5\041\126" +
    "\042\120\043\124\044\127\045\123\046\135\047\130\050" +
    "\137\051\134\052\122\053\125\054\uffa5\055\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\066\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\133\074\uffa5\001\002\000\004\032\240\001\002" +
    "\000\044\022\075\023\052\024\103\025\064\026\110\027" +
    "\054\030\071\031\065\032\063\040\056\042\073\055\104" +
    "\056\053\065\051\067\057\071\062\073\061\001\002\000" +
    "\066\004\uffa2\005\uffa2\006\uffa2\041\126\042\120\043\124" +
    "\044\127\045\123\046\135\047\130\050\137\051\134\052" +
    "\122\053\125\054\uffa2\055\uffa2\057\121\060\136\061\uffa2" +
    "\062\uffa2\066\132\070\uffa2\071\uffa2\072\uffa2\073\133\074" +
    "\uffa2\001\002\000\052\017\037\020\042\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\174\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\072\uff9c\073\061\001\002\000\066\004\uff91\005" +
    "\uff91\006\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\057\uff91\060\uff91\061\uff91\062\uff91\066\uff91" +
    "\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\001\002\000" +
    "\066\004\uff90\005\uff90\006\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\066\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074" +
    "\uff90\001\002\000\066\004\uff8f\005\uff8f\006\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\066\uff8f\070\uff8f\071\uff8f\072" +
    "\uff8f\073\uff8f\074\uff8f\001\002\000\010\017\037\020\042" +
    "\032\036\001\002\000\004\061\250\001\002\000\010\017" +
    "\037\020\042\032\036\001\002\000\004\047\252\001\002" +
    "\000\070\004\uffe5\005\uffe5\006\uffe5\032\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\066\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\001\002\000\004\032\254\001\002\000" +
    "\004\047\255\001\002\000\070\004\uffe9\005\uffe9\006\uffe9" +
    "\032\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\066\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\001\002\000\004" +
    "\062\260\001\002\000\042\041\126\042\120\043\124\044" +
    "\127\045\123\046\135\047\130\050\137\051\134\052\122" +
    "\053\125\057\121\060\136\062\uff83\066\132\073\133\001" +
    "\002\000\032\002\uff84\003\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\021\uff84\065" +
    "\uff84\001\002\000\004\032\262\001\002\000\006\054\uffe4" +
    "\067\264\001\002\000\004\054\274\001\002\000\012\017" +
    "\037\020\042\032\036\070\267\001\002\000\004\070\273" +
    "\001\002\000\004\032\270\001\002\000\012\005\uffe3\054" +
    "\uffe3\055\uffe3\071\uffe3\001\002\000\006\061\271\070\uffe0" +
    "\001\002\000\010\017\037\020\042\032\036\001\002\000" +
    "\004\070\uffe1\001\002\000\012\005\uffe2\054\uffe2\055\uffe2" +
    "\071\uffe2\001\002\000\044\022\075\023\052\024\103\025" +
    "\064\026\110\027\054\030\071\031\065\032\063\040\056" +
    "\042\073\055\104\056\053\065\051\067\057\071\062\073" +
    "\061\001\002\000\042\041\126\042\120\043\124\044\127" +
    "\045\123\046\135\047\130\050\137\051\134\052\122\053" +
    "\125\057\121\060\136\062\276\066\132\073\133\001\002" +
    "\000\032\002\uffdf\003\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\021\uffdf\065\uffdf" +
    "\001\002\000\004\054\300\001\002\000\004\032\111\001" +
    "\002\000\004\067\302\001\002\000\046\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\070\uff9c\071\062\073\061\001\002\000\004\070\304\001" +
    "\002\000\004\062\305\001\002\000\032\002\uffd2\003\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\021\uffd2\065\uffd2\001\002\000\032\002\ufff8" +
    "\003\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\021\ufff8\065\ufff8\001\002\000\016" +
    "\005\uffea\032\uffea\054\uffea\055\uffea\067\uffea\071\uffea\001" +
    "\002\000\004\032\311\001\002\000\010\061\uffd4\062\uffd4" +
    "\073\317\001\002\000\006\061\315\062\uffd6\001\002\000" +
    "\004\062\314\001\002\000\032\002\uffd7\003\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\021\uffd7\065\uffd7\001\002\000\004\032\311\001\002" +
    "\000\004\062\uffd5\001\002\000\004\025\320\001\002\000" +
    "\004\074\321\001\002\000\006\061\uffd3\062\uffd3\001\002" +
    "\000\004\032\323\001\002\000\014\005\uffe4\054\uffe4\055" +
    "\uffe4\067\264\071\uffe4\001\002\000\012\005\331\054\325" +
    "\055\104\071\326\001\002\000\044\022\075\023\052\024" +
    "\103\025\064\026\110\027\054\030\071\031\065\032\063" +
    "\040\056\042\073\055\104\056\053\065\051\067\057\071" +
    "\062\073\061\001\002\000\012\005\331\054\325\055\104" +
    "\071\326\001\002\000\010\004\uffce\062\uffce\072\uffce\001" +
    "\002\000\004\062\342\001\002\000\044\022\075\023\052" +
    "\024\103\025\064\026\110\027\054\030\071\031\065\032" +
    "\063\040\056\042\073\055\104\056\053\065\051\067\057" +
    "\071\062\073\061\001\002\000\052\005\331\006\333\041" +
    "\126\042\120\043\124\044\127\045\123\046\135\047\130" +
    "\050\137\051\134\052\122\053\125\054\325\055\104\057" +
    "\121\060\136\066\132\071\326\073\133\001\002\000\012" +
    "\005\331\054\325\055\104\071\326\001\002\000\010\004" +
    "\335\062\uffc9\072\uffc9\001\002\000\012\005\331\054\325" +
    "\055\104\071\326\001\002\000\010\004\uffcb\062\uffcb\072" +
    "\uffcb\001\002\000\010\004\uffca\062\uffca\072\uffca\001\002" +
    "\000\010\004\335\062\uffc9\072\uffc9\001\002\000\010\004" +
    "\uffcd\062\uffcd\072\uffcd\001\002\000\032\002\uffde\003\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\021\uffde\065\uffde\001\002\000\004\072\344" +
    "\001\002\000\010\004\uffcc\062\uffcc\072\uffcc\001\002\000" +
    "\046\004\uffcf\041\126\042\120\043\124\044\127\045\123" +
    "\046\135\047\130\050\137\051\134\052\122\053\125\057" +
    "\121\060\136\062\uffcf\066\132\072\uffcf\073\133\001\002" +
    "\000\004\062\347\001\002\000\032\002\uffef\003\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\021\uffef\065\uffef\001\002\000\004\032\351\001" +
    "\002\000\004\067\352\001\002\000\010\017\037\020\042" +
    "\032\036\001\002\000\004\070\354\001\002\000\004\062" +
    "\355\001\002\000\032\002\uffd8\003\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\021" +
    "\uffd8\065\uffd8\001\002\000\042\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\366\057\uff8d\060\uff8d\066\uff8d\073\uff8d" +
    "\001\002\000\042\041\126\042\120\043\124\044\127\045" +
    "\123\046\135\047\130\050\137\051\134\052\122\053\125" +
    "\054\364\057\121\060\136\066\132\073\133\001\002\000" +
    "\004\062\uff88\001\002\000\004\062\uff87\001\002\000\004" +
    "\062\363\001\002\000\032\002\uff89\003\uff89\007\uff89\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\021\uff89\065\uff89\001\002\000\044\022\075\023\052\024" +
    "\103\025\064\026\110\027\054\030\071\031\065\032\063" +
    "\040\056\042\073\055\104\056\053\065\051\067\057\071" +
    "\062\073\061\001\002\000\042\041\126\042\120\043\124" +
    "\044\127\045\123\046\135\047\130\050\137\051\134\052" +
    "\122\053\125\057\121\060\136\062\uff86\066\132\073\133" +
    "\001\002\000\004\071\367\001\002\000\046\022\075\023" +
    "\052\024\103\025\064\026\110\027\054\030\071\031\065" +
    "\032\063\040\056\042\073\055\104\056\053\065\051\067" +
    "\057\071\062\072\uff9c\073\061\001\002\000\004\062\uff85" +
    "\001\002\000\004\002\uff82\001\002\000\004\002\ufffe\001" +
    "\002\000\014\005\uffdb\054\uffdb\055\uffdb\067\375\071\uffdb" +
    "\001\002\000\012\005\331\054\325\055\104\071\326\001" +
    "\002\000\004\032\376\001\002\000\004\054\u0101\001\002" +
    "\000\004\070\u0100\001\002\000\012\005\uffdc\054\uffdc\055" +
    "\uffdc\071\uffdc\001\002\000\004\032\u0102\001\002\000\006" +
    "\061\u0103\070\uffd9\001\002\000\004\032\376\001\002\000" +
    "\004\070\uffda\001\002\000\004\062\u0106\001\002\000\032" +
    "\002\uffdd\003\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\021\uffdd\065\uffdd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\040\003\015\004\030\005\006\006\010\007" +
    "\023\010\007\011\012\012\011\013\014\014\033\015\032" +
    "\016\022\017\005\020\013\021\004\001\001\000\004\056" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\371\006\010\007" +
    "\023\010\007\011\012\012\011\013\014\014\033\015\032" +
    "\016\022\017\005\020\013\021\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\022\361\023\360\024\357\026" +
    "\356\027\076\030\077\031\100\032\101\033\065\034\054" +
    "\035\106\036\073\037\105\040\066\043\104\044\071\045" +
    "\355\066\075\001\001\000\014\052\347\053\044\054\040" +
    "\055\043\056\037\001\001\000\002\001\001\000\014\052" +
    "\321\053\044\054\040\055\043\056\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\052\260\053\044" +
    "\054\040\055\043\056\037\001\001\000\002\001\001\000" +
    "\042\025\255\026\256\027\076\030\077\031\100\032\101" +
    "\033\065\034\054\035\106\036\073\037\105\040\066\043" +
    "\104\044\071\045\057\066\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\052\042\053\044\054\040\055" +
    "\043\056\037\001\001\000\004\057\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\026\067\027" +
    "\076\030\077\031\100\032\101\033\065\034\054\035\106" +
    "\036\073\037\105\040\066\043\104\044\071\045\057\066" +
    "\075\001\001\000\022\043\242\044\071\045\057\052\243" +
    "\053\044\054\040\055\043\056\037\001\001\000\014\052" +
    "\236\053\044\054\040\055\043\056\037\001\001\000\040" +
    "\026\235\027\076\030\077\031\100\032\101\033\065\034" +
    "\054\035\106\036\073\037\105\040\066\043\104\044\071" +
    "\045\057\066\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\026\234\027\076\030\077\031\100\032\101" +
    "\033\065\034\054\035\106\036\073\037\105\040\066\043" +
    "\104\044\071\045\057\066\075\001\001\000\040\026\232" +
    "\027\076\030\077\031\100\032\101\033\065\034\054\035" +
    "\106\036\073\037\105\040\066\043\104\044\071\045\057" +
    "\066\075\001\001\000\002\001\001\000\046\026\113\027" +
    "\076\030\077\031\100\032\101\033\065\034\054\035\106" +
    "\036\073\037\105\040\066\043\104\044\071\045\057\046" +
    "\222\047\224\050\223\066\075\001\001\000\060\026\174" +
    "\027\076\030\077\031\100\032\101\033\065\034\054\035" +
    "\106\036\073\037\105\040\066\043\104\044\071\045\057" +
    "\047\175\050\114\051\172\052\176\053\044\054\040\055" +
    "\043\056\037\066\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\026\170\027\076\030\077\031\100\032\101\033" +
    "\065\034\054\035\106\036\073\037\105\040\066\043\104" +
    "\044\071\045\057\066\075\001\001\000\002\001\001\000" +
    "\014\052\165\053\044\054\040\055\043\056\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\026\113\027\076\030\077\031\100\032" +
    "\101\033\065\034\054\035\106\036\073\037\105\040\066" +
    "\043\104\044\071\045\057\047\115\050\114\066\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\026\157\027\076\030\077\031" +
    "\100\032\101\033\065\034\054\035\106\036\073\037\105" +
    "\040\066\043\104\044\071\045\057\066\075\001\001\000" +
    "\040\026\156\027\076\030\077\031\100\032\101\033\065" +
    "\034\054\035\106\036\073\037\105\040\066\043\104\044" +
    "\071\045\057\066\075\001\001\000\040\026\155\027\076" +
    "\030\077\031\100\032\101\033\065\034\054\035\106\036" +
    "\073\037\105\040\066\043\104\044\071\045\057\066\075" +
    "\001\001\000\040\026\154\027\076\030\077\031\100\032" +
    "\101\033\065\034\054\035\106\036\073\037\105\040\066" +
    "\043\104\044\071\045\057\066\075\001\001\000\040\026" +
    "\153\027\076\030\077\031\100\032\101\033\065\034\054" +
    "\035\106\036\073\037\105\040\066\043\104\044\071\045" +
    "\057\066\075\001\001\000\040\026\152\027\076\030\077" +
    "\031\100\032\101\033\065\034\054\035\106\036\073\037" +
    "\105\040\066\043\104\044\071\045\057\066\075\001\001" +
    "\000\040\026\151\027\076\030\077\031\100\032\101\033" +
    "\065\034\054\035\106\036\073\037\105\040\066\043\104" +
    "\044\071\045\057\066\075\001\001\000\040\026\150\027" +
    "\076\030\077\031\100\032\101\033\065\034\054\035\106" +
    "\036\073\037\105\040\066\043\104\044\071\045\057\066" +
    "\075\001\001\000\040\026\147\027\076\030\077\031\100" +
    "\032\101\033\065\034\054\035\106\036\073\037\105\040" +
    "\066\043\104\044\071\045\057\066\075\001\001\000\042" +
    "\026\113\027\076\030\077\031\100\032\101\033\065\034" +
    "\054\035\106\036\073\037\105\040\066\043\104\044\071" +
    "\045\057\050\146\066\075\001\001\000\040\026\145\027" +
    "\076\030\077\031\100\032\101\033\065\034\054\035\106" +
    "\036\073\037\105\040\066\043\104\044\071\045\057\066" +
    "\075\001\001\000\040\026\143\027\076\030\077\031\100" +
    "\032\101\033\065\034\054\035\106\036\073\037\105\040" +
    "\066\043\104\044\071\045\057\066\075\001\001\000\040" +
    "\026\142\027\076\030\077\031\100\032\101\033\065\034" +
    "\054\035\106\036\073\037\105\040\066\043\104\044\071" +
    "\045\057\066\075\001\001\000\040\026\141\027\076\030" +
    "\077\031\100\032\101\033\065\034\054\035\106\036\073" +
    "\037\105\040\066\043\104\044\071\045\057\066\075\001" +
    "\001\000\040\026\140\027\076\030\077\031\100\032\101" +
    "\033\065\034\054\035\106\036\073\037\105\040\066\043" +
    "\104\044\071\045\057\066\075\001\001\000\040\026\137" +
    "\027\076\030\077\031\100\032\101\033\065\034\054\035" +
    "\106\036\073\037\105\040\066\043\104\044\071\045\057" +
    "\066\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\161\001\001" +
    "\000\002\001\001\000\044\026\113\027\076\030\077\031" +
    "\100\032\101\033\065\034\054\035\106\036\073\037\105" +
    "\040\066\043\104\044\071\045\057\047\163\050\114\066" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\026\167\027\076\030\077\031\100\032" +
    "\101\033\065\034\054\035\106\036\073\037\105\040\066" +
    "\043\104\044\071\045\057\066\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\026\202" +
    "\027\076\030\077\031\100\032\101\033\065\034\054\035" +
    "\106\036\073\037\105\040\066\043\104\044\071\045\057" +
    "\066\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\026\206\027\076" +
    "\030\077\031\100\032\101\033\065\034\054\035\106\036" +
    "\073\037\105\040\066\043\104\044\071\045\057\066\075" +
    "\001\001\000\002\001\001\000\042\026\212\027\076\030" +
    "\077\031\100\032\101\033\065\034\054\035\106\036\073" +
    "\037\105\040\066\043\104\044\071\045\057\051\211\066" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\026\214\027\076\030\077\031\100\032" +
    "\101\033\065\034\054\035\106\036\073\037\105\040\066" +
    "\043\104\044\071\045\057\066\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\026\113\027\076\030\077\031\100\032\101\033" +
    "\065\034\054\035\106\036\073\037\105\040\066\043\104" +
    "\044\071\045\057\046\227\050\230\066\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\026\240\027\076\030\077" +
    "\031\100\032\101\033\065\034\054\035\106\036\073\037" +
    "\105\040\066\043\104\044\071\045\057\066\075\001\001" +
    "\000\002\001\001\000\056\026\113\027\076\030\077\031" +
    "\100\032\101\033\065\034\054\035\106\036\073\037\105" +
    "\040\066\043\104\044\071\045\057\047\175\050\114\052" +
    "\176\053\044\054\040\055\043\056\037\066\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\052\246\053\044\054\040\055\043\056\037\001\001" +
    "\000\002\001\001\000\014\052\250\053\044\054\040\055" +
    "\043\056\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\262\001\001\000\002\001\001\000" +
    "\016\052\265\053\044\054\040\055\043\056\037\061\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\052\265\053\044\054\040" +
    "\055\043\056\037\061\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\026\274\027\076\030\077\031\100" +
    "\032\101\033\065\034\054\035\106\036\073\037\105\040" +
    "\066\043\104\044\071\045\057\066\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\300\001\001\000\002\001\001\000\044\026\113\027\076" +
    "\030\077\031\100\032\101\033\065\034\054\035\106\036" +
    "\073\037\105\040\066\043\104\044\071\045\057\047\302" +
    "\050\114\066\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\311\065\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\064\311\065\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\323\001\001\000\006\033\326\042\327\001" +
    "\001\000\040\026\344\027\076\030\077\031\100\032\101" +
    "\033\065\034\054\035\106\036\073\037\105\040\066\043" +
    "\104\044\071\045\057\066\075\001\001\000\006\033\326" +
    "\042\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\026\331\027\076\030\077\031\100\032\101\033\065" +
    "\034\054\035\106\036\073\037\105\040\066\043\104\044" +
    "\071\045\057\066\075\001\001\000\006\033\326\042\333" +
    "\001\001\000\006\033\326\042\337\001\001\000\004\041" +
    "\335\001\001\000\006\033\326\042\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\052\352" +
    "\053\044\054\040\055\043\056\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\026\364\027\076" +
    "\030\077\031\100\032\101\033\065\034\054\035\106\036" +
    "\073\037\105\040\066\043\104\044\071\045\057\066\075" +
    "\001\001\000\002\001\001\000\004\044\367\001\001\000" +
    "\044\026\113\027\076\030\077\031\100\032\101\033\065" +
    "\034\054\035\106\036\073\037\105\040\066\043\104\044" +
    "\071\045\057\047\175\050\114\066\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\373\001\001\000\006\033\326\042\u0104\001\001\000\004" +
    "\063\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 127;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }

  public BLOGParser(Scanner s, blog.msg.ErrorMsg msg) {
    this(s);
    errorMsg = msg;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {



  static blog.symbol.Symbol sym(String s) {
	         return blog.symbol.Symbol.symbol(s);
  }

    LocationInFile getCurLocation() {
        return new LocationInFile
            (((ScannerWithLocInfo)parser.getScanner()).getCurFilename(),
             ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum());
    }

    int currLineno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum();
    }


    int currColno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurColNum();
    }

/* //TO-DO
    void semantic_error( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + curr_lineno( )
                            + " Semantic error: " + message);
	 parser.omerrs++;
    }
*/
  void error(String msg) {
    parser.errorMsg.error(currLineno(), currColno(), msg);
  }

    void warning( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + currLineno( )
                            + " Warning: " + message);
    }

    String curr_filename() {
	  return ((ScannerWithLocInfo)parser.getScanner()).getCurFilename();
    }


  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // query ::= expression 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QueryStmt(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*query*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // query_stmt ::= QUERY query SEMI 
            {
              Stmt RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt q = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = q; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // symbol_evidence ::= implicit_set EQ explicit_set 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ImplicitSetExpr e1 = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExplicitSetExpr e2 = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(18/*symbol_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ValueEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(17/*value_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // evidence ::= value_evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(16/*evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // evidence ::= symbol_evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(16/*evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // evidence_stmt ::= OBS evidence SEMI 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(14/*evidence_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // implicit_set ::= LBRACE type ID RBRACE 
            {
              ImplicitSetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              ImplicitSetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              ExplicitSetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(34/*explicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // set_expr ::= implicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ImplicitSetExpr e = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(33/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // set_expr ::= explicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExplicitSetExpr e = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(33/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT = null;
		 error("expecting number expresssion here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), new ImplicitSetExpr(currLineno(), currColno(), ty, null, null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression RIGHTARROW expression 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e4 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, new ExprTupleList(e3, e4, null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(39/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(39/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // map_construct_expression ::= LBRACE expression RIGHTARROW expression RBRACE 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(currLineno(), currColno(), 
                new ExprTupleList(e1, e2, null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*map_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*map_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // semi_colon_separated_expression_list ::= expression_list SEMI expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2left, e2), null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // semi_colon_separated_expression_list ::= expression_list SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_list ::= expression 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opt_expression_list ::= 
            {
              ExprList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // distribution_expr ::= DISTRIB class_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionExpr(currLineno(), currColno(), sym(name), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(25/*distribution_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // symbol_expr ::= ID 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolExpr(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(28/*symbol_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_call ::= class_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(currLineno(), currColno(), sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(26/*function_call*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unary_operation_expr ::= LPAREN expression RPAREN 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unary_operation_expr ::= AT expression 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.AT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), new IntExpr(currLineno(), currColno(), 0), OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operation_expr ::= expression RIGHTARROW expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.IMPLY, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operation_expr ::= expression OR expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operation_expr ::= expression AND expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operation_expr ::= expression GT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operation_expr ::= expression LT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= NULL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NullExpr(currLineno(), currColno()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new BooleanExpr(currLineno(), currColno(), e.booleanValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new DoubleExpr(currLineno(), currColno(), e.doubleValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= INT_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IntExpr(currLineno(), currColno(), e.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.toString().intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= STRING_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= symbol_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= number_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= quantified_formula 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= map_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= list_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= function_call 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= literal 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= distribution_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter_decl ::= PARAM type ID COLON expression SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter_decl ::= PARAM type ID SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elseif_list ::= 
            {
              Expr RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elseif_list ::= ELSE dependency_statement_body 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dependency_statement_body ::= IF expression dependency_statement_body elseif_list 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing THEN in dependency statement clause, proceed anyway");
    RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dependency_statement_body ::= LBRACE dependency_statement_body RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dependency_statement_body ::= IF expression THEN dependency_statement_body elseif_list 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dependency_statement_body ::= distribution_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dependency_statement_body ::= EQ expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // class_name ::= ID DOT class_name 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(52/*class_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // class_name ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(52/*class_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // distribution_decl ::= DISTRIBUTION ID EQ class_name LPAREN opt_expression_list RPAREN SEMI 
            {
              Stmt RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new DistributionDec(currLineno(), currColno(), sym(id),
      new ClassName(currLineno(), currColno(), sym(name)), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(12/*distribution_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id), s.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id_or_subid ::= ID 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(51/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(51/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // distinct_decl ::= DISTINCT name_type id_or_subid_list SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistinctSymbolDec(currLineno(), currColno(), ty, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(11/*distinct_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // number_stmt ::= NUMSIGN name_type opt_parenthesized_origin_var_list dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new NumberDec(currLineno(), currColno(), ty, otl, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new RandomFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(8/*rand_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FixedFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(7/*fixed_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_var_lst ::= type ID 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(sym(id), ty, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opt_parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(currLineno(), currColno(), t1, t2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*map_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dims ::= LBRACKET RBRACKET dims 
            {
              Integer RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new Integer(d.intValue() + 1); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*dims*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dims ::= LBRACKET RBRACKET 
            {
              Integer RESULT = null;
		 RESULT = new Integer(1); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*dims*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_type ::= ID dims 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ArrayTy(currLineno(), currColno(),
        new NameTy(currLineno(), currColno(), sym(typename)), d.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(41/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_type ::= LIST LT ID GT 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListTy(currLineno(), currColno(),
        new NameTy(currLineno(), currColno(), sym(typename))); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(42/*list_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // name_type ::= ID 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NameTy(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(44/*name_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= map_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= array_type 
            {
              Ty RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty at = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = at; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= list_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= name_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_decl ::= TYPE ID SEMI 
            {
              Stmt RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TypeDec(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(6/*type_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= error SEMI 
            {
              Stmt RESULT = null;
		 error("unmatched statement, or possible missing semicolon");
              RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= query_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= evidence_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= error 
            {
              StmtList RESULT = null;
		 System.err.println(
		"Possible cause: forgotten semicolon" );
		RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StmtList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_lst ::= statement statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int slstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // opt_statement_lst ::= 
            {
              StmtList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opt_statement_lst 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

