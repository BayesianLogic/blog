
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Sun Jun 15 21:15:01 PDT 2014
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Sun Jun 15 21:15:01 PDT 2014
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\004\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\052\006\000\002\055\004\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\054\004\000\002\054\003" +
    "\000\002\054\005\000\002\054\004\000\002\054\004\000" +
    "\002\053\010\000\002\070\002\000\002\070\004\000\002" +
    "\070\005\000\002\070\005\000\002\070\005\000\002\070" +
    "\005\000\002\070\005\000\002\061\004\000\002\061\004" +
    "\000\002\062\004\000\002\062\004\000\002\071\006\000" +
    "\002\071\004\000\002\071\005\000\002\071\006\000\002" +
    "\071\005\000\002\071\005\000\002\071\006\000\002\010" +
    "\011\000\002\010\010\000\002\011\007\000\002\011\007" +
    "\000\002\012\006\000\002\012\005\000\002\012\006\000" +
    "\002\063\003\000\002\063\003\000\002\064\004\000\002" +
    "\064\004\000\002\065\004\000\002\065\004\000\002\066" +
    "\004\000\002\066\004\000\002\072\005\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\002\000" +
    "\002\073\007\000\002\073\007\000\002\073\010\000\002" +
    "\073\010\000\002\073\006\000\002\073\006\000\002\073" +
    "\006\000\002\073\005\000\002\013\010\000\002\013\010" +
    "\000\002\013\010\000\002\013\010\000\002\013\007\000" +
    "\002\013\007\000\002\014\005\000\002\075\003\000\002" +
    "\075\005\000\002\075\004\000\002\075\005\000\002\060" +
    "\003\000\002\060\003\000\002\060\004\000\002\060\004" +
    "\000\002\057\003\000\002\057\005\000\002\057\004\000" +
    "\002\057\004\000\002\057\003\000\002\057\006\000\002" +
    "\057\006\000\002\057\007\000\002\074\003\000\002\074" +
    "\006\000\002\074\004\000\002\015\011\000\002\076\003" +
    "\000\002\076\005\000\002\040\004\000\002\040\003\000" +
    "\002\040\007\000\002\040\005\000\002\040\006\000\002" +
    "\040\006\000\002\037\004\000\002\037\002\000\002\016" +
    "\005\000\002\016\007\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\006\000\002" +
    "\027\005\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\004\000\002\027\004" +
    "\000\002\027\005\000\002\027\004\000\002\027\005\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\030\005\000\002\030\004\000\002\031" +
    "\006\000\002\031\006\000\002\031\004\000\002\031\004" +
    "\000\002\031\005\000\002\031\005\000\002\031\006\000" +
    "\002\031\005\000\002\031\005\000\002\031\006\000\002" +
    "\033\006\000\002\032\007\000\002\046\003\000\002\046" +
    "\002\000\002\047\005\000\002\047\003\000\002\034\005" +
    "\000\002\034\005\000\002\045\005\000\002\045\006\000" +
    "\002\045\005\000\002\045\006\000\002\045\004\000\002" +
    "\045\004\000\002\035\005\000\002\050\007\000\002\050" +
    "\005\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\005\000\002\043\010\000\002\043\006\000\002" +
    "\044\011\000\002\044\007\000\002\017\004\000\002\021" +
    "\003\000\002\021\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\005\000" +
    "\002\020\004\000\002\020\004\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\032\002\uffff\003\026\007\021\010\022\011" +
    "\030\012\020\013\025\014\032\015\017\016\035\021\027" +
    "\063\004\001\002\000\020\005\uffb8\033\043\051\uffb8\052" +
    "\uffb8\065\u0177\066\u0172\067\uffb8\001\002\000\034\002\ufff6" +
    "\003\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\021\ufff6\060\ufff6\063\ufff6\001\002" +
    "\000\034\002\uffef\003\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\021\uffef\060\uffef" +
    "\063\uffef\001\002\000\004\002\ufffe\001\002\000\034\002" +
    "\ufff5\003\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\021\ufff5\060\ufff5\063\ufff5\001" +
    "\002\000\034\002\ufffd\003\026\007\021\010\022\011\030" +
    "\012\020\013\025\014\032\015\017\016\035\021\027\060" +
    "\u0170\063\004\001\002\000\034\002\ufff3\003\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\021\ufff3\060\ufff3\063\ufff3\001\002\000\034\002\ufff4" +
    "\003\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\021\ufff4\060\ufff4\063\ufff4\001\002" +
    "\000\034\002\ufff7\003\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\021\ufff7\060\ufff7" +
    "\063\ufff7\001\002\000\034\002\ufff1\003\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\021\ufff1\060\ufff1\063\ufff1\001\002\000\004\002\u016d\001" +
    "\002\000\102\003\u0161\022\121\023\062\025\120\026\142" +
    "\027\135\030\076\031\071\032\063\033\043\034\137\035" +
    "\107\036\075\037\070\040\105\041\122\042\067\043\101" +
    "\044\141\045\131\046\106\047\117\050\123\052\124\053" +
    "\077\054\100\055\104\056\136\063\125\065\073\067\127" +
    "\071\066\001\002\000\010\017\041\020\042\033\043\001" +
    "\002\000\004\033\u0151\001\002\000\010\017\041\020\042" +
    "\033\043\001\002\000\034\002\uffee\003\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\021\uffee\060\uffee\063\uffee\001\002\000\034\002\ufff8\003" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\021\ufff8\060\ufff8\063\ufff8\001\002\000" +
    "\004\033\043\001\002\000\004\060\u011c\001\002\000\004" +
    "\033\u0116\001\002\000\010\017\041\020\042\033\043\001" +
    "\002\000\034\002\ufff0\003\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\060" +
    "\ufff0\063\ufff0\001\002\000\102\003\376\022\121\023\062" +
    "\025\120\026\142\027\135\030\076\031\071\032\063\033" +
    "\043\034\137\035\107\036\075\037\070\040\105\041\122" +
    "\042\067\043\101\044\141\045\131\046\106\047\117\050" +
    "\123\052\124\053\077\054\100\055\104\056\136\063\125" +
    "\065\073\067\127\071\066\001\002\000\004\002\000\001" +
    "\002\000\034\002\ufff2\003\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\060" +
    "\ufff2\063\ufff2\001\002\000\010\017\041\020\042\033\043" +
    "\001\002\000\160\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\001\002\000" +
    "\160\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\001\002\000\004\072\256" +
    "\001\002\000\004\043\372\001\002\000\004\043\365\001" +
    "\002\000\162\002\uff94\003\uff94\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\uff94\023\uff94" +
    "\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\057\uff94\060\uff94\062\232\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\001\002" +
    "\000\004\033\060\001\002\000\160\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\054\072" +
    "\053\001\002\000\160\002\uffea\003\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\051\072\050\001\002" +
    "\000\160\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\160\002" +
    "\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\001\002\000\160\002\uffe0\003\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0" +
    "\072\uffe0\001\002\000\160\002\uffe1\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\063\uffe1\064\uffe1" +
    "\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\001" +
    "\002\000\006\071\057\072\056\001\002\000\104\003\uffe7" +
    "\022\uffe7\023\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\063\uffe7\065\uffe7\067\uffe7\071\055\072\uffe7\001" +
    "\002\000\160\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\001\002\000\160" +
    "\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\072\uffe5\001\002\000\160\002\uffe4\003" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071" +
    "\uffe4\072\uffe4\001\002\000\036\002\uff8a\003\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\021\uff8a\060\uff8a\061\061\063\uff8a\001\002\000\102" +
    "\003\115\022\121\023\062\025\120\026\142\027\135\030" +
    "\076\031\071\032\063\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\052\124\053\077\054\100" +
    "\055\104\056\136\063\125\065\073\067\127\071\066\001" +
    "\002\000\012\003\357\017\041\020\042\033\355\001\002" +
    "\000\154\002\uff7e\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007" +
    "\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e" +
    "\071\uff7e\072\uff7e\001\002\000\012\034\137\036\352\053" +
    "\077\065\353\001\002\000\154\002\uff7f\003\uff7f\004\uff7f" +
    "\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\063\uff7f\064\uff7f\065\271\066" +
    "\uff7f\067\uff7f\070\uff7f\071\350\072\uff7f\001\002\000\104" +
    "\003\115\022\121\023\062\025\120\026\142\027\135\030" +
    "\076\031\071\032\063\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\052\124\053\077\054\100" +
    "\055\104\056\136\063\125\065\073\067\127\071\066\072" +
    "\uff3c\001\002\000\102\003\uff73\022\uff73\023\uff73\025\uff73" +
    "\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034" +
    "\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\052" +
    "\uff73\053\uff73\054\uff73\055\uff73\056\uff73\063\uff73\065\uff73" +
    "\067\uff73\071\uff73\001\002\000\102\003\uff76\022\uff76\023" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041" +
    "\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76\063" +
    "\uff76\065\uff76\067\uff76\071\uff76\001\002\000\154\002\uff7d" +
    "\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011" +
    "\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\063\uff7d\064" +
    "\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\001\002\000\102\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\071\066\001\002\000\102\003\115\022\121\023\062" +
    "\025\120\026\142\027\135\030\076\031\071\032\063\033" +
    "\043\034\137\035\107\036\075\037\070\040\105\041\122" +
    "\042\067\043\101\044\141\045\131\046\106\047\117\050" +
    "\123\052\124\053\077\054\100\055\104\056\136\063\125" +
    "\065\324\067\127\071\066\001\002\000\154\002\uff86\003" +
    "\uff86\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\021\uff86\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\001" +
    "\002\000\102\003\115\022\uff77\023\uff77\025\uff77\026\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\043\034\137\035" +
    "\uff77\036\uff77\037\070\040\105\041\122\042\067\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\052\uff77\053" +
    "\077\054\uff77\055\uff77\056\uff77\063\uff77\065\073\067\uff77" +
    "\071\066\001\002\000\154\002\uff7a\003\uff7a\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\021\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056" +
    "\uff7a\057\uff7a\060\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a" +
    "\067\uff7a\070\uff7a\071\uff7a\072\uff7a\001\002\000\102\003" +
    "\115\022\121\023\062\025\120\026\142\027\135\030\076" +
    "\031\071\032\063\033\043\034\137\035\107\036\075\037" +
    "\070\040\105\041\122\042\067\043\101\044\141\045\131" +
    "\046\106\047\117\050\123\052\124\053\077\054\100\055" +
    "\104\056\136\063\125\065\073\067\127\071\066\001\002" +
    "\000\102\003\uff6c\022\uff6c\023\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\055\uff6c\056\uff6c\063\uff6c\065\uff6c\067\uff6c\071" +
    "\uff6c\001\002\000\102\003\uff72\022\uff72\023\uff72\025\uff72" +
    "\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\056\uff72\063\uff72\065\uff72" +
    "\067\uff72\071\uff72\001\002\000\154\002\uff88\003\uff88\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\057\uff88\060\uff88\063\uff88\064\uff88\065\uff88" +
    "\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\001\002\000" +
    "\154\002\uff80\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016" +
    "\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80" +
    "\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\uff80\072\uff80\001\002\000\102\003\uff6b\022\uff6b\023\uff6b" +
    "\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033" +
    "\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\063\uff6b" +
    "\065\uff6b\067\uff6b\071\uff6b\001\002\000\102\003\uff75\022" +
    "\uff75\023\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056" +
    "\uff75\063\uff75\065\uff75\067\uff75\071\uff75\001\002\000\102" +
    "\003\uff6f\022\uff6f\023\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\052\uff6f\053\uff6f\054\uff6f" +
    "\055\uff6f\056\uff6f\063\uff6f\065\uff6f\067\uff6f\071\uff6f\001" +
    "\002\000\102\003\uff78\022\uff78\023\uff78\025\uff78\026\uff78" +
    "\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
    "\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\063\uff78\065\uff78\067\uff78" +
    "\071\uff78\001\002\000\154\002\uff29\003\uff29\004\uff29\005" +
    "\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013\uff29" +
    "\014\uff29\015\uff29\016\uff29\021\uff29\022\uff29\023\uff29\024" +
    "\uff29\025\uff29\026\uff29\027\uff29\030\uff29\031\uff29\032\uff29" +
    "\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\040\uff29\041" +
    "\uff29\042\uff29\043\uff29\044\uff29\045\uff29\046\uff29\047\uff29" +
    "\050\uff29\051\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056" +
    "\uff29\057\uff29\060\uff29\063\uff29\064\uff29\065\uff29\066\uff29" +
    "\067\uff29\070\uff29\071\uff29\072\uff29\001\002\000\074\002" +
    "\uff89\003\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\021\uff89\035\153\036\144\037" +
    "\147\040\155\041\150\042\157\043\160\044\156\045\164" +
    "\046\162\047\146\050\152\054\145\055\163\056\151\060" +
    "\uff89\063\uff89\071\161\001\002\000\154\002\uff58\003\uff58" +
    "\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58\011\uff58\012" +
    "\uff58\013\uff58\014\uff58\015\uff58\016\uff58\021\uff58\022\uff58" +
    "\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58\030\uff58\031" +
    "\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58" +
    "\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045\uff58\046" +
    "\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58\054\uff58" +
    "\055\uff58\056\uff58\057\uff58\060\uff58\063\uff58\064\uff58\065" +
    "\uff58\066\320\067\uff58\070\uff58\071\uff58\072\uff58\001\002" +
    "\000\154\002\uff2b\003\uff2b\004\uff2b\005\uff2b\006\uff2b\007" +
    "\uff2b\010\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015\uff2b" +
    "\016\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026" +
    "\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\034\uff2b" +
    "\035\uff2b\036\uff2b\037\uff2b\040\uff2b\041\uff2b\042\uff2b\043" +
    "\uff2b\044\uff2b\045\uff2b\046\uff2b\047\uff2b\050\uff2b\051\uff2b" +
    "\052\uff2b\053\uff2b\054\uff2b\055\uff2b\056\uff2b\057\uff2b\060" +
    "\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070\uff2b" +
    "\071\uff2b\072\uff2b\001\002\000\154\002\uff82\003\uff82\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\021\uff82\022\uff82\023" +
    "\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\001\002\000" +
    "\040\035\107\036\314\037\070\040\105\041\122\042\067" +
    "\043\101\044\141\045\131\046\106\047\117\050\123\054" +
    "\100\055\104\056\136\001\002\000\154\002\uff84\003\uff84" +
    "\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012" +
    "\uff84\013\uff84\014\uff84\015\uff84\016\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\057\uff84\060\uff84\063\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\001\002" +
    "\000\102\003\uff6e\022\uff6e\023\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e" +
    "\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044" +
    "\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\055\uff6e\056\uff6e\063\uff6e\065\uff6e\067\uff6e\071" +
    "\uff6e\001\002\000\154\002\uff79\003\uff79\004\uff79\005\uff79" +
    "\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014" +
    "\uff79\015\uff79\016\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033" +
    "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79" +
    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\060\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067" +
    "\uff79\070\uff79\071\uff79\072\uff79\001\002\000\012\003\306" +
    "\017\041\020\042\033\305\001\002\000\102\003\uff74\022" +
    "\uff74\023\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056" +
    "\uff74\063\uff74\065\uff74\067\uff74\071\uff74\001\002\000\102" +
    "\003\uff6d\022\uff6d\023\uff6d\025\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d" +
    "\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\046\uff6d\047\uff6d\050\uff6d\052\uff6d\053\uff6d\054\uff6d" +
    "\055\uff6d\056\uff6d\063\uff6d\065\uff6d\067\uff6d\071\uff6d\001" +
    "\002\000\004\033\043\001\002\000\014\003\300\017\041" +
    "\020\042\033\043\067\275\001\002\000\102\003\115\022" +
    "\121\023\062\025\120\026\142\027\135\030\076\031\071" +
    "\032\063\033\043\034\137\035\107\036\075\037\070\040" +
    "\105\041\122\042\067\043\101\044\141\045\131\046\106" +
    "\047\117\050\123\052\124\053\077\054\100\055\104\056" +
    "\136\063\125\065\073\067\127\071\066\001\002\000\110" +
    "\003\115\017\041\020\042\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\070\uff3c\071\066\001\002\000\154\002\uff87\003\uff87" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\021\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\001\002" +
    "\000\102\003\uff70\022\uff70\023\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70" +
    "\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70\043\uff70\044" +
    "\uff70\045\uff70\046\uff70\047\uff70\050\uff70\052\uff70\053\uff70" +
    "\054\uff70\055\uff70\056\uff70\063\uff70\065\uff70\067\uff70\071" +
    "\uff70\001\002\000\154\002\uff83\003\uff83\004\uff83\005\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014" +
    "\uff83\015\uff83\016\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
    "\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033" +
    "\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067" +
    "\uff83\070\uff83\071\uff83\072\uff83\001\002\000\154\002\uff85" +
    "\003\uff85\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\063\uff85\064" +
    "\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85" +
    "\001\002\000\154\002\uff2a\003\uff2a\004\uff2a\005\uff2a\006" +
    "\uff2a\007\uff2a\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a" +
    "\015\uff2a\016\uff2a\021\uff2a\022\uff2a\023\uff2a\024\uff2a\025" +
    "\uff2a\026\uff2a\027\uff2a\030\uff2a\031\uff2a\032\uff2a\033\uff2a" +
    "\034\uff2a\035\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042" +
    "\uff2a\043\uff2a\044\uff2a\045\uff2a\046\uff2a\047\uff2a\050\uff2a" +
    "\051\uff2a\052\uff2a\053\uff2a\054\uff2a\055\uff2a\056\uff2a\057" +
    "\uff2a\060\uff2a\063\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a" +
    "\070\uff2a\071\uff2a\072\uff2a\001\002\000\154\002\uff7b\003" +
    "\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\001" +
    "\002\000\102\003\uff6a\022\uff6a\023\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035" +
    "\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\052\uff6a\053" +
    "\uff6a\054\uff6a\055\uff6a\056\uff6a\063\uff6a\065\uff6a\067\uff6a" +
    "\071\uff6a\001\002\000\102\003\115\022\121\023\062\025" +
    "\120\026\142\027\135\030\076\031\071\032\063\033\043" +
    "\034\137\035\107\036\075\037\070\040\105\041\122\042" +
    "\067\043\101\044\141\045\131\046\106\047\117\050\123" +
    "\052\124\053\077\054\100\055\104\056\136\063\125\065" +
    "\073\067\127\071\066\001\002\000\154\002\uff81\003\uff81" +
    "\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012" +
    "\uff81\013\uff81\014\uff81\015\uff81\016\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\063\uff81\064\uff81\065" +
    "\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\001\002" +
    "\000\102\003\uff71\022\uff71\023\uff71\025\uff71\026\uff71\027" +
    "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\052\uff71\053\uff71" +
    "\054\uff71\055\uff71\056\uff71\063\uff71\065\uff71\067\uff71\071" +
    "\uff71\001\002\000\154\002\uff7c\003\uff7c\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\060\uff7c\063\uff7c\064\uff7c\065\uff7c\066\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\001\002\000\154\002\uff4d" +
    "\003\uff4d\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d\011" +
    "\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\021\uff4d" +
    "\022\uff4d\023\uff4d\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d" +
    "\054\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\063\uff4d\064" +
    "\uff4d\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071\161\072\uff4d" +
    "\001\002\000\154\002\uff77\003\115\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014\uff77" +
    "\015\uff77\016\uff77\021\uff77\022\uff77\023\uff77\024\uff77\025" +
    "\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\043" +
    "\034\137\035\uff77\036\uff77\037\070\040\105\041\122\042" +
    "\067\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\053\077\054\uff77\055\uff77\056\uff77\057" +
    "\uff77\060\uff77\063\uff77\064\uff77\065\073\066\uff77\067\uff77" +
    "\070\uff77\071\066\072\uff77\001\002\000\154\002\uff6c\003" +
    "\115\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\021\uff6c\022" +
    "\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c" +
    "\031\uff6c\032\uff6c\033\043\034\137\035\107\036\075\037" +
    "\070\040\105\041\122\042\067\043\101\044\141\045\131" +
    "\046\106\047\117\050\123\051\uff6c\052\uff6c\053\077\054" +
    "\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\063\uff6c\064\uff6c" +
    "\065\073\066\uff6c\067\uff6c\070\uff6c\071\066\072\uff6c\001" +
    "\002\000\140\002\uff6e\003\115\004\uff6e\005\uff6e\006\uff6e" +
    "\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015" +
    "\uff6e\016\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e" +
    "\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\043\034" +
    "\137\035\107\036\075\037\070\040\105\041\122\042\067" +
    "\051\uff6e\052\uff6e\053\077\054\uff6e\055\uff6e\056\uff6e\057" +
    "\uff6e\060\uff6e\063\uff6e\064\uff6e\065\073\066\uff6e\067\uff6e" +
    "\070\uff6e\071\066\072\uff6e\001\002\000\154\002\uff76\003" +
    "\115\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76" +
    "\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76\021\uff76\022" +
    "\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\030\uff76" +
    "\031\uff76\032\uff76\033\043\034\137\035\uff76\036\uff76\037" +
    "\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76" +
    "\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\077\054" +
    "\uff76\055\uff76\056\uff76\057\uff76\060\uff76\063\uff76\064\uff76" +
    "\065\073\066\uff76\067\uff76\070\uff76\071\066\072\uff76\001" +
    "\002\000\154\002\uff74\003\115\004\uff74\005\uff74\006\uff74" +
    "\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015" +
    "\uff74\016\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74" +
    "\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033\043\034" +
    "\137\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74" +
    "\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\077\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\063\uff74\064\uff74\065\073\066\uff74\067\uff74\070" +
    "\uff74\071\066\072\uff74\001\002\000\154\002\uff6a\003\115" +
    "\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\021\uff6a\022\uff6a" +
    "\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031" +
    "\uff6a\032\uff6a\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\051\uff6a\052\uff6a\053\077\054\100" +
    "\055\104\056\uff6a\057\uff6a\060\uff6a\063\uff6a\064\uff6a\065" +
    "\073\066\uff6a\067\uff6a\070\uff6a\071\066\072\uff6a\001\002" +
    "\000\140\002\uff6d\003\115\004\uff6d\005\uff6d\006\uff6d\007" +
    "\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015\uff6d" +
    "\016\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026" +
    "\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\051" +
    "\uff6d\052\uff6d\053\077\054\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\060\uff6d\063\uff6d\064\uff6d\065\073\066\uff6d\067\uff6d\070" +
    "\uff6d\071\066\072\uff6d\001\002\000\154\002\uff78\003\115" +
    "\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012" +
    "\uff78\013\uff78\014\uff78\015\uff78\016\uff78\021\uff78\022\uff78" +
    "\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\043\034\137\035\uff78\036\uff78\037\070" +
    "\040\105\041\122\042\067\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\077\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\060\uff78\063\uff78\064\uff78\065" +
    "\073\066\uff78\067\uff78\070\uff78\071\066\072\uff78\001\002" +
    "\000\154\002\uff53\003\176\004\uff53\005\uff53\006\uff53\007" +
    "\uff53\010\uff53\011\uff53\012\uff53\013\uff53\014\uff53\015\uff53" +
    "\016\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026" +
    "\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53" +
    "\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043" +
    "\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057\uff53\060" +
    "\uff53\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53" +
    "\071\uff53\072\uff53\001\002\000\154\002\uff75\003\115\004" +
    "\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75" +
    "\013\uff75\014\uff75\015\uff75\016\uff75\021\uff75\022\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\043\034\137\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\051\uff75\052\uff75\053\077\054\uff75\055" +
    "\uff75\056\uff75\057\uff75\060\uff75\063\uff75\064\uff75\065\073" +
    "\066\uff75\067\uff75\070\uff75\071\066\072\uff75\001\002\000" +
    "\140\002\uff71\003\115\004\uff71\005\uff71\006\uff71\007\uff71" +
    "\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\033\043\034\137\035" +
    "\107\036\075\037\070\040\105\041\122\042\067\051\uff71" +
    "\052\uff71\053\077\054\uff71\055\uff71\056\uff71\057\uff71\060" +
    "\uff71\063\uff71\064\uff71\065\073\066\uff71\067\uff71\070\uff71" +
    "\071\066\072\uff71\001\002\000\154\002\uff73\003\115\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73" +
    "\013\uff73\014\uff73\015\uff73\016\uff73\021\uff73\022\uff73\023" +
    "\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73" +
    "\032\uff73\033\043\034\137\035\uff73\036\uff73\037\uff73\040" +
    "\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\052\uff73\053\077\054\uff73\055" +
    "\uff73\056\uff73\057\uff73\060\uff73\063\uff73\064\uff73\065\073" +
    "\066\uff73\067\uff73\070\uff73\071\066\072\uff73\001\002\000" +
    "\140\002\uff72\003\115\004\uff72\005\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72\016" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\033\043\034\137\035" +
    "\107\036\075\037\070\040\105\041\122\042\067\051\uff72" +
    "\052\uff72\053\077\054\uff72\055\uff72\056\uff72\057\uff72\060" +
    "\uff72\063\uff72\064\uff72\065\073\066\uff72\067\uff72\070\uff72" +
    "\071\066\072\uff72\001\002\000\102\003\115\022\121\023" +
    "\062\025\120\026\142\027\135\030\076\031\071\032\063" +
    "\033\043\034\137\035\107\036\075\037\070\040\105\041" +
    "\122\042\067\043\101\044\141\045\131\046\106\047\117" +
    "\050\123\052\124\053\077\054\100\055\104\056\136\063" +
    "\125\065\073\067\127\071\066\001\002\000\140\002\uff6f" +
    "\003\115\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\021\uff6f" +
    "\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\051\uff6f\052\uff6f\053" +
    "\077\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\063\uff6f" +
    "\064\uff6f\065\073\066\uff6f\067\uff6f\070\uff6f\071\066\072" +
    "\uff6f\001\002\000\154\002\uff6b\003\115\004\uff6b\005\uff6b" +
    "\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014" +
    "\uff6b\015\uff6b\016\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b" +
    "\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033" +
    "\043\034\137\035\107\036\075\037\070\040\105\041\122" +
    "\042\067\043\101\044\141\045\131\046\106\047\117\050" +
    "\123\051\uff6b\052\uff6b\053\077\054\uff6b\055\uff6b\056\uff6b" +
    "\057\uff6b\060\uff6b\063\uff6b\064\uff6b\065\073\066\uff6b\067" +
    "\uff6b\070\uff6b\071\066\072\uff6b\001\002\000\140\002\uff70" +
    "\003\115\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\011" +
    "\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70\021\uff70" +
    "\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030" +
    "\uff70\031\uff70\032\uff70\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\051\uff70\052\uff70\053" +
    "\077\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70\063\uff70" +
    "\064\uff70\065\073\066\uff70\067\uff70\070\uff70\071\066\072" +
    "\uff70\001\002\000\140\002\uff61\003\uff61\004\uff61\005\uff61" +
    "\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\016\uff61\021\uff61\022\uff61\023\uff61\024\uff61" +
    "\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61\033" +
    "\uff61\034\uff61\035\153\036\144\037\147\040\155\041\150" +
    "\042\157\051\uff61\052\uff61\053\uff61\054\uff61\055\uff61\056" +
    "\uff61\057\uff61\060\uff61\063\uff61\064\uff61\065\uff61\066\uff61" +
    "\067\uff61\070\uff61\071\161\072\uff61\001\002\000\154\002" +
    "\uff5c\003\uff5c\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c" +
    "\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\021" +
    "\uff5c\022\uff5c\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c" +
    "\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\153\036" +
    "\144\037\147\040\155\041\150\042\157\043\160\044\156" +
    "\045\164\046\162\047\146\050\152\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\063\uff5c" +
    "\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\161\072" +
    "\uff5c\001\002\000\140\002\uff60\003\uff60\004\uff60\005\uff60" +
    "\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014" +
    "\uff60\015\uff60\016\uff60\021\uff60\022\uff60\023\uff60\024\uff60" +
    "\025\uff60\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033" +
    "\uff60\034\uff60\035\153\036\144\037\147\040\155\041\150" +
    "\042\157\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056" +
    "\uff60\057\uff60\060\uff60\063\uff60\064\uff60\065\uff60\066\uff60" +
    "\067\uff60\070\uff60\071\161\072\uff60\001\002\000\044\035" +
    "\153\036\144\037\147\040\155\041\150\042\157\043\160" +
    "\044\156\045\164\046\162\047\146\050\152\054\145\055" +
    "\163\056\151\071\161\072\171\001\002\000\154\002\uff5a" +
    "\003\uff5a\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\011" +
    "\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\021\uff5a" +
    "\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030" +
    "\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a" +
    "\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\063\uff5a\064" +
    "\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a" +
    "\001\002\000\140\002\uff63\003\uff63\004\uff63\005\uff63\006" +
    "\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014\uff63" +
    "\015\uff63\016\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025" +
    "\uff63\026\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63" +
    "\034\uff63\035\153\036\144\037\147\040\155\041\150\042" +
    "\157\051\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63" +
    "\057\uff63\060\uff63\063\uff63\064\uff63\065\uff63\066\uff63\067" +
    "\uff63\070\uff63\071\161\072\uff63\001\002\000\154\002\uff64" +
    "\003\uff64\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011" +
    "\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\021\uff64" +
    "\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64" +
    "\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64" +
    "\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\063\uff64\064" +
    "\uff64\065\uff64\066\uff64\067\uff64\070\uff64\071\161\072\uff64" +
    "\001\002\000\140\002\uff62\003\uff62\004\uff62\005\uff62\006" +
    "\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62" +
    "\015\uff62\016\uff62\021\uff62\022\uff62\023\uff62\024\uff62\025" +
    "\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62\033\uff62" +
    "\034\uff62\035\153\036\144\037\147\040\155\041\150\042" +
    "\157\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056\uff62" +
    "\057\uff62\060\uff62\063\uff62\064\uff62\065\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\161\072\uff62\001\002\000\154\002\uff66" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\021\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66" +
    "\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\063\uff66\064" +
    "\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071\161\072\uff66" +
    "\001\002\000\154\002\uff52\003\uff52\004\uff52\005\uff52\006" +
    "\uff52\007\uff52\010\uff52\011\uff52\012\uff52\013\uff52\014\uff52" +
    "\015\uff52\016\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025" +
    "\uff52\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52" +
    "\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042" +
    "\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52" +
    "\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057" +
    "\uff52\060\uff52\063\uff52\064\uff52\065\uff52\066\uff52\067\uff52" +
    "\070\uff52\071\uff52\072\uff52\001\002\000\154\002\uff69\003" +
    "\uff69\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69" +
    "\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69\021\uff69\022" +
    "\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69" +
    "\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037" +
    "\147\040\155\041\150\042\157\043\uff69\044\uff69\045\uff69" +
    "\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054" +
    "\uff69\055\uff69\056\uff69\057\uff69\060\uff69\063\uff69\064\uff69" +
    "\065\uff69\066\uff69\067\uff69\070\uff69\071\161\072\uff69\001" +
    "\002\000\140\002\uff5e\003\uff5e\004\uff5e\005\uff5e\006\uff5e" +
    "\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015" +
    "\uff5e\016\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e" +
    "\026\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034" +
    "\uff5e\035\153\036\144\037\147\040\155\041\150\042\157" +
    "\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057" +
    "\uff5e\060\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e\067\uff5e" +
    "\070\uff5e\071\161\072\uff5e\001\002\000\154\002\uff5b\003" +
    "\uff5b\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b\011\uff5b" +
    "\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016\uff5b\021\uff5b\022" +
    "\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b" +
    "\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\153\036\144\037" +
    "\147\040\155\041\150\042\157\043\160\044\156\045\164" +
    "\046\162\047\146\050\152\051\uff5b\052\uff5b\053\uff5b\054" +
    "\145\055\163\056\uff5b\057\uff5b\060\uff5b\063\uff5b\064\uff5b" +
    "\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\161\072\uff5b\001" +
    "\002\000\154\002\uff65\003\uff65\004\uff65\005\uff65\006\uff65" +
    "\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015" +
    "\uff65\016\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\uff65" +
    "\060\uff65\063\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070" +
    "\uff65\071\161\072\uff65\001\002\000\154\002\uff67\003\uff67" +
    "\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012" +
    "\uff67\013\uff67\014\uff67\015\uff67\016\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031" +
    "\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\037\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\055\uff67\056\uff67\057\uff67\060\uff67\063\uff67\064\uff67\065" +
    "\uff67\066\uff67\067\uff67\070\uff67\071\161\072\uff67\001\002" +
    "\000\140\002\uff5f\003\uff5f\004\uff5f\005\uff5f\006\uff5f\007" +
    "\uff5f\010\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f" +
    "\016\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\026" +
    "\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\153\036\144\037\147\040\155\041\150\042\157\051" +
    "\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f" +
    "\060\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\070" +
    "\uff5f\071\161\072\uff5f\001\002\000\154\002\uff5d\003\uff5d" +
    "\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\021\uff5d\022\uff5d" +
    "\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027\uff5d\030\uff5d\031" +
    "\uff5d\032\uff5d\033\uff5d\034\uff5d\035\153\036\144\037\147" +
    "\040\155\041\150\042\157\043\160\044\156\045\164\046" +
    "\162\047\146\050\152\051\uff5d\052\uff5d\053\uff5d\054\uff5d" +
    "\055\uff5d\056\uff5d\057\uff5d\060\uff5d\063\uff5d\064\uff5d\065" +
    "\uff5d\066\uff5d\067\uff5d\070\uff5d\071\161\072\uff5d\001\002" +
    "\000\154\002\uff68\003\uff68\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026" +
    "\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034\uff68" +
    "\035\uff68\036\uff68\037\147\040\155\041\150\042\157\043" +
    "\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68" +
    "\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060" +
    "\uff68\063\uff68\064\uff68\065\uff68\066\uff68\067\uff68\070\uff68" +
    "\071\161\072\uff68\001\002\000\060\024\uff7f\033\uffec\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\054\uff7f\055" +
    "\uff7f\056\uff7f\057\uff7f\064\uff7f\065\271\070\uff7f\071\054" +
    "\072\053\001\002\000\004\070\270\001\002\000\052\024" +
    "\uff3a\035\153\036\144\037\147\040\155\041\150\042\157" +
    "\043\160\044\156\045\164\046\162\047\146\050\152\054" +
    "\145\055\163\056\151\057\261\064\260\070\uff3a\071\161" +
    "\001\002\000\104\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\071\066\072\256\001\002\000\004\070\254\001\002" +
    "\000\006\024\223\070\uff3d\001\002\000\004\033\216\001" +
    "\002\000\006\061\217\070\220\001\002\000\102\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\063\125\065\073\067\127\071\066\001\002\000" +
    "\154\002\uff26\003\uff26\004\uff26\005\uff26\006\uff26\007\uff26" +
    "\010\uff26\011\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016" +
    "\uff26\021\uff26\022\uff26\023\uff26\024\uff26\025\uff26\026\uff26" +
    "\027\uff26\030\uff26\031\uff26\032\uff26\033\uff26\034\uff26\035" +
    "\uff26\036\uff26\037\uff26\040\uff26\041\uff26\042\uff26\043\uff26" +
    "\044\uff26\045\uff26\046\uff26\047\uff26\050\uff26\051\uff26\052" +
    "\uff26\053\uff26\054\uff26\055\uff26\056\uff26\057\uff26\060\uff26" +
    "\063\uff26\064\uff26\065\uff26\066\uff26\067\uff26\070\uff26\071" +
    "\uff26\072\uff26\001\002\000\044\035\153\036\144\037\147" +
    "\040\155\041\150\042\157\043\160\044\156\045\164\046" +
    "\162\047\146\050\152\054\145\055\163\056\151\070\222" +
    "\071\161\001\002\000\154\002\uff27\003\uff27\004\uff27\005" +
    "\uff27\006\uff27\007\uff27\010\uff27\011\uff27\012\uff27\013\uff27" +
    "\014\uff27\015\uff27\016\uff27\021\uff27\022\uff27\023\uff27\024" +
    "\uff27\025\uff27\026\uff27\027\uff27\030\uff27\031\uff27\032\uff27" +
    "\033\uff27\034\uff27\035\uff27\036\uff27\037\uff27\040\uff27\041" +
    "\uff27\042\uff27\043\uff27\044\uff27\045\uff27\046\uff27\047\uff27" +
    "\050\uff27\051\uff27\052\uff27\053\uff27\054\uff27\055\uff27\056" +
    "\uff27\057\uff27\060\uff27\063\uff27\064\uff27\065\uff27\066\uff27" +
    "\067\uff27\070\uff27\071\uff27\072\uff27\001\002\000\010\017" +
    "\041\020\042\033\043\001\002\000\006\061\250\070\251" +
    "\001\002\000\012\017\041\020\042\033\235\057\236\001" +
    "\002\000\010\017\041\020\042\033\227\001\002\000\020" +
    "\017\uff94\020\uff94\033\uff94\057\231\062\232\071\uff94\072" +
    "\uff94\001\002\000\010\017\uffd3\020\uffd3\033\uffd3\001\002" +
    "\000\010\017\041\020\042\033\043\001\002\000\004\033" +
    "\043\001\002\000\160\002\uff93\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\057\uff93\060\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\001\002" +
    "\000\012\061\uffcc\065\uffcc\066\uffcc\070\uffcc\001\002\000" +
    "\030\017\uff94\020\uff94\033\uff94\057\243\061\uffd1\062\232" +
    "\065\uffd1\066\uffd1\070\uffd1\071\uff94\072\uff94\001\002\000" +
    "\010\017\041\020\042\033\043\001\002\000\010\017\uffd4" +
    "\020\uffd4\033\uffd4\001\002\000\012\061\uffcd\065\uffcd\066" +
    "\uffcd\070\uffcd\001\002\000\012\061\uffce\065\uffce\066\uffce" +
    "\070\uffce\001\002\000\012\017\041\020\042\033\043\057" +
    "\247\001\002\000\022\017\041\020\042\033\043\057\245" +
    "\061\uffd0\065\uffd0\066\uffd0\070\uffd0\001\002\000\012\061" +
    "\uffd2\065\uffd2\066\uffd2\070\uffd2\001\002\000\012\017\uffd6" +
    "\020\uffd6\033\uffd6\057\uffd6\001\002\000\012\061\uffcf\065" +
    "\uffcf\066\uffcf\070\uffcf\001\002\000\012\017\uffd5\020\uffd5" +
    "\033\uffd5\057\uffd5\001\002\000\102\003\115\022\121\023" +
    "\062\025\120\026\142\027\135\030\076\031\071\032\063" +
    "\033\043\034\137\035\107\036\075\037\070\040\105\041" +
    "\122\042\067\043\101\044\141\045\131\046\106\047\117" +
    "\050\123\052\124\053\077\054\100\055\104\056\136\063" +
    "\125\065\073\067\127\071\066\001\002\000\154\002\uff24" +
    "\003\uff24\004\uff24\005\uff24\006\uff24\007\uff24\010\uff24\011" +
    "\uff24\012\uff24\013\uff24\014\uff24\015\uff24\016\uff24\021\uff24" +
    "\022\uff24\023\uff24\024\uff24\025\uff24\026\uff24\027\uff24\030" +
    "\uff24\031\uff24\032\uff24\033\uff24\034\uff24\035\uff24\036\uff24" +
    "\037\uff24\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045" +
    "\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053\uff24" +
    "\054\uff24\055\uff24\056\uff24\057\uff24\060\uff24\063\uff24\064" +
    "\uff24\065\uff24\066\uff24\067\uff24\070\uff24\071\uff24\072\uff24" +
    "\001\002\000\044\035\153\036\144\037\147\040\155\041" +
    "\150\042\157\043\160\044\156\045\164\046\162\047\146" +
    "\050\152\054\145\055\163\056\151\070\253\071\161\001" +
    "\002\000\154\002\uff25\003\uff25\004\uff25\005\uff25\006\uff25" +
    "\007\uff25\010\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015" +
    "\uff25\016\uff25\021\uff25\022\uff25\023\uff25\024\uff25\025\uff25" +
    "\026\uff25\027\uff25\030\uff25\031\uff25\032\uff25\033\uff25\034" +
    "\uff25\035\uff25\036\uff25\037\uff25\040\uff25\041\uff25\042\uff25" +
    "\043\uff25\044\uff25\045\uff25\046\uff25\047\uff25\050\uff25\051" +
    "\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056\uff25\057\uff25" +
    "\060\uff25\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070" +
    "\uff25\071\uff25\072\uff25\001\002\000\154\002\uff28\003\uff28" +
    "\004\uff28\005\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012" +
    "\uff28\013\uff28\014\uff28\015\uff28\016\uff28\021\uff28\022\uff28" +
    "\023\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031" +
    "\uff28\032\uff28\033\uff28\034\uff28\035\uff28\036\uff28\037\uff28" +
    "\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045\uff28\046" +
    "\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28\054\uff28" +
    "\055\uff28\056\uff28\057\uff28\060\uff28\063\uff28\064\uff28\065" +
    "\uff28\066\uff28\067\uff28\070\uff28\071\uff28\072\uff28\001\002" +
    "\000\044\035\153\036\144\037\147\040\155\041\150\042" +
    "\157\043\160\044\156\045\164\046\162\047\146\050\152" +
    "\054\145\055\163\056\151\071\161\072\257\001\002\000" +
    "\160\002\uffe3\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\001\002\000\154\002\uff59" +
    "\003\uff59\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011" +
    "\uff59\012\uff59\013\uff59\014\uff59\015\uff59\016\uff59\021\uff59" +
    "\022\uff59\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030" +
    "\uff59\031\uff59\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59" +
    "\037\uff59\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045" +
    "\uff59\046\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59" +
    "\054\uff59\055\uff59\056\uff59\057\uff59\060\uff59\063\uff59\064" +
    "\uff59\065\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59" +
    "\001\002\000\102\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\071\066\001\002\000\102\003\115\022\121\023\062" +
    "\025\120\026\142\027\135\030\076\031\071\032\063\033" +
    "\043\034\137\035\107\036\075\037\070\040\105\041\122" +
    "\042\067\043\101\044\141\045\131\046\106\047\117\050" +
    "\123\052\124\053\077\054\100\055\104\056\136\063\125" +
    "\065\073\067\127\071\066\001\002\000\116\003\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a" +
    "\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\153\036\144\037" +
    "\147\040\155\041\150\042\157\043\160\044\156\045\164" +
    "\046\162\047\146\050\152\052\uff3a\053\uff3a\054\145\055" +
    "\163\056\151\057\261\060\uff3a\063\uff3a\065\uff3a\066\uff3a" +
    "\067\uff3a\070\uff3a\071\161\072\uff3a\001\002\000\114\003" +
    "\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b" +
    "\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036" +
    "\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b" +
    "\045\uff3b\046\uff3b\047\uff3b\050\uff3b\052\uff3b\053\uff3b\054" +
    "\uff3b\055\uff3b\056\uff3b\060\uff3b\063\uff3b\065\uff3b\066\uff3b" +
    "\067\uff3b\070\uff3b\071\uff3b\072\uff3b\001\002\000\046\035" +
    "\153\036\144\037\147\040\155\041\150\042\157\043\160" +
    "\044\156\045\164\046\162\047\146\050\152\054\145\055" +
    "\163\056\151\057\265\070\uff2f\071\161\001\002\000\102" +
    "\003\115\022\121\023\062\025\120\026\142\027\135\030" +
    "\076\031\071\032\063\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\052\124\053\077\054\100" +
    "\055\104\056\136\063\125\065\073\067\127\071\066\001" +
    "\002\000\004\070\uff30\001\002\000\044\035\153\036\144" +
    "\037\147\040\155\041\150\042\157\043\160\044\156\045" +
    "\164\046\162\047\146\050\152\054\145\055\163\056\151" +
    "\064\260\071\161\001\002\000\154\002\uff31\003\uff31\004" +
    "\uff31\005\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31" +
    "\013\uff31\014\uff31\015\uff31\016\uff31\021\uff31\022\uff31\023" +
    "\uff31\024\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040" +
    "\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31" +
    "\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\063\uff31\064\uff31\065\uff31" +
    "\066\uff31\067\uff31\070\uff31\071\uff31\072\uff31\001\002\000" +
    "\104\003\115\022\121\023\062\025\120\026\142\027\135" +
    "\030\076\031\071\032\063\033\043\034\137\035\107\036" +
    "\075\037\070\040\105\041\122\042\067\043\101\044\141" +
    "\045\131\046\106\047\117\050\123\052\124\053\077\054" +
    "\100\055\104\056\136\063\125\065\073\066\uff3c\067\127" +
    "\071\066\001\002\000\004\066\274\001\002\000\006\066" +
    "\uff3d\070\uff3d\001\002\000\154\002\uff3f\003\uff3f\004\uff3f" +
    "\005\uff3f\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012\uff3f\013" +
    "\uff3f\014\uff3f\015\uff3f\016\uff3f\021\uff3f\022\uff3f\023\uff3f" +
    "\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032" +
    "\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f" +
    "\041\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f" +
    "\056\uff3f\057\uff3f\060\uff3f\063\uff3f\064\uff3f\065\uff3f\066" +
    "\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\001\002\000\110" +
    "\003\115\017\041\020\042\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\070\uff3c\071\066\001\002\000\154\002\uff2e\003\uff2e" +
    "\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010\uff2e\011\uff2e\012" +
    "\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\021\uff2e\022\uff2e" +
    "\023\uff2e\024\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e\031" +
    "\uff2e\032\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e" +
    "\040\uff2e\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046" +
    "\uff2e\047\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e" +
    "\055\uff2e\056\uff2e\057\uff2e\060\uff2e\063\uff2e\064\uff2e\065" +
    "\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072\uff2e\001\002" +
    "\000\154\002\uff2d\003\uff2d\004\uff2d\005\uff2d\006\uff2d\007" +
    "\uff2d\010\uff2d\011\uff2d\012\uff2d\013\uff2d\014\uff2d\015\uff2d" +
    "\016\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\025\uff2d\026" +
    "\uff2d\027\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d" +
    "\035\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\042\uff2d\043" +
    "\uff2d\044\uff2d\045\uff2d\046\uff2d\047\uff2d\050\uff2d\051\uff2d" +
    "\052\uff2d\053\uff2d\054\uff2d\055\uff2d\056\uff2d\057\uff2d\060" +
    "\uff2d\063\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\070\uff2d" +
    "\071\uff2d\072\uff2d\001\002\000\154\002\uff2c\003\uff2c\004" +
    "\uff2c\005\uff2c\006\uff2c\007\uff2c\010\uff2c\011\uff2c\012\uff2c" +
    "\013\uff2c\014\uff2c\015\uff2c\016\uff2c\021\uff2c\022\uff2c\023" +
    "\uff2c\024\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031\uff2c" +
    "\032\uff2c\033\uff2c\034\uff2c\035\uff2c\036\uff2c\037\uff2c\040" +
    "\uff2c\041\uff2c\042\uff2c\043\uff2c\044\uff2c\045\uff2c\046\uff2c" +
    "\047\uff2c\050\uff2c\051\uff2c\052\uff2c\053\uff2c\054\uff2c\055" +
    "\uff2c\056\uff2c\057\uff2c\060\uff2c\063\uff2c\064\uff2c\065\uff2c" +
    "\066\uff2c\067\uff2c\070\uff2c\071\uff2c\072\uff2c\001\002\000" +
    "\004\065\302\001\002\000\104\003\115\022\121\023\062" +
    "\025\120\026\142\027\135\030\076\031\071\032\063\033" +
    "\043\034\137\035\107\036\075\037\070\040\105\041\122" +
    "\042\067\043\101\044\141\045\131\046\106\047\117\050" +
    "\123\052\124\053\077\054\100\055\104\056\136\063\125" +
    "\065\073\066\uff3c\067\127\071\066\001\002\000\004\066" +
    "\304\001\002\000\154\002\uff3e\003\uff3e\004\uff3e\005\uff3e" +
    "\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014" +
    "\uff3e\015\uff3e\016\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e" +
    "\025\uff3e\026\uff3e\027\uff3e\030\uff3e\031\uff3e\032\uff3e\033" +
    "\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e" +
    "\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050" +
    "\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067" +
    "\uff3e\070\uff3e\071\uff3e\072\uff3e\001\002\000\106\003\115" +
    "\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046" +
    "\uff94\047\uff94\050\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\056\uff94\062\232\063\uff94\065\073\067\uff94\071\066\072" +
    "\uff94\001\002\000\154\002\uff46\003\uff46\004\uff46\005\uff46" +
    "\006\uff46\007\uff46\010\uff46\011\uff46\012\uff46\013\uff46\014" +
    "\uff46\015\uff46\016\uff46\021\uff46\022\uff46\023\uff46\024\uff46" +
    "\025\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46\033" +
    "\uff46\034\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46" +
    "\042\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050" +
    "\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46" +
    "\057\uff46\060\uff46\063\uff46\064\uff46\065\uff46\066\uff46\067" +
    "\uff46\070\uff46\071\uff46\072\uff46\001\002\000\102\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\310\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\063\125\065\073\067\127\071\066\001\002\000" +
    "\156\002\uff94\003\313\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016" +
    "\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94" +
    "\062\232\063\uff94\064\uff94\065\073\066\uff94\067\uff94\070" +
    "\uff94\071\066\072\uff94\001\002\000\154\002\uff42\003\uff42" +
    "\004\uff42\005\uff42\006\uff42\007\uff42\010\uff42\011\uff42\012" +
    "\uff42\013\uff42\014\uff42\015\uff42\016\uff42\021\uff42\022\uff42" +
    "\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030\uff42\031" +
    "\uff42\032\uff42\033\uff42\034\uff42\035\153\036\144\037\147" +
    "\040\155\041\150\042\157\043\160\044\156\045\164\046" +
    "\162\047\146\050\152\051\uff42\052\uff42\053\uff42\054\145" +
    "\055\163\056\151\057\uff42\060\uff42\063\uff42\064\uff42\065" +
    "\uff42\066\uff42\067\uff42\070\uff42\071\161\072\uff42\001\002" +
    "\000\154\002\uff48\003\uff48\004\uff48\005\uff48\006\uff48\007" +
    "\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014\uff48\015\uff48" +
    "\016\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\026" +
    "\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48\034\uff48" +
    "\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48\043" +
    "\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050\uff48\051\uff48" +
    "\052\uff48\053\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060" +
    "\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067\uff48\070\uff48" +
    "\071\161\072\uff48\001\002\000\154\002\uff40\003\uff40\004" +
    "\uff40\005\uff40\006\uff40\007\uff40\010\uff40\011\uff40\012\uff40" +
    "\013\uff40\014\uff40\015\uff40\016\uff40\021\uff40\022\uff40\023" +
    "\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40" +
    "\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040" +
    "\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046\uff40" +
    "\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\054\uff40\055" +
    "\uff40\056\uff40\057\uff40\060\uff40\063\uff40\064\uff40\065\uff40" +
    "\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40\001\002\000" +
    "\102\003\uff77\022\uff77\023\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\063\uff77\065\uff77\067\uff77\071\uff77" +
    "\001\002\000\102\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\071\066\001\002\000\154\002\uff50\003\uff50\004\uff50" +
    "\005\uff50\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013" +
    "\uff50\014\uff50\015\uff50\016\uff50\021\uff50\022\uff50\023\uff50" +
    "\024\uff50\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032" +
    "\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50" +
    "\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047" +
    "\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50" +
    "\056\uff50\057\uff50\060\uff50\063\uff50\064\uff50\065\uff50\066" +
    "\uff50\067\uff50\070\uff50\071\uff50\072\uff50\001\002\000\154" +
    "\002\uff41\003\uff41\004\uff41\005\uff41\006\uff41\007\uff41\010" +
    "\uff41\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41" +
    "\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41\026\uff41\027" +
    "\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41" +
    "\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044" +
    "\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41" +
    "\053\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060\uff41\063" +
    "\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\161" +
    "\072\uff41\001\002\000\154\002\uff54\003\321\004\uff54\005" +
    "\uff54\006\uff54\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54" +
    "\014\uff54\015\uff54\016\uff54\021\uff54\022\uff54\023\uff54\024" +
    "\uff54\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54" +
    "\033\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041" +
    "\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54" +
    "\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54\056" +
    "\uff54\057\uff54\060\uff54\063\uff54\064\uff54\065\uff54\066\uff54" +
    "\067\uff54\070\uff54\071\uff54\072\uff54\001\002\000\154\002" +
    "\uff55\003\uff55\004\uff55\005\uff55\006\uff55\007\uff55\010\uff55" +
    "\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55\021" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55" +
    "\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036" +
    "\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55\044\uff55" +
    "\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053" +
    "\uff55\054\uff55\055\uff55\056\uff55\057\uff55\060\uff55\063\uff55" +
    "\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072" +
    "\uff55\001\002\000\154\002\uff4e\003\uff4e\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e" +
    "\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033" +
    "\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e" +
    "\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046\uff4e\047\uff4e\050" +
    "\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e\055\uff4e\056\uff4e" +
    "\057\uff4e\060\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067" +
    "\uff4e\070\uff4e\071\161\072\uff4e\001\002\000\154\002\uff4f" +
    "\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011" +
    "\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\021\uff4f" +
    "\022\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\030" +
    "\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\037\147\040\155\041\150\042\157\043\uff4f\044\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f" +
    "\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f\063\uff4f\064" +
    "\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\161\072\uff4f" +
    "\001\002\000\102\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\uffc0" +
    "\035\107\036\uffc0\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\uffc0\054\100\055\104\056\136\063\125\065\324\067" +
    "\127\071\066\001\002\000\154\002\uff4a\003\331\004\uff4a" +
    "\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013" +
    "\uff4a\014\uff4a\015\uff4a\016\uff4a\021\uff4a\022\uff4a\023\uff4a" +
    "\024\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032" +
    "\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a" +
    "\041\uff4a\042\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047" +
    "\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a" +
    "\056\uff4a\057\uff4a\060\uff4a\063\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\067\uff4a\070\uff4a\071\161\072\uff4a\001\002\000\154" +
    "\002\uff58\003\327\004\uff58\005\uff58\006\uff58\007\uff58\010" +
    "\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016\uff58" +
    "\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027" +
    "\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58" +
    "\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044" +
    "\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58" +
    "\053\uff58\054\uff58\055\uff58\056\uff58\057\uff58\060\uff58\063" +
    "\uff58\064\uff58\065\uff58\066\320\067\uff58\070\uff58\071\uff58" +
    "\072\uff58\001\002\000\154\002\uff57\003\uff57\004\uff57\005" +
    "\uff57\006\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57" +
    "\014\uff57\015\uff57\016\uff57\021\uff57\022\uff57\023\uff57\024" +
    "\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032\uff57" +
    "\033\uff57\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57\055\uff57\056" +
    "\uff57\057\uff57\060\uff57\063\uff57\064\uff57\065\uff57\066\uff57" +
    "\067\uff57\070\uff57\071\uff57\072\uff57\001\002\000\154\002" +
    "\uff4c\003\uff4c\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c" +
    "\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\021" +
    "\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c" +
    "\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036" +
    "\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c" +
    "\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053" +
    "\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c\060\uff4c\063\uff4c" +
    "\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072" +
    "\uff4c\001\002\000\154\002\uff4b\003\uff4b\004\uff4b\005\uff4b" +
    "\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b\013\uff4b\014" +
    "\uff4b\015\uff4b\016\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b" +
    "\025\uff4b\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b" +
    "\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050" +
    "\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b" +
    "\057\uff4b\060\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067" +
    "\uff4b\070\uff4b\071\uff4b\072\uff4b\001\002\000\154\002\uff51" +
    "\003\uff51\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011" +
    "\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\021\uff51" +
    "\022\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027\uff51\030" +
    "\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\153\036\144" +
    "\037\147\040\155\041\150\042\157\043\160\044\156\045" +
    "\164\046\162\047\146\050\152\051\uff51\052\uff51\053\uff51" +
    "\054\145\055\163\056\151\057\uff51\060\uff51\063\uff51\064" +
    "\uff51\065\uff51\066\uff51\067\uff51\070\uff51\071\161\072\uff51" +
    "\001\002\000\004\072\347\001\002\000\004\072\346\001" +
    "\002\000\106\003\115\022\121\023\062\025\120\026\142" +
    "\027\135\030\076\031\071\032\063\033\043\034\137\035" +
    "\107\036\075\037\070\040\105\041\122\042\067\043\101" +
    "\044\141\045\131\046\106\047\117\050\123\052\124\053" +
    "\077\054\100\055\104\056\136\060\336\063\125\065\073" +
    "\067\127\071\066\072\uff3d\001\002\000\104\003\115\022" +
    "\121\023\062\025\120\026\142\027\135\030\076\031\071" +
    "\032\063\033\043\034\137\035\107\036\075\037\070\040" +
    "\105\041\122\042\067\043\101\044\141\045\131\046\106" +
    "\047\117\050\123\052\124\053\077\054\100\055\104\056" +
    "\136\060\341\063\125\065\073\067\127\071\066\001\002" +
    "\000\004\072\uff33\001\002\000\106\003\115\022\121\023" +
    "\062\025\120\026\142\027\135\030\076\031\071\032\063" +
    "\033\043\034\137\035\107\036\075\037\070\040\105\041" +
    "\122\042\067\043\101\044\141\045\131\046\106\047\117" +
    "\050\123\052\124\053\077\054\100\055\104\056\136\060" +
    "\336\063\125\065\073\067\127\071\066\072\uff32\001\002" +
    "\000\102\003\115\022\121\023\062\025\120\026\142\027" +
    "\135\030\076\031\071\032\063\033\043\034\137\035\107" +
    "\036\075\037\070\040\105\041\122\042\067\043\101\044" +
    "\141\045\131\046\106\047\117\050\123\052\124\053\077" +
    "\054\100\055\104\056\136\063\125\065\073\067\127\071" +
    "\066\001\002\000\004\072\uff37\001\002\000\106\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\060\336\063\125\065\073\067\127\071\066\072" +
    "\uff35\001\002\000\004\072\uff36\001\002\000\106\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\060\336\063\125\065\073\067\127\071\066\072" +
    "\uff34\001\002\000\154\002\uff39\003\uff39\004\uff39\005\uff39" +
    "\006\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014" +
    "\uff39\015\uff39\016\uff39\021\uff39\022\uff39\023\uff39\024\uff39" +
    "\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39\032\uff39\033" +
    "\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040\uff39\041\uff39" +
    "\042\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050" +
    "\uff39\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39" +
    "\057\uff39\060\uff39\063\uff39\064\uff39\065\uff39\066\uff39\067" +
    "\uff39\070\uff39\071\uff39\072\uff39\001\002\000\154\002\uff38" +
    "\003\uff38\004\uff38\005\uff38\006\uff38\007\uff38\010\uff38\011" +
    "\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\021\uff38" +
    "\022\uff38\023\uff38\024\uff38\025\uff38\026\uff38\027\uff38\030" +
    "\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38" +
    "\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045" +
    "\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38" +
    "\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38\063\uff38\064" +
    "\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072\uff38" +
    "\001\002\000\102\003\uffe7\022\uffe7\023\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7" +
    "\053\uffe7\054\uffe7\055\uffe7\056\uffe7\063\uffe7\065\uffe7\067" +
    "\uffe7\071\uffe7\001\002\000\004\003\354\001\002\000\102" +
    "\003\115\022\121\023\062\025\120\026\142\027\135\030" +
    "\076\031\071\032\063\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\052\124\053\077\054\100" +
    "\055\104\056\136\063\125\065\073\067\127\071\066\001" +
    "\002\000\102\003\115\022\121\023\062\025\120\026\142" +
    "\027\135\030\076\031\071\032\063\033\043\034\uffbf\035" +
    "\107\036\uffbf\037\070\040\105\041\122\042\067\043\101" +
    "\044\141\045\131\046\106\047\117\050\123\052\124\053" +
    "\uffbf\054\100\055\104\056\136\063\125\065\073\067\127" +
    "\071\066\001\002\000\154\002\uff56\003\uff56\004\uff56\005" +
    "\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56" +
    "\014\uff56\015\uff56\016\uff56\021\uff56\022\uff56\023\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041" +
    "\uff56\042\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56" +
    "\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56\056" +
    "\uff56\057\uff56\060\uff56\063\uff56\064\uff56\065\uff56\066\uff56" +
    "\067\uff56\070\uff56\071\uff56\072\uff56\001\002\000\106\003" +
    "\115\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\046\uff94\047\uff94\050\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\062\232\063\uff94\065\073\067\uff94\071\066" +
    "\072\uff94\001\002\000\102\003\115\022\121\023\062\025" +
    "\120\026\142\027\135\030\076\031\071\032\063\033\360" +
    "\034\137\035\107\036\075\037\070\040\105\041\122\042" +
    "\067\043\101\044\141\045\131\046\106\047\117\050\123" +
    "\052\124\053\077\054\100\055\104\056\136\063\125\065" +
    "\073\067\127\071\066\001\002\000\154\002\uff47\003\uff47" +
    "\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47\012" +
    "\uff47\013\uff47\014\uff47\015\uff47\016\uff47\021\uff47\022\uff47" +
    "\023\uff47\024\uff47\025\uff47\026\uff47\027\uff47\030\uff47\031" +
    "\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47\037\uff47" +
    "\040\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046" +
    "\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47" +
    "\055\uff47\056\uff47\057\uff47\060\uff47\063\uff47\064\uff47\065" +
    "\uff47\066\uff47\067\uff47\070\uff47\071\uff47\072\uff47\001\002" +
    "\000\156\002\uff94\003\363\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\062\232\063\uff94\064\uff94\065\073\066\uff94\067\uff94" +
    "\070\uff94\071\066\072\uff94\001\002\000\154\002\uff45\003" +
    "\uff45\004\uff45\005\uff45\006\uff45\007\uff45\010\uff45\011\uff45" +
    "\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45\021\uff45\022" +
    "\uff45\023\uff45\024\uff45\025\uff45\026\uff45\027\uff45\030\uff45" +
    "\031\uff45\032\uff45\033\uff45\034\uff45\035\153\036\144\037" +
    "\147\040\155\041\150\042\157\043\160\044\156\045\164" +
    "\046\162\047\146\050\152\051\uff45\052\uff45\053\uff45\054" +
    "\145\055\163\056\151\057\uff45\060\uff45\063\uff45\064\uff45" +
    "\065\uff45\066\uff45\067\uff45\070\uff45\071\161\072\uff45\001" +
    "\002\000\154\002\uff49\003\uff49\004\uff49\005\uff49\006\uff49" +
    "\007\uff49\010\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015" +
    "\uff49\016\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49" +
    "\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034" +
    "\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49" +
    "\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49\051" +
    "\uff49\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057\uff49" +
    "\060\uff49\063\uff49\064\uff49\065\uff49\066\uff49\067\uff49\070" +
    "\uff49\071\161\072\uff49\001\002\000\154\002\uff43\003\uff43" +
    "\004\uff43\005\uff43\006\uff43\007\uff43\010\uff43\011\uff43\012" +
    "\uff43\013\uff43\014\uff43\015\uff43\016\uff43\021\uff43\022\uff43" +
    "\023\uff43\024\uff43\025\uff43\026\uff43\027\uff43\030\uff43\031" +
    "\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43" +
    "\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046" +
    "\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43" +
    "\055\uff43\056\uff43\057\uff43\060\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\001\002" +
    "\000\154\002\uff44\003\uff44\004\uff44\005\uff44\006\uff44\007" +
    "\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44\015\uff44" +
    "\016\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026" +
    "\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44" +
    "\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043" +
    "\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44" +
    "\052\uff44\053\uff44\054\uff44\055\uff44\056\uff44\057\uff44\060" +
    "\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44\070\uff44" +
    "\071\161\072\uff44\001\002\000\010\017\041\020\042\033" +
    "\043\001\002\000\004\057\367\001\002\000\010\017\041" +
    "\020\042\033\043\001\002\000\004\044\371\001\002\000" +
    "\160\002\uffde\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\001\002\000\004\033\043" +
    "\001\002\000\004\044\374\001\002\000\160\002\uffe8\003" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071" +
    "\uffe8\072\uffe8\001\002\000\074\002\uff19\003\uff19\007\uff19" +
    "\010\uff19\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016" +
    "\uff19\021\uff19\035\153\036\144\037\147\040\155\041\150" +
    "\042\157\043\160\044\156\045\164\046\162\047\146\050" +
    "\152\054\145\055\163\056\151\060\uff19\063\uff19\071\161" +
    "\001\002\000\072\002\uff1a\003\uff1a\007\uff1a\010\uff1a\011" +
    "\uff1a\012\uff1a\013\uff1a\014\uff1a\015\uff1a\016\uff1a\021\uff1a" +
    "\035\107\036\314\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\054\100" +
    "\055\104\056\136\060\uff1a\063\uff1a\001\002\000\034\002" +
    "\uff1b\003\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b" +
    "\014\uff1b\015\uff1b\016\uff1b\021\uff1b\060\uff1b\063\uff1b\001" +
    "\002\000\004\033\u0101\001\002\000\010\051\uffdd\065\u0105" +
    "\066\u0102\001\002\000\010\017\041\020\042\033\043\001" +
    "\002\000\004\051\u0111\001\002\000\012\017\041\020\042" +
    "\033\043\065\u010e\001\002\000\014\017\041\020\042\033" +
    "\043\065\u0108\066\u0107\001\002\000\004\066\u0109\001\002" +
    "\000\012\005\uffdc\051\uffdc\052\uffdc\067\uffdc\001\002\000" +
    "\012\017\uffc0\020\uffc0\033\uffc0\065\uffc0\001\002\000\014" +
    "\005\uffdb\051\uffdb\052\uffdb\066\u010c\067\uffdb\001\002\000" +
    "\014\005\uffd8\051\uffd8\052\uffd8\066\u010b\067\uffd8\001\002" +
    "\000\046\002\uffbd\003\uffbd\005\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd" +
    "\051\uffbd\052\uffbd\060\uffbd\063\uffbd\066\uffbd\067\uffbd\001" +
    "\002\000\046\002\uffbe\003\uffbe\005\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021" +
    "\uffbe\051\uffbe\052\uffbe\060\uffbe\063\uffbe\066\uffbe\067\uffbe" +
    "\001\002\000\004\066\u010f\001\002\000\012\017\uffbf\020" +
    "\uffbf\033\uffbf\065\uffbf\001\002\000\014\005\uffd9\051\uffd9" +
    "\052\uffd9\066\u010c\067\uffd9\001\002\000\014\005\uffd7\051" +
    "\uffd7\052\uffd7\066\u010b\067\uffd7\001\002\000\102\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\063\125\065\073\067\127\071\066\001\002\000" +
    "\074\002\uffca\003\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\021\uffca\035\153\036" +
    "\144\037\147\040\155\041\150\042\157\043\160\044\156" +
    "\045\164\046\162\047\146\050\152\054\145\055\163\056" +
    "\151\060\u0113\063\uffca\071\161\001\002\000\034\002\uffcb" +
    "\003\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\021\uffcb\060\uffcb\063\uffcb\001\002" +
    "\000\004\065\u0115\001\002\000\012\005\uffda\051\uffda\052" +
    "\uffda\067\uffda\001\002\000\004\051\u0117\001\002\000\004" +
    "\033\043\001\002\000\004\065\u0119\001\002\000\104\003" +
    "\115\022\121\023\062\025\120\026\142\027\135\030\076" +
    "\031\071\032\063\033\043\034\137\035\107\036\075\037" +
    "\070\040\105\041\122\042\067\043\101\044\141\045\131" +
    "\046\106\047\117\050\123\052\124\053\077\054\100\055" +
    "\104\056\136\063\125\065\073\066\uff3c\067\127\071\066" +
    "\001\002\000\004\066\u011b\001\002\000\034\002\uff95\003" +
    "\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\021\uff95\060\uff95\063\uff95\001\002\000" +
    "\004\002\ufff9\001\002\000\004\033\u011e\001\002\000\046" +
    "\002\uff98\003\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\021\uff98\026\u0126\033\uff98" +
    "\057\uff98\060\uff98\063\uff98\071\u012a\072\u0127\001\002\000" +
    "\040\002\uffa8\003\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\033\u011e\057" +
    "\u0121\060\uffa8\063\uffa8\001\002\000\034\002\uffa9\003\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\021\uffa9\060\uffa9\063\uffa9\001\002\000\006" +
    "\033\u011e\057\245\001\002\000\006\033\u011e\057\247\001" +
    "\002\000\034\002\uffa6\003\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\021\uffa6\060" +
    "\uffa6\063\uffa6\001\002\000\034\002\uffa5\003\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\021\uffa5\060\uffa5\063\uffa5\001\002\000\034\002\uffa7" +
    "\003\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\021\uffa7\060\uffa7\063\uffa7\001\002" +
    "\000\044\002\uff9c\003\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\021\uff9c\033\uff9c" +
    "\057\uff9c\060\uff9c\063\uff9c\071\u012e\072\u012d\001\002\000" +
    "\046\002\uffa3\003\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\021\uffa3\026\uffa3\033" +
    "\uffa3\057\uffa3\060\uffa3\063\uffa3\071\uffa3\072\uffa3\001\002" +
    "\000\040\002\uff96\003\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\016\uff96\021\uff96\033\uff96" +
    "\057\uff96\060\uff96\063\uff96\001\002\000\046\002\uffa0\003" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\021\uffa0\026\u0132\033\uffa0\057\uffa0\060" +
    "\uffa0\063\uffa0\071\u0133\072\u0130\001\002\000\046\002\uffa4" +
    "\003\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\021\uffa4\026\uffa4\033\uffa4\057\uffa4" +
    "\060\uffa4\063\uffa4\071\uffa4\072\uffa4\001\002\000\004\072" +
    "\u012c\001\002\000\044\002\uff97\003\uff97\007\uff97\010\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\021" +
    "\uff97\033\uff97\057\uff97\060\uff97\063\uff97\071\u012e\072\u012d" +
    "\001\002\000\044\002\uffa3\003\uffa3\007\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\021\uffa3" +
    "\033\uffa3\057\uffa3\060\uffa3\063\uffa3\071\uffa3\072\uffa3\001" +
    "\002\000\044\002\uffa4\003\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4\033" +
    "\uffa4\057\uffa4\060\uffa4\063\uffa4\071\uffa4\072\uffa4\001\002" +
    "\000\044\002\uff9a\003\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\021\uff9a\033\uff9a" +
    "\057\uff9a\060\uff9a\063\uff9a\071\u0131\072\u0130\001\002\000" +
    "\046\002\uffa1\003\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\021\uffa1\026\uffa1\033" +
    "\uffa1\057\uffa1\060\uffa1\063\uffa1\071\uffa1\072\uffa1\001\002" +
    "\000\044\002\uffa2\003\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\021\uffa2\033\uffa2" +
    "\057\uffa2\060\uffa2\063\uffa2\071\uffa2\072\uffa2\001\002\000" +
    "\040\002\uff9e\003\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\021\uff9e\033\uff9e\057" +
    "\uff9e\060\uff9e\063\uff9e\001\002\000\046\002\uffa2\003\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\021\uffa2\026\uffa2\033\uffa2\057\uffa2\060\uffa2" +
    "\063\uffa2\071\uffa2\072\uffa2\001\002\000\004\072\u0135\001" +
    "\002\000\044\002\uff9b\003\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b\033" +
    "\uff9b\057\uff9b\060\uff9b\063\uff9b\071\u012e\072\u012d\001\002" +
    "\000\044\002\uff99\003\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\021\uff99\033\uff99" +
    "\057\uff99\060\uff99\063\uff99\071\u0131\072\u0130\001\002\000" +
    "\004\071\u0138\001\002\000\040\002\uff9f\003\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\021\uff9f\033\uff9f\057\uff9f\060\uff9f\063\uff9f\001\002" +
    "\000\044\002\uff9d\003\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\021\uff9d\033\uff9d" +
    "\057\uff9d\060\uff9d\063\uff9d\071\u0131\072\u0130\001\002\000" +
    "\004\033\u013b\001\002\000\020\003\u013d\005\uffdd\051\uffdd" +
    "\052\uffdd\065\u0105\066\u0102\067\uffdd\001\002\000\012\005" +
    "\u0142\051\u013e\052\124\067\u013f\001\002\000\012\005\u0142" +
    "\051\u013e\052\124\067\u013f\001\002\000\102\003\115\022" +
    "\121\023\062\025\120\026\142\027\135\030\076\031\071" +
    "\032\063\033\043\034\137\035\107\036\075\037\070\040" +
    "\105\041\122\042\067\043\101\044\141\045\131\046\106" +
    "\047\117\050\123\052\124\053\077\054\100\055\104\056" +
    "\136\063\125\065\073\067\127\071\066\001\002\000\012" +
    "\005\u0142\051\u013e\052\124\067\u013f\001\002\000\040\002" +
    "\uff91\003\uff91\004\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\016\uff91\021\uff91\060\uff91\063" +
    "\uff91\070\uff91\001\002\000\034\002\uffc8\003\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\021\uffc8\060\uffc8\063\uffc8\001\002\000\102\003\115" +
    "\022\121\023\062\025\120\026\142\027\135\030\076\031" +
    "\071\032\063\033\043\034\137\035\107\036\075\037\070" +
    "\040\105\041\122\042\067\043\101\044\141\045\131\046" +
    "\106\047\117\050\123\052\124\053\077\054\100\055\104" +
    "\056\136\063\125\065\073\067\127\071\066\001\002\000" +
    "\054\005\u0142\006\u0144\035\153\036\144\037\147\040\155" +
    "\041\150\042\157\043\160\044\156\045\164\046\162\047" +
    "\146\050\152\051\u013e\052\124\054\145\055\163\056\151" +
    "\067\u013f\071\161\001\002\000\012\005\u0142\051\u013e\052" +
    "\124\067\u013f\001\002\000\040\002\uff8b\003\uff8b\004\u0147" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\016\uff8b\021\uff8b\060\uff8b\063\uff8b\070\uff8b\001\002" +
    "\000\040\002\uff8d\003\uff8d\004\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\021\uff8d" +
    "\060\uff8d\063\uff8d\070\uff8d\001\002\000\012\005\u0142\051" +
    "\u013e\052\124\067\u013f\001\002\000\040\002\uff8c\003\uff8c" +
    "\004\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\021\uff8c\060\uff8c\063\uff8c\070\uff8c" +
    "\001\002\000\040\002\uff8b\003\uff8b\004\u0147\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\021\uff8b\060\uff8b\063\uff8b\070\uff8b\001\002\000\040\002" +
    "\uff90\003\uff90\004\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\021\uff90\060\uff90\063" +
    "\uff90\070\uff90\001\002\000\006\060\u014c\070\u014d\001\002" +
    "\000\004\070\u014e\001\002\000\040\002\uff8f\003\uff8f\004" +
    "\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\021\uff8f\060\uff8f\063\uff8f\070\uff8f\001" +
    "\002\000\040\002\uff8e\003\uff8e\004\uff8e\007\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\021" +
    "\uff8e\060\uff8e\063\uff8e\070\uff8e\001\002\000\100\002\uff92" +
    "\003\uff92\004\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\016\uff92\021\uff92\035\153\036\144" +
    "\037\147\040\155\041\150\042\157\043\160\044\156\045" +
    "\164\046\162\047\146\050\152\054\145\055\163\056\151" +
    "\060\uff92\063\uff92\070\uff92\071\161\001\002\000\034\002" +
    "\uffc9\003\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\021\uffc9\060\uffc9\063\uffc9\001" +
    "\002\000\034\002\uffed\003\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\021\uffed\060" +
    "\uffed\063\uffed\001\002\000\004\033\u0153\001\002\000\012" +
    "\017\041\020\042\033\043\065\u0156\001\002\000\004\066" +
    "\u015d\001\002\000\012\017\041\020\042\033\043\065\u010e" +
    "\001\002\000\012\017\041\020\042\033\043\065\u0108\001" +
    "\002\000\036\002\uffab\003\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\021\uffab\060" +
    "\uffab\063\uffab\066\u0158\001\002\000\036\002\uffaf\003\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\021\uffaf\060\uffaf\063\uffaf\066\u010c\001\002" +
    "\000\036\002\uffac\003\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021\uffac\060\uffac" +
    "\063\uffac\066\u010b\001\002\000\004\066\u015b\001\002\000" +
    "\036\002\uffae\003\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\014\uffae\015\uffae\016\uffae\021\uffae\060\uffae\063" +
    "\uffae\066\u010c\001\002\000\036\002\uffad\003\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\021\uffad\060\uffad\063\uffad\066\u010b\001\002\000\034" +
    "\002\uffaa\003\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\021\uffaa\060\uffaa\063\uffaa" +
    "\001\002\000\034\002\uff21\003\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\021\uff21" +
    "\060\uff21\063\uff21\001\002\000\034\002\uff23\003\uff23\007" +
    "\uff23\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015\uff23" +
    "\016\uff23\021\uff23\060\uff23\063\uff23\001\002\000\044\035" +
    "\153\036\144\037\147\040\155\041\150\042\157\043\160" +
    "\044\156\045\164\046\162\047\146\050\152\051\u016a\054" +
    "\145\055\163\056\151\071\161\001\002\000\042\035\107" +
    "\036\314\037\070\040\105\041\122\042\067\043\101\044" +
    "\141\045\131\046\106\047\117\050\123\051\u0167\054\100" +
    "\055\104\056\136\001\002\000\034\002\uff22\003\uff22\007" +
    "\uff22\010\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22" +
    "\016\uff22\021\uff22\060\uff22\063\uff22\001\002\000\044\035" +
    "\uff2a\036\uff2a\037\uff2a\040\uff2a\041\uff2a\042\uff2a\043\uff2a" +
    "\044\uff2a\045\uff2a\046\uff2a\047\uff2a\050\uff2a\051\u0164\054" +
    "\uff2a\055\uff2a\056\uff2a\071\uff2a\001\002\000\004\067\u0165" +
    "\001\002\000\104\003\115\022\121\023\062\025\120\026" +
    "\142\027\135\030\076\031\071\032\063\033\043\034\137" +
    "\035\107\036\075\037\070\040\105\041\122\042\067\043" +
    "\101\044\141\045\131\046\106\047\117\050\123\052\124" +
    "\053\077\054\100\055\104\056\136\063\125\065\073\067" +
    "\127\070\uff3c\071\066\001\002\000\034\002\uff1d\003\uff1d" +
    "\007\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015" +
    "\uff1d\016\uff1d\021\uff1d\060\uff1d\063\uff1d\001\002\000\102" +
    "\003\u0169\022\121\023\062\025\120\026\142\027\135\030" +
    "\076\031\071\032\063\033\043\034\137\035\107\036\075" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\052\124\053\077\054\100" +
    "\055\104\056\136\063\125\065\073\067\127\071\066\001" +
    "\002\000\074\002\uff1f\003\uff1f\007\uff1f\010\uff1f\011\uff1f" +
    "\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\021\uff1f\035" +
    "\153\036\144\037\147\040\155\041\150\042\157\043\160" +
    "\044\156\045\164\046\162\047\146\050\152\054\145\055" +
    "\163\056\151\060\uff1f\063\uff1f\071\161\001\002\000\072" +
    "\002\uff1c\003\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013" +
    "\uff1c\014\uff1c\015\uff1c\016\uff1c\021\uff1c\035\107\036\314" +
    "\037\070\040\105\041\122\042\067\043\101\044\141\045" +
    "\131\046\106\047\117\050\123\054\100\055\104\056\136" +
    "\060\uff1c\063\uff1c\001\002\000\102\003\u016c\022\121\023" +
    "\062\025\120\026\142\027\135\030\076\031\071\032\063" +
    "\033\043\034\137\035\107\036\075\037\070\040\105\041" +
    "\122\042\067\043\101\044\141\045\131\046\106\047\117" +
    "\050\123\052\124\053\077\054\100\055\104\056\136\063" +
    "\125\065\073\067\127\071\066\001\002\000\074\002\uff20" +
    "\003\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013\uff20\014" +
    "\uff20\015\uff20\016\uff20\021\uff20\035\153\036\144\037\147" +
    "\040\155\041\150\042\157\043\160\044\156\045\164\046" +
    "\162\047\146\050\152\054\145\055\163\056\151\060\uff20" +
    "\063\uff20\071\161\001\002\000\072\002\uff1e\003\uff1e\007" +
    "\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e\014\uff1e\015\uff1e" +
    "\016\uff1e\021\uff1e\035\107\036\314\037\070\040\105\041" +
    "\122\042\067\043\101\044\141\045\131\046\106\047\117" +
    "\050\123\054\100\055\104\056\136\060\uff1e\063\uff1e\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffa\001\002" +
    "\000\032\003\026\007\021\010\022\011\030\012\020\013" +
    "\025\014\032\015\017\016\035\021\027\060\u0170\063\004" +
    "\001\002\000\032\002\ufffb\003\026\007\021\010\022\011" +
    "\030\012\020\013\025\014\032\015\017\016\035\021\027" +
    "\063\004\001\002\000\004\002\ufffc\001\002\000\022\003" +
    "\uffc3\005\uffc3\033\uffc3\051\uffc3\052\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\001\002\000\010\033\u0178\065\u017c\066\u0172\001" +
    "\002\000\012\005\u0142\051\u013e\052\124\067\u013f\001\002" +
    "\000\006\065\u017c\066\u0172\001\002\000\020\003\uffb8\005" +
    "\uffb8\051\uffb8\052\uffb8\065\u0177\066\u0172\067\uffb8\001\002" +
    "\000\010\033\u0178\065\uffc4\066\uffc4\001\002\000\006\033" +
    "\u017e\051\u017f\001\002\000\006\065\u017c\066\u017a\001\002" +
    "\000\020\003\uffbc\005\uffbc\051\uffbc\052\uffbc\065\uffc3\066" +
    "\uffc3\067\uffbc\001\002\000\020\003\uffba\005\uffba\051\uffba" +
    "\052\uffba\065\u017c\066\u0172\067\uffba\001\002\000\022\003" +
    "\uffc4\005\uffc4\033\uffc4\051\uffc4\052\uffc4\065\uffc4\066\uffc4" +
    "\067\uffc4\001\002\000\022\003\uffc1\005\uffc1\033\uffc1\051" +
    "\uffc1\052\uffc1\065\uffc1\066\uffc1\067\uffc1\001\002\000\004" +
    "\057\u018f\001\002\000\010\033\u0181\051\u0182\057\u0180\001" +
    "\002\000\004\033\u0178\001\002\000\012\033\u0186\057\u0187" +
    "\065\uffb0\066\uffb0\001\002\000\004\033\u0183\001\002\000" +
    "\004\057\u0184\001\002\000\004\033\u0178\001\002\000\006" +
    "\065\uffb5\066\uffb5\001\002\000\010\033\u017e\051\u017f\057" +
    "\u018c\001\002\000\006\033\u0178\057\245\001\002\000\006" +
    "\033\u0178\057\247\001\002\000\006\065\uffb2\066\uffb2\001" +
    "\002\000\006\065\uffb6\066\uffb6\001\002\000\006\065\uffb7" +
    "\066\uffb7\001\002\000\004\033\u0178\001\002\000\006\065" +
    "\uffb4\066\uffb4\001\002\000\006\065\uffb3\066\uffb3\001\002" +
    "\000\004\033\u0178\001\002\000\006\065\uffb1\066\uffb1\001" +
    "\002\000\014\003\u0192\005\u0142\051\u013e\052\124\067\u013f" +
    "\001\002\000\034\002\uffc5\003\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021\uffc5" +
    "\060\uffc5\063\uffc5\001\002\000\034\002\uffc7\003\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\021\uffc7\060\uffc7\063\uffc7\001\002\000\022\003" +
    "\uffc2\005\uffc2\033\uffc2\051\uffc2\052\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\001\002\000\034\002\uffc6\003\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\021\uffc6\060\uffc6\063\uffc6\001\002\000\006\065\u017c\066" +
    "\u0197\001\002\000\020\003\uffb9\005\uffb9\051\uffb9\052\uffb9" +
    "\065\uffc3\066\uffc3\067\uffb9\001\002\000\020\003\uffbb\005" +
    "\uffbb\051\uffbb\052\uffbb\065\u017c\066\u0172\067\uffbb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0196\000\040\002\015\003\032\004\006\005\010\006" +
    "\023\007\007\010\012\011\011\012\014\013\033\014\030" +
    "\015\022\016\005\017\013\020\004\001\001\000\012\063" +
    "\u0174\064\u0172\072\u0173\076\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\u016d\005\u016e\006\023\007\007\010\012\011\011" +
    "\012\014\013\033\014\030\015\022\016\005\017\013\020" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\021" +
    "\u015e\022\u015d\023\u0161\025\u015f\026\073\027\101\030\111" +
    "\031\113\032\127\033\132\034\115\035\131\036\102\041" +
    "\137\042\112\043\u0162\044\107\055\125\065\063\067\071" +
    "\076\064\001\001\000\020\051\u0151\052\035\053\046\054" +
    "\045\055\037\056\036\076\044\001\001\000\002\001\001" +
    "\000\020\051\u0139\052\035\053\046\054\045\055\037\056" +
    "\036\076\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\051\377\052\035\053\046\054\045\055\037" +
    "\056\036\076\044\001\001\000\002\001\001\000\050\024" +
    "\376\025\374\026\073\027\101\030\111\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\055\125\065\063\067\071\076\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\051\043\052" +
    "\035\053\046\054\045\055\037\056\036\076\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\025\110\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\055\125\065\063\067\071\076\064\001\001\000" +
    "\020\051\355\052\035\053\046\054\045\055\037\056\036" +
    "\076\044\001\001\000\002\001\001\000\004\030\350\001" +
    "\001\000\002\001\001\000\054\025\261\026\073\027\101" +
    "\030\111\031\113\032\127\033\132\034\115\035\131\036" +
    "\102\041\137\042\112\043\133\044\107\045\332\046\333" +
    "\047\334\055\125\065\063\067\071\076\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\025\331\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\055\125\065\063\067\071\076\064\001\001\000" +
    "\046\025\324\026\073\027\101\030\325\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\055\125\065\063\067\071\076\064\001\001" +
    "\000\002\001\001\000\046\025\322\026\073\027\101\030" +
    "\111\031\113\032\127\033\132\034\115\035\131\036\102" +
    "\041\137\042\112\043\133\044\107\055\125\065\063\067" +
    "\071\076\064\001\001\000\002\001\001\000\046\025\321" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\055\125\065\063\067\071\076\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\051\306\052\035\053\046\054" +
    "\045\055\037\056\036\076\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\300\001\001\000\030\041" +
    "\275\042\112\043\133\044\107\051\276\052\035\053\046" +
    "\054\045\055\037\056\036\076\044\001\001\000\046\025" +
    "\254\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\055\125\065\063\067\071\076\064\001\001\000\066" +
    "\025\210\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\046\212\047\213\050\207\051\214\052\035\053" +
    "\046\054\045\055\211\056\036\065\063\067\071\076\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\025\142\026\073\027\101\030" +
    "\111\031\113\032\127\033\132\034\115\035\131\036\102" +
    "\041\137\042\112\043\133\044\107\055\125\065\063\067" +
    "\071\076\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\153\001\001\000\046\025" +
    "\205\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\055\125\065\063\067\071\076\064\001\001\000\046" +
    "\025\204\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\055\125\065\063\067\071\076\064\001\001\000" +
    "\046\025\203\026\073\027\101\030\111\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\055\125\065\063\067\071\076\064\001\001" +
    "\000\046\025\202\026\073\027\101\030\111\031\113\032" +
    "\127\033\132\034\115\035\131\036\102\041\137\042\112" +
    "\043\133\044\107\055\125\065\063\067\071\076\064\001" +
    "\001\000\046\025\201\026\073\027\101\030\111\031\113" +
    "\032\127\033\132\034\115\035\131\036\102\041\137\042" +
    "\112\043\133\044\107\055\125\065\063\067\071\076\064" +
    "\001\001\000\046\025\200\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\055\125\065\063\067\071\076" +
    "\064\001\001\000\046\025\177\026\073\027\101\030\111" +
    "\031\113\032\127\033\132\034\115\035\131\036\102\041" +
    "\137\042\112\043\133\044\107\055\125\065\063\067\071" +
    "\076\064\001\001\000\046\025\176\026\073\027\101\030" +
    "\111\031\113\032\127\033\132\034\115\035\131\036\102" +
    "\041\137\042\112\043\133\044\107\055\125\065\063\067" +
    "\071\076\064\001\001\000\002\001\001\000\046\025\174" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\055\125\065\063\067\071\076\064\001\001\000\046\025" +
    "\173\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\055\125\065\063\067\071\076\064\001\001\000\046" +
    "\025\172\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\055\125\065\063\067\071\076\064\001\001\000" +
    "\046\025\171\026\073\027\101\030\111\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\055\125\065\063\067\071\076\064\001\001" +
    "\000\046\025\167\026\073\027\101\030\111\031\113\032" +
    "\127\033\132\034\115\035\131\036\102\041\137\042\112" +
    "\043\133\044\107\055\125\065\063\067\071\076\064\001" +
    "\001\000\046\025\166\026\073\027\101\030\111\031\113" +
    "\032\127\033\132\034\115\035\131\036\102\041\137\042" +
    "\112\043\133\044\107\055\125\065\063\067\071\076\064" +
    "\001\001\000\046\025\165\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\055\125\065\063\067\071\076" +
    "\064\001\001\000\046\025\164\026\073\027\101\030\111" +
    "\031\113\032\127\033\132\034\115\035\131\036\102\041" +
    "\137\042\112\043\133\044\107\055\125\065\063\067\071" +
    "\076\064\001\001\000\004\067\153\001\001\000\004\067" +
    "\153\001\001\000\004\067\153\001\001\000\004\067\153" +
    "\001\001\000\002\001\001\000\004\067\153\001\001\000" +
    "\004\067\153\001\001\000\004\067\153\001\001\000\004" +
    "\067\153\001\001\000\002\001\001\000\004\067\153\001" +
    "\001\000\004\067\153\001\001\000\004\067\153\001\001" +
    "\000\004\067\153\001\001\000\004\067\153\001\001\000" +
    "\004\067\153\001\001\000\004\067\153\001\001\000\004" +
    "\067\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\153\001\001\000\046\025\254\026\073\027\101" +
    "\030\111\031\113\032\127\033\132\034\115\035\131\036" +
    "\102\041\137\042\112\043\133\044\107\055\125\065\063" +
    "\067\071\076\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\025\220" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\055\125\065\063\067\071\076\064\001\001\000\002\001" +
    "\001\000\004\067\153\001\001\000\002\001\001\000\024" +
    "\051\224\052\035\053\046\054\045\055\037\056\036\062" +
    "\225\071\223\076\044\001\001\000\002\001\001\000\020" +
    "\051\236\052\035\053\046\054\045\055\037\056\036\076" +
    "\044\001\001\000\020\051\227\052\035\053\046\054\045" +
    "\055\037\056\036\076\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\051\224\052\035\053\046\054\045" +
    "\055\037\056\036\062\225\071\233\076\044\001\001\000" +
    "\004\076\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\051\224\052\035\053\046\054\045\055\037\056" +
    "\036\061\241\062\225\071\240\076\044\001\001\000\024" +
    "\051\224\052\035\053\046\054\045\055\037\056\036\062" +
    "\225\071\237\076\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\051\224\052\035\053" +
    "\046\054\045\055\037\056\036\062\225\071\245\076\044" +
    "\001\001\000\024\051\224\052\035\053\046\054\045\055" +
    "\037\056\036\062\225\071\243\076\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\025\251\026\073\027\101\030\111\031\113" +
    "\032\127\033\132\034\115\035\131\036\102\041\137\042" +
    "\112\043\133\044\107\055\125\065\063\067\071\076\064" +
    "\001\001\000\002\001\001\000\004\067\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\025\263\026" +
    "\073\027\101\030\111\031\113\032\127\033\132\034\115" +
    "\035\131\036\102\041\137\042\112\043\133\044\107\055" +
    "\125\065\063\067\071\076\064\001\001\000\050\025\261" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\047\262\055\125\065\063\067\071\076\064\001\001\000" +
    "\004\067\153\001\001\000\002\001\001\000\004\067\153" +
    "\001\001\000\050\025\266\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\050\265\055\125\065\063\067" +
    "\071\076\064\001\001\000\002\001\001\000\004\067\153" +
    "\001\001\000\002\001\001\000\052\025\261\026\073\027" +
    "\101\030\111\031\113\032\127\033\132\034\115\035\131" +
    "\036\102\041\137\042\112\043\133\044\107\046\271\047" +
    "\272\055\125\065\063\067\071\076\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\025" +
    "\261\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\046\212\047\213\051\214\052\035\053\046\054\045" +
    "\055\211\056\036\065\063\067\071\076\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\025\261\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\046\302\047\272\055\125\065" +
    "\063\067\071\076\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\025\316\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\055\125\065\063\067\071\076" +
    "\064\001\001\000\002\001\001\000\046\025\310\026\073" +
    "\027\101\030\111\031\113\032\127\033\132\034\115\035" +
    "\131\036\102\041\137\042\112\043\133\044\107\055\125" +
    "\065\063\067\071\076\064\001\001\000\046\025\311\026" +
    "\073\027\101\030\111\031\113\032\127\033\132\034\115" +
    "\035\131\036\102\041\137\042\112\043\133\044\107\055" +
    "\125\065\063\067\071\076\064\001\001\000\004\067\153" +
    "\001\001\000\004\067\153\001\001\000\004\067\314\001" +
    "\001\000\002\001\001\000\046\025\315\026\073\027\101" +
    "\030\111\031\113\032\127\033\132\034\115\035\131\036" +
    "\102\041\137\042\112\043\133\044\107\055\125\065\063" +
    "\067\071\076\064\001\001\000\004\067\153\001\001\000" +
    "\004\067\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\067\153\001\001\000\004\067\153\001\001\000" +
    "\046\025\324\026\073\027\101\030\325\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\055\125\065\063\067\071\076\064\001\001" +
    "\000\004\067\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\025" +
    "\261\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\045\336\047\337\055\125\065\063\067\071\076\064" +
    "\001\001\000\052\025\261\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\045\341\047\342\055\125\065" +
    "\063\067\071\076\064\001\001\000\002\001\001\000\052" +
    "\025\261\026\073\027\101\030\111\031\113\032\127\033" +
    "\132\034\115\035\131\036\102\041\137\042\112\043\133" +
    "\044\107\045\336\047\337\055\125\065\063\067\071\076" +
    "\064\001\001\000\052\025\261\026\073\027\101\030\111" +
    "\031\113\032\127\033\132\034\115\035\131\036\102\041" +
    "\137\042\112\043\133\044\107\045\343\047\344\055\125" +
    "\065\063\067\071\076\064\001\001\000\002\001\001\000" +
    "\052\025\261\026\073\027\101\030\111\031\113\032\127" +
    "\033\132\034\115\035\131\036\102\041\137\042\112\043" +
    "\133\044\107\045\336\047\337\055\125\065\063\067\071" +
    "\076\064\001\001\000\002\001\001\000\052\025\261\026" +
    "\073\027\101\030\111\031\113\032\127\033\132\034\115" +
    "\035\131\036\102\041\137\042\112\043\133\044\107\045" +
    "\336\047\337\055\125\065\063\067\071\076\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\025\322\026\073\027\101\030\111" +
    "\031\113\032\127\033\132\034\115\035\131\036\102\041" +
    "\137\042\112\043\133\044\107\055\125\065\063\067\071" +
    "\076\064\001\001\000\046\025\324\026\073\027\101\030" +
    "\111\031\113\032\127\033\132\034\115\035\131\036\102" +
    "\041\137\042\112\043\133\044\107\055\125\065\063\067" +
    "\071\076\064\001\001\000\002\001\001\000\046\025\363" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\055\125\065\063\067\071\076\064\001\001\000\046\025" +
    "\360\026\073\027\101\030\111\031\113\032\127\033\132" +
    "\034\115\035\131\036\102\041\137\042\112\043\133\044" +
    "\107\055\125\065\063\067\071\076\064\001\001\000\002" +
    "\001\001\000\046\025\361\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\055\125\065\063\067\071\076" +
    "\064\001\001\000\004\067\153\001\001\000\004\067\153" +
    "\001\001\000\004\067\314\001\001\000\004\067\153\001" +
    "\001\000\020\051\365\052\035\053\046\054\045\055\037" +
    "\056\036\076\044\001\001\000\002\001\001\000\020\051" +
    "\367\052\035\053\046\054\045\055\037\056\036\076\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\153\001\001\000\004\067\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\065\u0103\070\u0102\001\001" +
    "\000\024\051\224\052\035\053\046\054\045\055\037\056" +
    "\036\062\225\071\u0113\076\044\001\001\000\002\001\001" +
    "\000\024\051\224\052\035\053\046\054\045\055\037\056" +
    "\036\062\225\071\u010c\076\044\001\001\000\024\051\224" +
    "\052\035\053\046\054\045\055\037\056\036\062\225\071" +
    "\u0105\076\044\001\001\000\004\066\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\025\u0111\026\073\027\101\030\111\031\113" +
    "\032\127\033\132\034\115\035\131\036\102\041\137\042" +
    "\112\043\133\044\107\055\125\065\063\067\071\076\064" +
    "\001\001\000\004\067\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\u0117\001\001\000\002\001\001\000\052\025\261\026" +
    "\073\027\101\030\111\031\113\032\127\033\132\034\115" +
    "\035\131\036\102\041\137\042\112\043\133\044\107\046" +
    "\u0119\047\272\055\125\065\063\067\071\076\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\074\u011e\075\u011f\001\001\000\006\057\u0127\060\u0128" +
    "\001\001\000\010\061\u0121\074\u011e\075\u0122\001\001\000" +
    "\002\001\001\000\006\074\u011e\075\u0124\001\001\000\006" +
    "\074\u011e\075\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\u0103\070\u013b\001\001\000" +
    "\006\032\u013f\040\u014f\001\001\000\006\032\u013f\040\u0140" +
    "\001\001\000\046\025\u014e\026\073\027\101\030\111\031" +
    "\113\032\127\033\132\034\115\035\131\036\102\041\137" +
    "\042\112\043\133\044\107\055\125\065\063\067\071\076" +
    "\064\001\001\000\006\032\u013f\040\u014a\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\025\u0142\026\073\027" +
    "\101\030\111\031\113\032\127\033\132\034\115\035\131" +
    "\036\102\041\137\042\112\043\133\044\107\055\125\065" +
    "\063\067\071\076\064\001\001\000\010\032\u013f\040\u0144" +
    "\067\153\001\001\000\006\032\u013f\040\u0148\001\001\000" +
    "\004\037\u0145\001\001\000\002\001\001\000\006\032\u013f" +
    "\040\u0147\001\001\000\002\001\001\000\004\037\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\051\u0153\052\035\053\046\054\045\055\037\056" +
    "\036\065\u0154\076\044\001\001\000\002\001\001\000\020" +
    "\051\u0159\052\035\053\046\054\045\055\037\056\036\076" +
    "\044\001\001\000\020\051\u0156\052\035\053\046\054\045" +
    "\055\037\056\036\076\044\001\001\000\004\066\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u015b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\153" +
    "\001\001\000\004\067\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\u0165\001\001\000\052\025\261" +
    "\026\073\027\101\030\111\031\113\032\127\033\132\034" +
    "\115\035\131\036\102\041\137\042\112\043\133\044\107" +
    "\046\212\047\272\055\125\065\063\067\071\076\064\001" +
    "\001\000\002\001\001\000\046\025\u0167\026\073\027\101" +
    "\030\111\031\113\032\127\033\132\034\115\035\131\036" +
    "\102\041\137\042\112\043\133\044\107\055\125\065\063" +
    "\067\071\076\064\001\001\000\004\067\153\001\001\000" +
    "\004\067\314\001\001\000\046\025\u016a\026\073\027\101" +
    "\030\111\031\113\032\127\033\132\034\115\035\131\036" +
    "\102\041\137\042\112\043\133\044\107\055\125\065\063" +
    "\067\071\076\064\001\001\000\004\067\153\001\001\000" +
    "\004\067\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\u016d\005\u016e\006\023\007\007\010\012\011" +
    "\011\012\014\013\033\014\030\015\022\016\005\017\013" +
    "\020\004\001\001\000\034\004\u0170\005\u016e\006\023\007" +
    "\007\010\012\011\011\012\014\013\033\014\030\015\022" +
    "\016\005\017\013\020\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\u017c\073\u0195\001\001\000\006" +
    "\032\u013f\040\u0194\001\001\000\004\063\u0193\001\001\000" +
    "\010\063\u0174\064\u0172\072\u0190\001\001\000\004\073\u0178" +
    "\001\001\000\002\001\001\000\006\063\u0174\064\u017a\001" +
    "\001\000\002\001\001\000\004\063\u017c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\u018d\001\001\000\006\061\u0187\073\u0188" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u0184\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\u018a\001\001\000\004\073\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\u018c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\u018f\001\001\000\002\001\001\000\006\032\u013f\040\u0192" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\u0174\064\u0197\001\001" +
    "\000\002\001\001\000\004\063\u017c\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }

  public BLOGParser(Scanner s, blog.msg.ErrorMsg msg) {
    this(s);
    errorMsg = msg;
  }

// WC: Methods that get automatically invoked when using the builtin error recovery mechanism.  
/*
public void report_error(String message, Object info)
    This method should be called whenever an error message is to be issued. In the default implementation of this method, the first parameter provides the text of a message which is printed on System.err and the second parameter is simply ignored. It is very typical to override this method in order to provide a more sophisticated error reporting mechanism. 
public void report_fatal_error(String message, Object info)
    This method should be called whenever a non-recoverable error occurs. It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(), and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early). 
public void syntax_error(Symbol cur_token)
    This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted). In the default implementation it calls: report_error("Syntax error", null);. 
public void unrecovered_syntax_error(Symbol cur_token)
    This method is called by the parser if it is unable to recover from a syntax error. In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);. 
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {



  static blog.symbol.Symbol sym(String s) {
           return blog.symbol.Symbol.Symbol(s);
  }

  LocationInFile getCurLocation() {
    return new LocationInFile
      (((ScannerWithLocInfo)parser.getScanner()).getCurFilename(),
      ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum());
  }

  int currLineno() {
    System.out.println("before");
    ScannerWithLocInfo scanner =  ((ScannerWithLocInfo)parser.getScanner());
    System.out.println("after");
    return scanner.getCurLineNum();
  }

  int currColno() {
    return ((ScannerWithLocInfo)parser.getScanner()).getCurColNum();
  }

  void error(String msg) {
    System.out.println("before printing error");
    error(currLineno(), currColno(), msg);
    System.out.println("after");
  }

  void error(int line, int col, String msg) {
    parser.errorMsg.error(line, col, msg);
  }

  void warning( String message ){
    System.err.println("\n" + curr_filename( ) + ":" + currLineno( )
                            + " Warning: " + message);
  }

  String curr_filename() {
    return ((ScannerWithLocInfo)parser.getScanner()).getCurFilename();
  }

  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action_part00000000(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= opt_statement_lst 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_statement_lst ::= statement 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("Possible cause: forgotten semicolon" ); 
       if (e==null) RESULT = null;
       else RESULT = new StmtList(e, null);    
  
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= statement SEMI statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_lst ::= statement SEMI 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new StmtList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_lst ::= statement statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(slstxleft.getLine(), slstxleft.getColumn(), "Possible cause: forgotten semicolon"); 
       if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement_lst ::= error SEMI 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= declaration_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= evidence_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= query_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_decl ::= TYPE ID 
            {
              Stmt RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new TypeDec(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_decl",5, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= refer_name 
            {
              Ty RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NameTy(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= list_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= array_type 
            {
              Ty RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ArrayTy at = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = at; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= map_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_type ::= LIST LT refer_name GT 
            {
              Ty RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListTy(currLineno(), currColno(), 
      new NameTy(currLineno(), currColno(), sym(typename))); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_type",40, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_type_or_sub ::= refer_name LBRACKET 
            {
              String RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = typename; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_or_sub",43, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array_type_error ::= refer_name LBRACKET LBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_error",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_type_error ::= refer_name RBRACKET RBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_error",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array_type_error ::= refer_name RBRACKET LBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_error",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_type ::= array_type_or_sub RBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ArrayTy(currLineno(), currColno(), 
      new NameTy(currLineno(), currColno(), sym(typename)), 1); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_type ::= array_type_error 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ArrayTy typename = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("array type error, possibly unmatched bracket"); RESULT = typename; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_type ::= array_type LBRACKET RBRACKET 
            {
              ArrayTy RESULT =null;
		Location arrtyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location arrtyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 arrty.dim += 1; 
      RESULT = arrty; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_type ::= array_type LBRACKET 
            {
              ArrayTy RESULT =null;
		Location arrtyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arrtyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("array type error, possibly unmatched left bracket"); RESULT = arrty; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // array_type ::= array_type RBRACKET 
            {
              ArrayTy RESULT =null;
		Location arrtyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arrtyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("array type error, possibly unmatched right bracket"); RESULT = arrty; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT =null;
		Location t1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location t1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(currLineno(), currColno(), t1, t2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_type",41, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opt_parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opt_parenthesized_type_var_lst ::= RPAREN type_var_lst LPAREN 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_parenthesized_type_var_lst ::= extra_lparens type_var_lst RPAREN 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst extra_rparens 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opt_parenthesized_type_var_lst ::= extra_lparens type_var_lst extra_rparens 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",54, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // extra_commas ::= COMMA COMMA 
            {
              String RESULT =null;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extra_commas ::= extra_commas COMMA 
            {
              String RESULT =null;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // extra_types ::= type type 
            {
              String RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location ty2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location ty2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty ty2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_types",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // extra_types ::= extra_types type 
            {
              String RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_types",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_var_lst ::= type ID 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_var_lst ::= type ID COMMA 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("extra comma"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_var_lst ::= type ID extra_commas type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra commas"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_var_lst ::= type ID type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing comma"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_var_lst ::= type COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing id"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_var_lst ::= extra_types ID COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra types"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",55, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression SEMI 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FixedFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("fixed_func_decl",6, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("mising semicolon"); RESULT = new FixedFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, ex);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("fixed_func_decl",6, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new RandomFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("rand_func_decl",7, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rand_func_decl ::= RANDOM type ID error dependency_statement_body 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(fnamexright.getLine(), fnamexright.getColumn(), "malformed type variable list"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("rand_func_decl",7, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), otl, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // number_stmt ::= NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing type name"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list error 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("error in number statement body"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paren ::= LPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("paren",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paren ::= RPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("paren",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // extra_parens ::= paren paren 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_parens",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // extra_parens ::= extra_parens paren 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_parens",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extra_lparens ::= LPAREN LPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_lparens",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // extra_lparens ::= extra_lparens LPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_lparens",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // extra_rparens ::= RPAREN RPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_rparens",52, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // extra_rparens ::= extra_rparens RPAREN 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_rparens",52, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",56, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt_parenthesized_origin_var_list ::= extra_parens origin_var_list extra_parens 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",56, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list extra_parens 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",56, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opt_parenthesized_origin_var_list ::= extra_parens origin_var_list RPAREN 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",56, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",56, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // origin_var_list ::= ID EQ ID extra_commas origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra commas");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // origin_var_list ::= ID EQ EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra equal sign");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // origin_var_list ::= ID EQ ID ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location var2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location var2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra ids");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // origin_var_list ::= ID EQ COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing id");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // origin_var_list ::= ID EQ ID origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing comma");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // origin_var_list ::= ID ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing equal sign");RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",57, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // origin_func_decl ::= ORIGIN type ID extra_lparens type RPAREN 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); 
      RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // origin_func_decl ::= ORIGIN type ID extra_lparens type extra_rparens 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); 
      RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // origin_func_decl ::= ORIGIN type ID LPAREN type extra_rparens 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); 
      RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // origin_func_decl ::= ORIGIN type ID LPAREN type 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing parentheses"); 
      RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // origin_func_decl ::= ORIGIN type ID type RPAREN 
            {
              Stmt RESULT =null;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("missing parentheses"); 
      RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // distinct_decl ::= DISTINCT refer_name id_or_subid_list 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DistinctSymbolDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distinct_decl",10, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",59, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",59, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // id_or_subid_list ::= id_or_subid id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing COMMA"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",59, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // id_or_subid_list ::= id_or_subid extra_commas id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra COMMA"); RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",59, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // brackets ::= LBRACKET 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("brackets",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // brackets ::= RBRACKET 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("brackets",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // brackets ::= brackets LBRACKET 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("brackets",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // brackets ::= brackets RBRACKET 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("brackets",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bracket_error ::= brackets 
            {
              SymbolArray RESULT =null;
		error("missing integer literal in brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bracket_error ::= RBRACKET INT_LITERAL LBRACKET 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bracket_error ::= brackets INT_LITERAL 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bracket_error ::= INT_LITERAL brackets 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bracket_error ::= INT_LITERAL 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bracket_error ::= brackets LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bracket_error ::= LBRACKET INT_LITERAL RBRACKET brackets 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bracket_error ::= brackets LBRACKET INT_LITERAL RBRACKET brackets 
            {
              SymbolArray RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("bracket_error",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // id_or_subid ::= ID 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",58, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id), s.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",58, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // id_or_subid ::= ID bracket_error 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",58, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // distribution_decl ::= DISTRIBUTION ID EQ refer_name LPAREN opt_expression_list RPAREN 
            {
              Stmt RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionDec(currLineno(), currColno(), sym(id),
      new ClassName(currLineno(), currColno(), sym(name)), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distribution_decl",11, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // refer_name ::= ID 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",60, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // refer_name ::= ID DOT refer_name 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",60, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dependency_statement_body ::= EQ expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dependency_statement_body ::= distribution_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // dependency_statement_body ::= IF expression THEN dependency_statement_body elseif_list 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dependency_statement_body ::= LBRACE dependency_statement_body RBRACE 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dependency_statement_body ::= LBRACE dependency_statement_body SEMI RBRACE 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("extra semicolon inside braces!"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dependency_statement_body ::= IF expression dependency_statement_body elseif_list 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing THEN in dependency statement clause, proceed anyway");
    RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // elseif_list ::= ELSE dependency_statement_body 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("elseif_list",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // elseif_list ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("elseif_list",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parameter_decl ::= PARAM type ID 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parameter_decl ::= PARAM type ID COLON expression 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= distribution_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= literal 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= function_call 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= list_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= map_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= quantified_formula 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= set_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= number_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= refer_name 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String e = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolExpr(currLineno(), currColno(), sym(e)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // literal ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.toString().intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // literal ::= INT_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IntExpr(currLineno(), currColno(), e.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DoubleExpr(currLineno(), currColno(), e.doubleValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new BooleanExpr(currLineno(), currColno(), e.booleanValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literal ::= NULL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NullExpr(currLineno(), currColno()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // binop ::= PLUS 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // binop ::= MINUS 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // binop ::= MULT 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // binop ::= DIV 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // binop ::= MOD 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // binop ::= POWER 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // binop ::= LT 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // binop ::= GT 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // binop ::= LEQ 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // binop ::= GEQ 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // binop ::= EQEQ 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // binop ::= NEQ 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // binop ::= AND 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // binop ::= OR 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // binop ::= DOUBLERIGHTARROW 
            {
              String RESULT =null;
		RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("binop",53, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operation_expr ::= expression POWER expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.POWER, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operation_expr ::= expression LT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operation_expr ::= expression GT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operation_expr ::= expression AND expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operation_expr ::= expression OR expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operation_expr ::= expression DOUBLERIGHTARROW expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.IMPLY, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operation_expr ::= array_type_or_sub expression RBRACKET 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), 
      new SymbolExpr(currLineno(), currColno(), sym(e1)), OpExpr.SUB, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operation_expr ::= LPAREN unary_operation_expr error 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operation_expr ::= extra_lparens unary_operation_expr error 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operation_expr ::= unary_operation_expr RPAREN error 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operation_expr ::= unary_operation_expr RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operation_expr ::= expression binop 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operation_expr ::= expression binop error 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // operation_expr ::= binop expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // operation_expr ::= error binop expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), new IntExpr(currLineno(), currColno(), 0), OpExpr.NOT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // unary_operation_expr ::= AT expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.AT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // unary_operation_expr ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // unary_operation_expr ::= LPAREN expression error 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // unary_operation_expr ::= LPAREN expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("mismatched parentheses"); RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // quantified_formula ::= FORALL error 
            {
              Expr RESULT =null;
		 error("error in for all formula"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // quantified_formula ::= EXISTS error 
            {
              Expr RESULT =null;
		 error("error in exists formula"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // quantified_formula ::= FORALL type expression 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing id in for all statement"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // quantified_formula ::= FORALL ID expression 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing type in for all statement"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // quantified_formula ::= FORALL type ID error 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("error in for all expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // quantified_formula ::= EXISTS type expression 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing id in exists statement"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // quantified_formula ::= EXISTS ID expression 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing type in exists statement"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // quantified_formula ::= EXISTS type ID error 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("error in exists expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // function_call ::= refer_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(currLineno(), currColno(), sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",25, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // distribution_expr ::= DISTRIB refer_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionExpr(currLineno(), currColno(), sym(name), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distribution_expr",24, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // opt_expression_list ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expression_list ::= expression 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",26, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",26, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // semi_colon_separated_expression_list ::= expression_list SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // semi_colon_separated_expression_list ::= expression_list SEMI SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // semi_colon_separated_expression_list ::= expression_list SEMI expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2xleft.getLine(), e2), null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // semi_colon_separated_expression_list ::= expression_list SEMI SEMI expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("extra semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2xleft.getLine(), e2), null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // semi_colon_separated_expression_list ::= expression_list semi_colon_separated_expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // semi_colon_separated_expression_list ::= expression_list expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error("missing semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2xleft.getLine(), e2), null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_construct_expression",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expression_pair_list ::= expression RIGHTARROW expression 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",28, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), new ImplicitSetExpr(currLineno(), currColno(), ty, null, null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",28, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT =null;
		 error("expecting number expression here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",28, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // set_expr ::= explicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExplicitSetExpr e = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // set_expr ::= implicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ImplicitSetExpr e = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // set_expr ::= tuple_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		TupleSetExpr e = (TupleSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              ExplicitSetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("explicit_set",32, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // implicit_set ::= LBRACE type ID RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // tuple_set ::= LBRACE expression_list FOR type_var_lst COLON expression RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(currLineno(), currColno(), elst, vars, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // tuple_set ::= LBRACE expression_list FOR type_var_lst RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(currLineno(), currColno(), elst, vars, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // evidence_stmt ::= OBS evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence_stmt",13, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // evidence ::= symbol_evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence",15, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // evidence ::= value_evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence",15, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ValueEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // value_evidence ::= error EQ expression 
            {
              Stmt RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error("incorrect first expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // value_evidence ::= expression EQ error 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("incorrect second expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // symbol_evidence ::= implicit_set EQ explicit_set 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ImplicitSetExpr e1 = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExplicitSetExpr e2 = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("symbol_evidence",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // symbol_evidence ::= error EQ error 
            {
              Stmt RESULT =null;
		error("error in first and second set"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("symbol_evidence",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // query_stmt ::= QUERY query 
            {
              Stmt RESULT =null;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt q = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = q; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // query_stmt ::= QUERY error 
            {
              Stmt RESULT =null;
		 error("invalid query"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // query ::= expression 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QueryStmt(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$BLOGParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
              return CUP$BLOGParser$do_action_part00000000(
                               CUP$BLOGParser$act_num,
                               CUP$BLOGParser$parser,
                               CUP$BLOGParser$stack,
                               CUP$BLOGParser$top);
    }
}

