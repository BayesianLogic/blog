
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Mon Jun 23 15:17:03 PDT 2014
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Mon Jun 23 15:17:03 PDT 2014
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\004\000\002\007\004\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\051\006\000\002\054\004\000\002\053\004\000\002\053" +
    "\005\000\002\052\010\000\002\056\002\000\002\056\003" +
    "\000\002\056\003\000\002\057\004\000\002\057\005\000" +
    "\002\055\004\000\002\055\004\000\002\060\006\000\002" +
    "\060\004\000\002\060\006\000\002\060\005\000\002\060" +
    "\005\000\002\010\010\000\002\010\004\000\002\011\007" +
    "\000\002\011\004\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\061\002\000\002\061\005\000\002" +
    "\062\007\000\002\062\007\000\002\062\006\000\002\062" +
    "\006\000\002\062\005\000\002\062\004\000\002\013\010" +
    "\000\002\013\010\000\002\013\007\000\002\014\005\000" +
    "\002\064\003\000\002\064\005\000\002\064\004\000\002" +
    "\064\005\000\002\063\003\000\002\063\006\000\002\015" +
    "\011\000\002\065\003\000\002\065\005\000\002\036\004" +
    "\000\002\016\005\000\002\016\007\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\005\000\002\025" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\026\005\000\002\027\006\000\002\027\006\000" +
    "\002\035\006\000\002\035\005\000\002\035\003\000\002" +
    "\032\010\000\002\032\006\000\002\033\006\000\002\044" +
    "\003\000\002\044\002\000\002\045\005\000\002\045\003" +
    "\000\002\045\005\000\002\030\005\000\002\030\005\000" +
    "\002\043\004\000\002\043\004\000\002\046\004\000\002" +
    "\046\004\000\002\034\005\000\002\047\007\000\002\047" +
    "\005\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\005\000\002\041\010\000\002\041\006\000\002" +
    "\041\010\000\002\042\011\000\002\042\007\000\002\017" +
    "\004\000\002\017\004\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\020\004\000" +
    "\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\032\002\uffff\003\026\011\022\012\021\013" +
    "\030\014\020\015\025\016\031\017\017\020\035\023\027" +
    "\066\005\001\002\000\006\002\ufff8\063\ufff8\001\002\000" +
    "\012\003\u010a\035\042\055\uffd0\070\u010d\001\002\000\006" +
    "\002\ufff0\063\ufff0\001\002\000\004\002\ufffe\001\002\000" +
    "\006\002\ufff6\063\ufff6\001\002\000\006\002\ufffb\063\u0108" +
    "\001\002\000\006\002\ufff4\063\ufff4\001\002\000\006\002" +
    "\ufff5\063\ufff5\001\002\000\006\002\ufff9\063\ufff9\001\002" +
    "\000\006\002\ufff2\063\ufff2\001\002\000\004\002\u0107\001" +
    "\002\000\050\003\u0101\005\064\007\102\024\101\025\055" +
    "\027\107\030\071\031\114\032\061\033\075\034\072\035" +
    "\042\036\063\040\076\056\057\066\054\070\066\072\070" +
    "\074\065\001\002\000\010\021\040\022\041\035\042\001" +
    "\002\000\012\003\356\021\040\022\041\035\042\001\002" +
    "\000\006\003\354\035\353\001\002\000\006\002\uffef\063" +
    "\uffef\001\002\000\006\002\ufffa\063\ufffa\001\002\000\004" +
    "\035\042\001\002\000\006\002\ufff7\063\ufff7\001\002\000" +
    "\004\035\331\001\002\000\012\003\315\021\040\022\041" +
    "\035\042\001\002\000\050\003\314\005\064\007\102\024" +
    "\101\025\055\027\107\030\071\031\114\032\061\033\075" +
    "\034\072\035\042\036\063\040\076\056\057\066\054\070" +
    "\066\072\070\074\065\001\002\000\006\002\ufff1\063\ufff1" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufff3\063" +
    "\ufff3\001\002\000\010\021\040\022\041\035\042\001\002" +
    "\000\076\002\uffeb\004\uffeb\006\uffeb\010\uffeb\026\uffeb\035" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\001\002\000" +
    "\004\075\312\001\002\000\004\046\307\001\002\000\004" +
    "\046\302\001\002\000\102\002\uffbd\004\uffbd\006\uffbd\010" +
    "\uffbd\026\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\065\300\067\uffbd\070\uffbd\071\uffbd\073" +
    "\uffbd\074\uffbd\075\uffbd\001\002\000\004\035\052\001\002" +
    "\000\076\002\uffec\004\uffec\006\uffec\010\uffec\026\uffec\035" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\067\uffec" +
    "\070\uffec\071\uffec\073\uffec\074\051\075\uffec\001\002\000" +
    "\076\002\uffea\004\uffea\006\uffea\010\uffea\026\uffea\035\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\067\uffea\070" +
    "\uffea\071\uffea\073\uffea\074\047\075\uffea\001\002\000\076" +
    "\002\uffe9\004\uffe9\006\uffe9\010\uffe9\026\uffe9\035\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\067\uffe9\070\uffe9" +
    "\071\uffe9\073\uffe9\074\uffe9\075\uffe9\001\002\000\004\075" +
    "\050\001\002\000\076\002\uffe5\004\uffe5\006\uffe5\010\uffe5" +
    "\026\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\067\uffe5\070\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\001\002\000\004\075\uffe7\001\002\000\010\002\uffba\063" +
    "\uffba\064\053\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\014\003\277\021\040\022" +
    "\041\035\042\072\274\001\002\000\010\021\040\022\041" +
    "\035\042\001\002\000\072\002\uffaf\004\uffaf\006\uffaf\010" +
    "\uffaf\026\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\067\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002\000" +
    "\046\005\064\007\102\024\101\025\055\027\107\030\071" +
    "\031\114\032\061\033\075\034\072\035\042\036\063\040" +
    "\076\056\057\066\054\070\066\072\070\074\065\001\002" +
    "\000\074\002\uff8e\004\uff8e\006\uff8e\010\uff8e\026\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\057" +
    "\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\067\uff8e\070\241" +
    "\071\uff8e\073\uff8e\074\uff8e\075\uff8e\001\002\000\072\002" +
    "\uffaa\004\uffaa\006\uffaa\010\uffaa\026\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\067\uffaa\071\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\001\002\000\072\002\uffb6\004\uffb6\006\uffb6" +
    "\010\uffb6\026\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\067\uffb6\071\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002" +
    "\000\046\005\064\007\102\024\101\025\055\027\107\030" +
    "\071\031\114\032\061\033\075\034\072\035\042\036\063" +
    "\040\076\056\057\066\054\070\066\072\070\074\065\001" +
    "\002\000\046\005\064\007\102\024\101\025\055\027\107" +
    "\030\071\031\114\032\061\033\075\034\072\035\042\036" +
    "\063\040\076\056\057\066\054\070\066\072\070\074\065" +
    "\001\002\000\050\005\064\007\102\024\101\025\055\027" +
    "\107\030\071\031\114\032\061\033\075\034\072\035\042" +
    "\036\063\040\076\056\057\066\054\070\066\072\070\074" +
    "\065\075\uff89\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\072\002\uff78\004\uff78\006" +
    "\uff78\010\uff78\026\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052" +
    "\uff78\053\uff78\054\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\063\uff78\067\uff78\071\uff78\073\uff78\074\uff78\075\uff78\001" +
    "\002\000\054\005\064\007\102\021\040\022\041\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\073\uff89\074\065\001\002\000\072\002\uffac\004" +
    "\uffac\006\uffac\010\uffac\026\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\057\uffac\060\uffac\061\uffac" +
    "\062\uffac\063\uffac\067\uffac\071\uffac\073\uffac\074\uffac\075" +
    "\uffac\001\002\000\072\002\uffae\004\uffae\006\uffae\010\uffae" +
    "\026\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\067" +
    "\uffae\071\uffae\073\uffae\074\uffae\075\uffae\001\002\000\072" +
    "\002\uffb1\004\uffb1\006\uffb1\010\uffb1\026\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1\060" +
    "\uffb1\061\uffb1\062\uffb1\063\uffb1\067\uffb1\071\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\001\002\000\046\002\uffb9\037\126\040" +
    "\117\041\122\042\130\043\123\044\131\046\134\047\127" +
    "\050\136\051\132\052\120\053\125\057\116\060\135\061" +
    "\124\063\uffb9\074\133\001\002\000\072\002\uffad\004\uffad" +
    "\006\uffad\010\uffad\026\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\067\uffad\071\uffad\073\uffad\074\uffad\075\uffad" +
    "\001\002\000\046\005\064\007\102\024\101\025\055\027" +
    "\107\030\071\031\114\032\061\033\075\034\072\035\042" +
    "\036\063\040\076\056\057\066\054\070\066\072\070\074" +
    "\065\001\002\000\072\002\uff77\004\uff77\006\uff77\010\uff77" +
    "\026\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77" +
    "\054\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\067" +
    "\uff77\071\uff77\073\uff77\074\uff77\075\uff77\001\002\000\072" +
    "\002\uff79\004\uff79\006\uff79\010\uff79\026\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\046\uff79\047\uff79" +
    "\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\063\uff79\067\uff79\071\uff79\073\uff79" +
    "\074\uff79\075\uff79\001\002\000\010\021\040\022\041\035" +
    "\042\001\002\000\046\005\064\007\102\024\101\025\055" +
    "\027\107\030\071\031\114\032\061\033\075\034\072\035" +
    "\042\036\063\040\076\056\057\066\054\070\066\072\070" +
    "\074\065\001\002\000\072\002\uffb8\004\uffb8\006\uffb8\010" +
    "\uffb8\026\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\067\uffb8\071\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000" +
    "\072\002\uffb7\004\uffb7\006\uffb7\010\uffb7\026\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\067\uffb7\071\uffb7\073" +
    "\uffb7\074\uffb7\075\uffb7\001\002\000\072\002\uff97\004\uff97" +
    "\006\uff97\010\uff97\026\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\067\uff97\071\uff97\073\uff97\074\uff97\075\uff97" +
    "\001\002\000\072\002\uffb3\004\uffb3\006\uffb3\010\uffb3\026" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\067\uffb3" +
    "\071\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000\072\002" +
    "\uffa9\004\uffa9\006\uffa9\010\uffa9\026\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\067\uffa9\071\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\001\002\000\072\002\uffb2\004\uffb2\006\uffb2" +
    "\010\uffb2\026\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\067\uffb2\071\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002" +
    "\000\072\002\uffb4\004\uffb4\006\uffb4\010\uffb4\026\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4\071\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\001\002\000\072\002\uffb0\004" +
    "\uffb0\006\uffb0\010\uffb0\026\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\067\uffb0\071\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\001\002\000\072\002\uffb5\004\uffb5\006\uffb5\010\uffb5" +
    "\026\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\067" +
    "\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\072" +
    "\002\uffab\004\uffab\006\uffab\010\uffab\026\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\067\uffab\071\uffab\073\uffab" +
    "\074\uffab\075\uffab\001\002\000\044\010\121\037\126\040" +
    "\117\041\122\042\130\043\123\044\131\046\134\047\127" +
    "\050\136\051\132\052\120\053\125\057\116\060\135\061" +
    "\124\074\133\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\046\005\064\007\102\024" +
    "\101\025\055\027\107\030\071\031\114\032\061\033\075" +
    "\034\072\035\042\036\063\040\076\056\057\066\054\070" +
    "\066\072\070\074\065\001\002\000\046\005\064\007\102" +
    "\024\101\025\055\027\107\030\071\031\114\032\061\033" +
    "\075\034\072\035\042\036\063\040\076\056\057\066\054" +
    "\070\066\072\070\074\065\001\002\000\004\072\156\001" +
    "\002\000\046\005\064\007\102\024\101\025\055\027\107" +
    "\030\071\031\114\032\061\033\075\034\072\035\042\036" +
    "\063\040\076\056\057\066\054\070\066\072\070\074\065" +
    "\001\002\000\046\005\064\007\102\024\101\025\055\027" +
    "\107\030\071\031\114\032\061\033\075\034\072\035\042" +
    "\036\063\040\076\056\057\066\054\070\066\072\070\074" +
    "\065\001\002\000\046\005\064\007\102\024\101\025\055" +
    "\027\107\030\071\031\114\032\061\033\075\034\072\035" +
    "\042\036\063\040\076\056\057\066\054\070\066\072\070" +
    "\074\065\001\002\000\046\005\064\007\102\024\101\025" +
    "\055\027\107\030\071\031\114\032\061\033\075\034\072" +
    "\035\042\036\063\040\076\056\057\066\054\070\066\072" +
    "\070\074\065\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\046\005\064\007\102\024" +
    "\101\025\055\027\107\030\071\031\114\032\061\033\075" +
    "\034\072\035\042\036\063\040\076\056\057\066\054\070" +
    "\066\072\070\074\065\001\002\000\046\005\064\007\102" +
    "\024\101\025\055\027\107\030\071\031\114\032\061\033" +
    "\075\034\072\035\042\036\063\040\076\056\057\066\054" +
    "\070\066\072\070\074\065\001\002\000\046\005\064\007" +
    "\102\024\101\025\055\027\107\030\071\031\114\032\061" +
    "\033\075\034\072\035\042\036\063\040\076\056\057\066" +
    "\054\070\066\072\070\074\065\001\002\000\046\005\064" +
    "\007\102\024\101\025\055\027\107\030\071\031\114\032" +
    "\061\033\075\034\072\035\042\036\063\040\076\056\057" +
    "\066\054\070\066\072\070\074\065\001\002\000\050\003" +
    "\143\005\064\007\102\024\101\025\055\027\107\030\071" +
    "\031\114\032\061\033\075\034\072\035\042\036\063\040" +
    "\076\056\057\066\054\070\066\072\070\074\065\001\002" +
    "\000\046\005\064\007\102\024\101\025\055\027\107\030" +
    "\071\031\114\032\061\033\075\034\072\035\042\036\063" +
    "\040\076\056\057\066\054\070\066\072\070\074\065\001" +
    "\002\000\046\005\064\007\102\024\101\025\055\027\107" +
    "\030\071\031\114\032\061\033\075\034\072\035\042\036" +
    "\063\040\076\056\057\066\054\070\066\072\070\074\065" +
    "\001\002\000\046\005\064\007\102\024\101\025\055\027" +
    "\107\030\071\031\114\032\061\033\075\034\072\035\042" +
    "\036\063\040\076\056\057\066\054\070\066\072\070\074" +
    "\065\001\002\000\056\002\uffa0\004\uffa0\006\uffa0\010\uffa0" +
    "\026\uffa0\037\126\040\117\041\122\042\130\043\123\044" +
    "\131\054\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\067\uffa0\071\uffa0\073\uffa0\074\133\075\uffa0\001\002\000" +
    "\072\002\uff9b\004\uff9b\006\uff9b\010\uff9b\026\uff9b\037\126" +
    "\040\117\041\122\042\130\043\123\044\131\046\134\047" +
    "\127\050\136\051\132\052\120\053\125\054\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\062\uff9b\063\uff9b\067\uff9b\071\uff9b\073" +
    "\uff9b\074\133\075\uff9b\001\002\000\056\002\uffa2\004\uffa2" +
    "\006\uffa2\010\uffa2\026\uffa2\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\054\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\067\uffa2\071\uffa2\073\uffa2\074\133\075" +
    "\uffa2\001\002\000\044\037\126\040\117\041\122\042\130" +
    "\043\123\044\131\046\134\047\127\050\136\051\132\052" +
    "\120\053\125\057\116\060\135\061\124\074\133\075\144" +
    "\001\002\000\072\002\uff98\004\uff98\006\uff98\010\uff98\026" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\067\uff98" +
    "\071\uff98\073\uff98\074\uff98\075\uff98\001\002\000\072\002" +
    "\uff99\004\uff99\006\uff99\010\uff99\026\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\067\uff99\071\uff99\073\uff99\074" +
    "\uff99\075\uff99\001\002\000\056\002\uff9f\004\uff9f\006\uff9f" +
    "\010\uff9f\026\uff9f\037\126\040\117\041\122\042\130\043" +
    "\123\044\131\054\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\067\uff9f\071\uff9f\073\uff9f\074\133\075\uff9f\001" +
    "\002\000\072\002\uffa3\004\uffa3\006\uffa3\010\uffa3\026\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\067\uffa3\071" +
    "\uffa3\073\uffa3\074\133\075\uffa3\001\002\000\072\002\uffa5" +
    "\004\uffa5\006\uffa5\010\uffa5\026\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\067\uffa5\071\uffa5\073\uffa5\074\133" +
    "\075\uffa5\001\002\000\056\002\uffa1\004\uffa1\006\uffa1\010" +
    "\uffa1\026\uffa1\037\126\040\117\041\122\042\130\043\123" +
    "\044\131\054\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\067\uffa1\071\uffa1\073\uffa1\074\133\075\uffa1\001\002" +
    "\000\072\002\uffa8\004\uffa8\006\uffa8\010\uffa8\026\uffa8\037" +
    "\uffa8\040\uffa8\041\122\042\130\043\123\044\131\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\067\uffa8\071\uffa8" +
    "\073\uffa8\074\133\075\uffa8\001\002\000\056\002\uff9d\004" +
    "\uff9d\006\uff9d\010\uff9d\026\uff9d\037\126\040\117\041\122" +
    "\042\130\043\123\044\131\054\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\067\uff9d\071\uff9d\073\uff9d\074\133" +
    "\075\uff9d\001\002\000\072\002\uff9a\004\uff9a\006\uff9a\010" +
    "\uff9a\026\uff9a\037\126\040\117\041\122\042\130\043\123" +
    "\044\131\046\134\047\127\050\136\051\132\052\120\053" +
    "\125\054\uff9a\057\116\060\135\061\uff9a\062\uff9a\063\uff9a" +
    "\067\uff9a\071\uff9a\073\uff9a\074\133\075\uff9a\001\002\000" +
    "\072\002\uffa4\004\uffa4\006\uffa4\010\uffa4\026\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\067\uffa4\071\uffa4\073" +
    "\uffa4\074\133\075\uffa4\001\002\000\072\002\uffa6\004\uffa6" +
    "\006\uffa6\010\uffa6\026\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\067\uffa6\071\uffa6\073\uffa6\074\133\075\uffa6" +
    "\001\002\000\046\005\064\007\102\024\101\025\055\027" +
    "\107\030\071\031\114\032\061\033\075\034\072\035\042" +
    "\036\063\040\076\056\057\066\054\070\066\072\070\074" +
    "\065\001\002\000\072\002\uff8b\004\uff8b\006\uff8b\010\uff8b" +
    "\026\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\067" +
    "\uff8b\071\uff8b\073\uff8b\074\uff8b\075\uff8b\001\002\000\004" +
    "\073\166\001\002\000\044\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\067\162\074" +
    "\133\001\002\000\046\005\064\007\102\024\101\025\055" +
    "\027\107\030\071\031\114\032\061\033\075\034\072\035" +
    "\042\036\063\040\076\056\057\066\054\070\066\072\070" +
    "\074\065\001\002\000\046\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\062\164\073" +
    "\uff7d\074\133\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\004\073\uff7e\001\002\000" +
    "\072\002\uff7f\004\uff7f\006\uff7f\010\uff7f\026\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\067\uff7f\071\uff7f\073" +
    "\uff7f\074\uff7f\075\uff7f\001\002\000\056\002\uff9e\004\uff9e" +
    "\006\uff9e\010\uff9e\026\uff9e\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\054\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\067\uff9e\071\uff9e\073\uff9e\074\133\075" +
    "\uff9e\001\002\000\072\002\uffa7\004\uffa7\006\uffa7\010\uffa7" +
    "\026\uffa7\037\uffa7\040\uffa7\041\122\042\130\043\123\044" +
    "\131\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\067" +
    "\uffa7\071\uffa7\073\uffa7\074\133\075\uffa7\001\002\000\072" +
    "\002\uff9c\004\uff9c\006\uff9c\010\uff9c\026\uff9c\037\126\040" +
    "\117\041\122\042\130\043\123\044\131\046\134\047\127" +
    "\050\136\051\132\052\120\053\125\054\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\067\uff9c\071\uff9c\073\uff9c" +
    "\074\133\075\uff9c\001\002\000\004\035\173\001\002\000" +
    "\046\005\064\007\102\024\101\025\055\027\107\030\071" +
    "\031\114\032\061\033\075\034\072\035\042\036\063\040" +
    "\076\056\057\066\054\070\066\072\070\074\065\001\002" +
    "\000\072\002\uff91\004\uff91\006\uff91\010\uff91\026\uff91\037" +
    "\126\040\117\041\122\042\130\043\123\044\131\046\134" +
    "\047\127\050\136\051\132\052\120\053\125\054\uff91\057" +
    "\116\060\135\061\124\062\uff91\063\uff91\067\uff91\071\uff91" +
    "\073\uff91\074\133\075\uff91\001\002\000\072\002\uff96\004" +
    "\uff96\006\uff96\010\uff96\026\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\063\uff96\067\uff96\071\uff96\073\uff96\074\133\075" +
    "\uff96\001\002\000\056\026\uff8e\035\uffec\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\067\uff8e\070\241\073\uff8e\074\051\001\002\000" +
    "\052\026\uff87\037\126\040\117\041\122\042\130\043\123" +
    "\044\131\046\134\047\127\050\136\051\132\052\120\053" +
    "\125\057\116\060\135\061\124\062\235\067\162\073\uff87" +
    "\074\133\001\002\000\004\073\233\001\002\000\006\026" +
    "\212\073\uff8a\001\002\000\004\035\203\001\002\000\006" +
    "\064\205\073\204\001\002\000\072\002\uff74\004\uff74\006" +
    "\uff74\010\uff74\026\uff74\037\uff74\040\uff74\041\uff74\042\uff74" +
    "\043\uff74\044\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052" +
    "\uff74\053\uff74\054\uff74\057\uff74\060\uff74\061\uff74\062\uff74" +
    "\063\uff74\067\uff74\071\uff74\073\uff74\074\uff74\075\uff74\001" +
    "\002\000\050\003\207\005\064\007\102\024\101\025\055" +
    "\027\107\030\071\031\114\032\061\033\075\034\072\035" +
    "\042\036\063\040\076\056\057\066\054\070\066\072\070" +
    "\074\065\001\002\000\044\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\073\211\074" +
    "\133\001\002\000\004\073\210\001\002\000\072\002\uff73" +
    "\004\uff73\006\uff73\010\uff73\026\uff73\037\uff73\040\uff73\041" +
    "\uff73\042\uff73\043\uff73\044\uff73\046\uff73\047\uff73\050\uff73" +
    "\051\uff73\052\uff73\053\uff73\054\uff73\057\uff73\060\uff73\061" +
    "\uff73\062\uff73\063\uff73\067\uff73\071\uff73\073\uff73\074\uff73" +
    "\075\uff73\001\002\000\072\002\uff75\004\uff75\006\uff75\010" +
    "\uff75\026\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75" +
    "\044\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053" +
    "\uff75\054\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75" +
    "\067\uff75\071\uff75\073\uff75\074\uff75\075\uff75\001\002\000" +
    "\010\021\040\022\041\035\042\001\002\000\006\064\227" +
    "\073\230\001\002\000\006\035\216\062\215\001\002\000" +
    "\010\021\040\022\041\035\042\001\002\000\024\021\040" +
    "\022\041\035\042\054\uffdb\055\uffdb\062\221\064\uffdb\071" +
    "\uffdb\073\uffdb\001\002\000\014\054\uffd9\055\uffd9\064\uffd9" +
    "\071\uffd9\073\uffd9\001\002\000\012\021\040\022\041\035" +
    "\042\062\225\001\002\000\012\021\040\022\041\035\042" +
    "\062\223\001\002\000\014\054\uffdc\055\uffdc\064\uffdc\071" +
    "\uffdc\073\uffdc\001\002\000\054\005\uffde\007\uffde\021\uffde" +
    "\022\uffde\024\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040\uffde\056\uffde" +
    "\062\uffde\066\uffde\070\uffde\072\uffde\074\uffde\001\002\000" +
    "\014\054\uffda\055\uffda\064\uffda\071\uffda\073\uffda\001\002" +
    "\000\054\005\uffdd\007\uffdd\021\uffdd\022\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\040\uffdd\056\uffdd\062\uffdd\066\uffdd\070" +
    "\uffdd\072\uffdd\074\uffdd\001\002\000\014\054\uffd8\055\uffd8" +
    "\064\uffd8\071\uffd8\073\uffd8\001\002\000\046\005\064\007" +
    "\102\024\101\025\055\027\107\030\071\031\114\032\061" +
    "\033\075\034\072\035\042\036\063\040\076\056\057\066" +
    "\054\070\066\072\070\074\065\001\002\000\072\002\uff71" +
    "\004\uff71\006\uff71\010\uff71\026\uff71\037\uff71\040\uff71\041" +
    "\uff71\042\uff71\043\uff71\044\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\053\uff71\054\uff71\057\uff71\060\uff71\061" +
    "\uff71\062\uff71\063\uff71\067\uff71\071\uff71\073\uff71\074\uff71" +
    "\075\uff71\001\002\000\044\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\073\232\074" +
    "\133\001\002\000\072\002\uff72\004\uff72\006\uff72\010\uff72" +
    "\026\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72" +
    "\054\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\067" +
    "\uff72\071\uff72\073\uff72\074\uff72\075\uff72\001\002\000\072" +
    "\002\uff76\004\uff76\006\uff76\010\uff76\026\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\uff76\044\uff76\046\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\057\uff76\060" +
    "\uff76\061\uff76\062\uff76\063\uff76\067\uff76\071\uff76\073\uff76" +
    "\074\uff76\075\uff76\001\002\000\050\005\064\007\102\024" +
    "\101\025\055\027\107\030\071\031\114\032\061\033\075" +
    "\034\072\035\042\036\063\040\076\056\057\062\225\066" +
    "\054\070\066\072\070\074\065\001\002\000\050\005\064" +
    "\007\102\024\101\025\055\027\107\030\071\031\114\032" +
    "\061\033\075\034\072\035\042\036\063\040\076\056\057" +
    "\062\223\066\054\070\066\072\070\074\065\001\002\000" +
    "\056\026\uff87\037\126\040\117\041\122\042\130\043\123" +
    "\044\131\046\134\047\127\050\136\051\132\052\120\053" +
    "\125\057\116\060\135\061\124\062\235\063\uff87\071\uff87" +
    "\073\uff87\074\133\075\uff87\001\002\000\014\026\uff88\063" +
    "\uff88\071\uff88\073\uff88\075\uff88\001\002\000\014\026\uff86" +
    "\063\uff86\071\uff86\073\uff86\075\uff86\001\002\000\052\003" +
    "\242\005\064\007\102\024\101\025\055\027\107\030\071" +
    "\031\114\032\061\033\075\034\072\035\042\036\063\040" +
    "\076\056\057\066\054\070\066\071\uff89\072\070\074\065" +
    "\001\002\000\072\002\uff8f\004\uff8f\006\uff8f\010\uff8f\026" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\067\uff8f" +
    "\071\uff8f\073\uff8f\074\uff8f\075\uff8f\001\002\000\004\071" +
    "\245\001\002\000\004\071\uff8a\001\002\000\072\002\uff90" +
    "\004\uff90\006\uff90\010\uff90\026\uff90\037\uff90\040\uff90\041" +
    "\uff90\042\uff90\043\uff90\044\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\057\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\067\uff90\071\uff90\073\uff90\074\uff90" +
    "\075\uff90\001\002\000\044\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\071\247\074" +
    "\133\001\002\000\072\002\uff93\004\uff93\006\uff93\010\uff93" +
    "\026\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\067" +
    "\uff93\071\uff93\073\uff93\074\uff93\075\uff93\001\002\000\004" +
    "\075\261\001\002\000\050\005\064\007\102\024\101\025" +
    "\055\027\107\030\071\031\114\032\061\033\075\034\072" +
    "\035\042\036\063\040\076\056\057\063\256\066\054\070" +
    "\066\072\070\074\065\001\002\000\004\075\255\001\002" +
    "\000\006\063\254\075\uff8a\001\002\000\050\005\uff81\007" +
    "\uff81\024\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\040\uff81\056\uff81\063" +
    "\uff81\066\uff81\070\uff81\072\uff81\074\uff81\001\002\000\072" +
    "\002\uff85\004\uff85\006\uff85\010\uff85\026\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\057\uff85\060" +
    "\uff85\061\uff85\062\uff85\063\uff85\067\uff85\071\uff85\073\uff85" +
    "\074\uff85\075\uff85\001\002\000\050\005\uff80\007\uff80\024" +
    "\uff80\025\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80" +
    "\034\uff80\035\uff80\036\uff80\040\uff80\056\uff80\063\uff80\066" +
    "\uff80\070\uff80\072\uff80\074\uff80\001\002\000\004\075\uff83" +
    "\001\002\000\006\063\254\075\uff82\001\002\000\072\002" +
    "\uff84\004\uff84\006\uff84\010\uff84\026\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\067\uff84\071\uff84\073\uff84\074" +
    "\uff84\075\uff84\001\002\000\044\006\263\037\126\040\117" +
    "\041\122\042\130\043\123\044\131\046\134\047\127\050" +
    "\136\051\132\052\120\053\125\057\116\060\135\061\124" +
    "\074\133\001\002\000\046\005\064\007\102\024\101\025" +
    "\055\027\107\030\071\031\114\032\061\033\075\034\072" +
    "\035\042\036\063\040\076\056\057\066\054\070\066\072" +
    "\070\074\065\001\002\000\072\002\uff8c\004\265\006\uff8c" +
    "\010\uff8c\026\uff8c\037\126\040\117\041\122\042\130\043" +
    "\123\044\131\046\134\047\127\050\136\051\132\052\120" +
    "\053\125\054\uff8c\057\116\060\135\061\124\062\uff8c\063" +
    "\uff8c\067\uff8c\071\uff8c\073\uff8c\074\133\075\uff8c\001\002" +
    "\000\046\005\064\007\102\024\101\025\055\027\107\030" +
    "\071\031\114\032\061\033\075\034\072\035\042\036\063" +
    "\040\076\056\057\066\054\070\066\072\070\074\065\001" +
    "\002\000\072\002\uff8d\004\uff8d\006\uff8d\010\uff8d\026\uff8d" +
    "\037\126\040\117\041\122\042\130\043\123\044\131\046" +
    "\134\047\127\050\136\051\132\052\120\053\125\054\uff8d" +
    "\057\116\060\135\061\124\062\uff8d\063\uff8d\067\uff8d\071" +
    "\uff8d\073\uff8d\074\133\075\uff8d\001\002\000\072\002\uff94" +
    "\004\uff94\006\uff94\010\uff94\026\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\067\uff94\071\uff94\073\uff94\074\133" +
    "\075\uff94\001\002\000\072\002\uff95\004\uff95\006\uff95\010" +
    "\uff95\026\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\067\uff95\071\uff95\073\uff95\074\133\075\uff95\001\002\000" +
    "\004\035\272\001\002\000\046\005\064\007\102\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\074\065\001\002\000\072\002\uff92\004\uff92\006" +
    "\uff92\010\uff92\026\uff92\037\126\040\117\041\122\042\130" +
    "\043\123\044\131\046\134\047\127\050\136\051\132\052" +
    "\120\053\125\054\uff92\057\116\060\135\061\124\062\uff92" +
    "\063\uff92\067\uff92\071\uff92\073\uff92\074\133\075\uff92\001" +
    "\002\000\054\005\064\007\102\021\040\022\041\024\101" +
    "\025\055\027\107\030\071\031\114\032\061\033\075\034" +
    "\072\035\042\036\063\040\076\056\057\066\054\070\066" +
    "\072\070\073\uff89\074\065\001\002\000\072\002\uff7c\004" +
    "\uff7c\006\uff7c\010\uff7c\026\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\046\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\057\uff7c\060\uff7c\061\uff7c" +
    "\062\uff7c\063\uff7c\067\uff7c\071\uff7c\073\uff7c\074\uff7c\075" +
    "\uff7c\001\002\000\072\002\uff7b\004\uff7b\006\uff7b\010\uff7b" +
    "\026\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\067" +
    "\uff7b\071\uff7b\073\uff7b\074\uff7b\075\uff7b\001\002\000\072" +
    "\002\uff7a\004\uff7a\006\uff7a\010\uff7a\026\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\046\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\057\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\063\uff7a\067\uff7a\071\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\001\002\000\004\035\042\001\002\000" +
    "\100\002\uffbc\004\uffbc\006\uffbc\010\uffbc\026\uffbc\035\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\073\uffbc\074\uffbc\075\uffbc\001\002" +
    "\000\010\021\040\022\041\035\042\001\002\000\004\062" +
    "\304\001\002\000\010\021\040\022\041\035\042\001\002" +
    "\000\004\047\306\001\002\000\076\002\uffe4\004\uffe4\006" +
    "\uffe4\010\uffe4\026\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\054\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\067\uffe4\070\uffe4\071\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\001\002\000\004\035\042\001\002\000\004" +
    "\047\311\001\002\000\076\002\uffe8\004\uffe8\006\uffe8\010" +
    "\uffe8\026\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\067\uffe8\070\uffe8\071\uffe8\073\uffe8\074\uffe8\075" +
    "\uffe8\001\002\000\076\002\uffe6\004\uffe6\006\uffe6\010\uffe6" +
    "\026\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\001\002\000\046\002\uff6a\037\126\040\117\041\122\042" +
    "\130\043\123\044\131\046\134\047\127\050\136\051\132" +
    "\052\120\053\125\057\116\060\135\061\124\063\uff6a\074" +
    "\133\001\002\000\006\002\uff69\063\uff69\001\002\000\006" +
    "\002\uffd6\063\uffd6\001\002\000\004\035\317\001\002\000" +
    "\014\021\040\022\041\035\042\054\uffe3\070\323\001\002" +
    "\000\004\054\327\001\002\000\006\054\uffe1\055\uffe1\001" +
    "\002\000\006\054\uffe2\055\uffe2\001\002\000\012\021\040" +
    "\022\041\035\042\071\325\001\002\000\004\071\326\001" +
    "\002\000\006\054\uffe0\055\uffe0\001\002\000\006\054\uffdf" +
    "\055\uffdf\001\002\000\046\005\064\007\102\024\101\025" +
    "\055\027\107\030\071\031\114\032\061\033\075\034\072" +
    "\035\042\036\063\040\076\056\057\066\054\070\066\072" +
    "\070\074\065\001\002\000\046\002\uffd7\037\126\040\117" +
    "\041\122\042\130\043\123\044\131\046\134\047\127\050" +
    "\136\051\132\052\120\053\125\057\116\060\135\061\124" +
    "\063\uffd7\074\133\001\002\000\004\054\332\001\002\000" +
    "\004\035\042\001\002\000\004\070\334\001\002\000\050" +
    "\005\064\007\102\024\101\025\055\027\107\030\071\031" +
    "\114\032\061\033\075\034\072\035\042\036\063\040\076" +
    "\056\057\066\054\070\066\071\uff89\072\070\074\065\001" +
    "\002\000\004\071\336\001\002\000\006\002\uffbe\063\uffbe" +
    "\001\002\000\004\035\340\001\002\000\014\002\uffc0\035" +
    "\uffc0\062\uffc0\063\uffc0\074\350\001\002\000\012\002\uffc4" +
    "\035\340\062\343\063\uffc4\001\002\000\006\002\uffc5\063" +
    "\uffc5\001\002\000\006\035\340\062\223\001\002\000\006" +
    "\035\340\062\225\001\002\000\006\002\uffc2\063\uffc2\001" +
    "\002\000\006\002\uffc1\063\uffc1\001\002\000\006\002\uffc3" +
    "\063\uffc3\001\002\000\004\030\351\001\002\000\004\075" +
    "\352\001\002\000\012\002\uffbf\035\uffbf\062\uffbf\063\uffbf" +
    "\001\002\000\006\002\uffee\063\uffee\001\002\000\006\002" +
    "\uffed\063\uffed\001\002\000\004\035\357\001\002\000\006" +
    "\002\uffd4\063\uffd4\001\002\000\014\021\040\022\041\035" +
    "\042\055\uffe3\070\323\001\002\000\004\055\362\001\002" +
    "\000\006\002\uffd5\063\uffd5\001\002\000\046\005\064\007" +
    "\102\024\101\025\055\027\107\030\071\031\114\032\061" +
    "\033\075\034\072\035\042\036\063\040\076\056\057\066" +
    "\054\070\066\072\070\074\065\001\002\000\046\002\uffbb" +
    "\037\126\040\117\041\122\042\130\043\123\044\131\046" +
    "\134\047\127\050\136\051\132\052\120\053\125\057\116" +
    "\060\135\061\124\063\uffbb\074\133\001\002\000\006\035" +
    "\365\070\366\001\002\000\004\070\371\001\002\000\010" +
    "\021\040\022\041\035\042\001\002\000\004\071\370\001" +
    "\002\000\006\002\uffc6\063\uffc6\001\002\000\012\003\373" +
    "\021\040\022\041\035\042\001\002\000\004\071\375\001" +
    "\002\000\004\071\374\001\002\000\006\002\uffc7\063\uffc7" +
    "\001\002\000\006\002\uffc8\063\uffc8\001\002\000\006\002" +
    "\uff6e\063\uff6e\001\002\000\006\002\uff70\063\uff70\001\002" +
    "\000\044\037\126\040\117\041\122\042\130\043\123\044" +
    "\131\046\134\047\127\050\136\051\132\052\120\053\125" +
    "\054\u0104\057\116\060\135\061\124\074\133\001\002\000" +
    "\010\002\uff6f\054\u0102\063\uff6f\001\002\000\046\005\064" +
    "\007\102\024\101\025\055\027\107\030\071\031\114\032" +
    "\061\033\075\034\072\035\042\036\063\040\076\056\057" +
    "\066\054\070\066\072\070\074\065\001\002\000\046\002" +
    "\uff6c\037\126\040\117\041\122\042\130\043\123\044\131" +
    "\046\134\047\127\050\136\051\132\052\120\053\125\057" +
    "\116\060\135\061\124\063\uff6c\074\133\001\002\000\050" +
    "\003\u0106\005\064\007\102\024\101\025\055\027\107\030" +
    "\071\031\114\032\061\033\075\034\072\035\042\036\063" +
    "\040\076\056\057\066\054\070\066\072\070\074\065\001" +
    "\002\000\046\002\uff6d\037\126\040\117\041\122\042\130" +
    "\043\123\044\131\046\134\047\127\050\136\051\132\052" +
    "\120\053\125\057\116\060\135\061\124\063\uff6d\074\133" +
    "\001\002\000\006\002\uff6b\063\uff6b\001\002\000\004\002" +
    "\001\001\002\000\032\002\ufffc\003\026\011\022\012\021" +
    "\013\030\014\020\015\025\016\031\017\017\020\035\023" +
    "\027\066\005\001\002\000\004\002\ufffd\001\002\000\004" +
    "\055\362\001\002\000\004\055\362\001\002\000\006\055" +
    "\uffd0\070\u010d\001\002\000\004\035\u010e\001\002\000\006" +
    "\035\u0111\054\u0112\001\002\000\004\071\u0110\001\002\000" +
    "\004\055\uffcf\001\002\000\004\071\uffc9\001\002\000\006" +
    "\035\u0114\062\u0113\001\002\000\004\035\u010e\001\002\000" +
    "\010\035\u010e\062\u0115\071\uffca\001\002\000\006\035\u010e" +
    "\062\223\001\002\000\006\035\u010e\062\225\001\002\000" +
    "\004\071\uffcb\001\002\000\004\071\uffcd\001\002\000\004" +
    "\071\uffce\001\002\000\004\071\uffcc\001\002\000\004\055" +
    "\362\001\002\000\006\002\uffd3\063\uffd3\001\002\000\006" +
    "\002\uffd2\063\uffd2\001\002\000\006\002\uffd1\063\uffd1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\040\002\015\003\032\004\006\005\010\006" +
    "\023\007\007\010\012\011\011\012\014\013\033\014\031" +
    "\015\022\016\005\017\013\020\003\001\001\000\002\001" +
    "\001\000\006\061\u010a\065\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\021\376\022\375\023" +
    "\377\024\103\025\102\026\104\027\105\030\112\031\072" +
    "\032\111\033\055\034\110\035\061\037\107\040\077\041" +
    "\066\042\076\065\057\001\001\000\016\050\363\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\016\050" +
    "\354\051\035\052\045\053\044\054\036\065\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\050\315\051\035\052\045\053\044\054\036\065" +
    "\043\001\001\000\042\023\312\024\103\025\102\026\104" +
    "\027\105\030\112\031\072\032\111\033\055\034\110\035" +
    "\061\037\107\040\077\041\066\042\076\065\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\050\042\051\035\052\045\053\044\054\036\065\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\023\073\024\103\025\102\026\104\027" +
    "\105\030\112\031\072\032\111\033\055\034\110\035\061" +
    "\037\107\040\077\041\066\042\076\065\057\001\001\000" +
    "\026\037\274\040\077\041\066\042\076\050\275\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\016\050" +
    "\270\051\035\052\045\053\044\054\036\065\043\001\001" +
    "\000\002\001\001\000\042\023\267\024\103\025\102\026" +
    "\104\027\105\030\112\031\072\032\111\033\055\034\110" +
    "\035\061\037\107\040\077\041\066\042\076\065\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\023\266\024\103\025\102\026\104\027\105\030" +
    "\112\031\072\032\111\033\055\034\110\035\061\037\107" +
    "\040\077\041\066\042\076\065\057\001\001\000\042\023" +
    "\261\024\103\025\102\026\104\027\105\030\112\031\072" +
    "\032\111\033\055\034\110\035\061\037\107\040\077\041" +
    "\066\042\076\065\057\001\001\000\052\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\043\247\044\251\045\252\046\250\065\057\001\001\000" +
    "\042\023\245\024\103\025\102\026\104\027\105\030\112" +
    "\031\072\032\111\033\055\034\110\035\061\037\107\040" +
    "\077\041\066\042\076\065\057\001\001\000\002\001\001" +
    "\000\062\023\176\024\103\025\102\026\104\027\105\030" +
    "\112\031\072\032\111\033\055\034\110\035\061\037\107" +
    "\040\077\041\066\042\076\044\177\045\200\047\157\050" +
    "\201\051\035\052\045\053\044\054\036\065\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\023\174\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\065\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\050\171\051\035\052\045\053\044\054\036\065\043" +
    "\001\001\000\042\023\114\024\103\025\102\026\104\027" +
    "\105\030\112\031\072\032\111\033\055\034\110\035\061" +
    "\037\107\040\077\041\066\042\076\065\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\023\170\024\103\025\102\026" +
    "\104\027\105\030\112\031\072\032\111\033\055\034\110" +
    "\035\061\037\107\040\077\041\066\042\076\065\057\001" +
    "\001\000\042\023\167\024\103\025\102\026\104\027\105" +
    "\030\112\031\072\032\111\033\055\034\110\035\061\037" +
    "\107\040\077\041\066\042\076\065\057\001\001\000\042" +
    "\023\166\024\103\025\102\026\104\027\105\030\112\031" +
    "\072\032\111\033\055\034\110\035\061\037\107\040\077" +
    "\041\066\042\076\065\057\001\001\000\004\034\156\001" +
    "\001\000\042\023\154\024\103\025\102\026\104\027\105" +
    "\030\112\031\072\032\111\033\055\034\110\035\061\037" +
    "\107\040\077\041\066\042\076\065\057\001\001\000\042" +
    "\023\153\024\103\025\102\026\104\027\105\030\112\031" +
    "\072\032\111\033\055\034\110\035\061\037\107\040\077" +
    "\041\066\042\076\065\057\001\001\000\042\023\152\024" +
    "\103\025\102\026\104\027\105\030\112\031\072\032\111" +
    "\033\055\034\110\035\061\037\107\040\077\041\066\042" +
    "\076\065\057\001\001\000\042\023\151\024\103\025\102" +
    "\026\104\027\105\030\112\031\072\032\111\033\055\034" +
    "\110\035\061\037\107\040\077\041\066\042\076\065\057" +
    "\001\001\000\042\023\150\024\103\025\102\026\104\027" +
    "\105\030\112\031\072\032\111\033\055\034\110\035\061" +
    "\037\107\040\077\041\066\042\076\065\057\001\001\000" +
    "\042\023\147\024\103\025\102\026\104\027\105\030\112" +
    "\031\072\032\111\033\055\034\110\035\061\037\107\040" +
    "\077\041\066\042\076\065\057\001\001\000\042\023\146" +
    "\024\103\025\102\026\104\027\105\030\112\031\072\032" +
    "\111\033\055\034\110\035\061\037\107\040\077\041\066" +
    "\042\076\065\057\001\001\000\042\023\145\024\103\025" +
    "\102\026\104\027\105\030\112\031\072\032\111\033\055" +
    "\034\110\035\061\037\107\040\077\041\066\042\076\065" +
    "\057\001\001\000\042\023\144\024\103\025\102\026\104" +
    "\027\105\030\112\031\072\032\111\033\055\034\110\035" +
    "\061\037\107\040\077\041\066\042\076\065\057\001\001" +
    "\000\042\023\141\024\103\025\102\026\104\027\105\030" +
    "\112\031\072\032\111\033\055\034\110\035\061\037\107" +
    "\040\077\041\066\042\076\065\057\001\001\000\042\023" +
    "\140\024\103\025\102\026\104\027\105\030\112\031\072" +
    "\032\111\033\055\034\110\035\061\037\107\040\077\041" +
    "\066\042\076\065\057\001\001\000\042\023\137\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\065\057\001\001\000\042\023\136\024\103\025\102\026" +
    "\104\027\105\030\112\031\072\032\111\033\055\034\110" +
    "\035\061\037\107\040\077\041\066\042\076\065\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\023\160" +
    "\024\103\025\102\026\104\027\105\030\112\031\072\032" +
    "\111\033\055\034\110\035\061\037\107\040\077\041\066" +
    "\042\076\047\157\065\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\023\162\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\065\057\001\001\000\002\001\001\000\044\023\160\024" +
    "\103\025\102\026\104\027\105\030\112\031\072\032\111" +
    "\033\055\034\110\035\061\037\107\040\077\041\066\042" +
    "\076\047\164\065\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\023\173\024\103\025\102" +
    "\026\104\027\105\030\112\031\072\032\111\033\055\034" +
    "\110\035\061\037\107\040\077\041\066\042\076\065\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\023\205\024\103\025\102\026\104\027\105" +
    "\030\112\031\072\032\111\033\055\034\110\035\061\037" +
    "\107\040\077\041\066\042\076\065\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\213\051\035\052\045\053\044\054\036" +
    "\060\212\065\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\213\051\035\052\045\053\044\054\036" +
    "\060\225\065\043\001\001\000\022\050\213\051\035\052" +
    "\045\053\044\054\036\055\217\060\216\065\043\001\001" +
    "\000\002\001\001\000\020\050\213\051\035\052\045\053" +
    "\044\054\036\060\223\065\043\001\001\000\020\050\213" +
    "\051\035\052\045\053\044\054\036\060\221\065\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\023\230\024" +
    "\103\025\102\026\104\027\105\030\112\031\072\032\111" +
    "\033\055\034\110\035\061\037\107\040\077\041\066\042" +
    "\076\065\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\023\235\024" +
    "\103\025\102\026\104\027\105\030\112\031\072\032\111" +
    "\033\055\034\110\035\061\037\107\040\077\041\066\042" +
    "\076\045\237\065\057\001\001\000\044\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\045\236\065\057\001\001\000\004\055\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\044\242\045\243\065\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\023" +
    "\235\024\103\025\102\026\104\027\105\030\112\031\072" +
    "\032\111\033\055\034\110\035\061\037\107\040\077\041" +
    "\066\042\076\043\256\045\257\046\250\065\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\023" +
    "\263\024\103\025\102\026\104\027\105\030\112\031\072" +
    "\032\111\033\055\034\110\035\061\037\107\040\077\041" +
    "\066\042\076\065\057\001\001\000\002\001\001\000\042" +
    "\023\265\024\103\025\102\026\104\027\105\030\112\031" +
    "\072\032\111\033\055\034\110\035\061\037\107\040\077" +
    "\041\066\042\076\065\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\023\272\024\103\025\102\026\104\027\105\030\112\031" +
    "\072\032\111\033\055\034\110\035\061\037\107\040\077" +
    "\041\066\042\076\065\057\001\001\000\002\001\001\000" +
    "\060\023\235\024\103\025\102\026\104\027\105\030\112" +
    "\031\072\032\111\033\055\034\110\035\061\037\107\040" +
    "\077\041\066\042\076\044\177\045\200\050\201\051\035" +
    "\052\045\053\044\054\036\065\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\300" +
    "\001\001\000\002\001\001\000\016\050\302\051\035\052" +
    "\045\053\044\054\036\065\043\001\001\000\002\001\001" +
    "\000\016\050\304\051\035\052\045\053\044\054\036\065" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\050\213\051\035\052" +
    "\045\053\044\054\036\056\317\057\321\060\320\065\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\213\051\035\052\045\053\044\054\036" +
    "\060\323\065\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\023\327\024\103\025\102" +
    "\026\104\027\105\030\112\031\072\032\111\033\055\034" +
    "\110\035\061\037\107\040\077\041\066\042\076\065\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\332\001\001\000\002\001\001\000\046\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\072\032\111\033" +
    "\055\034\110\035\061\037\107\040\077\041\066\042\076" +
    "\044\334\045\243\065\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\340\064\341\001\001\000\002" +
    "\001\001\000\010\055\343\063\340\064\344\001\001\000" +
    "\002\001\001\000\006\063\340\064\346\001\001\000\006" +
    "\063\340\064\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\050\213\051\035" +
    "\052\045\053\044\054\036\056\357\057\321\060\320\065" +
    "\043\001\001\000\004\036\360\001\001\000\002\001\001" +
    "\000\042\023\362\024\103\025\102\026\104\027\105\030" +
    "\112\031\072\032\111\033\055\034\110\035\061\037\107" +
    "\040\077\041\066\042\076\065\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\050\366" +
    "\051\035\052\045\053\044\054\036\065\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\050\371\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\023\u0102\024\103\025\102\026\104" +
    "\027\105\030\112\031\072\032\111\033\055\034\110\035" +
    "\061\037\107\040\077\041\066\042\076\065\057\001\001" +
    "\000\002\001\001\000\042\023\u0104\024\103\025\102\026" +
    "\104\027\105\030\112\031\072\032\111\033\055\034\110" +
    "\035\061\037\107\040\077\041\066\042\076\065\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\u0108\005\010\006\023\007\007\010\012\011" +
    "\011\012\014\013\033\014\031\015\022\016\005\017\013" +
    "\020\003\001\001\000\002\001\001\000\004\036\u011d\001" +
    "\001\000\004\036\u011c\001\001\000\004\061\u011a\001\001" +
    "\000\004\062\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u0119\001\001\000\006\055\u0115\062\u0116\001" +
    "\001\000\004\062\u0118\001\001\000\004\062\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }
  
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, blog.msg.ErrorMsg msg) {
    this(s, sf);
    errorMsg = msg;
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) info;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), message);
    } else errorMsg.error(0, 0, message);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) {
    try {
      try_do_reduce(cur_token.sym, false);
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }
  }
  
  public void syntax_error(Symbol cur_token) {
   if (cur_token instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) cur_token;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), "syntax error at " + s);
    } else errorMsg.error(0, 0, "the last encounterd token #" + cur_token);
  }

  private void try_do_reduce(int sym, boolean debug) throws java.lang.Exception {
    Symbol lhs_sym;
    short handle_size, lhs_sym_num;
    int act;
    // try reduce
    act = get_action(((Symbol)stack.peek()).parse_state, sym);
    while (act < 0) {
        /* perform the action for the reduce */
        lhs_sym = do_action((-act)-1, this, stack, tos);

        /* look up information about the production */
        lhs_sym_num = production_tab[(-act)-1][0];
        handle_size = production_tab[(-act)-1][1];
        
        if (debug) {
          debug_reduce((-act)-1, lhs_sym_num, handle_size);
        }

        /* pop the handle off the stack */
        for (int i = 0; i < handle_size; i++) {
          stack.pop();
          tos--;
        }
        
        /* look up the state to go to from the one popped back to */
        act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);

        /* shift to that state */
        lhs_sym.parse_state = act;
        
        if (debug) {
          debug_message("# Reduce rule: top state " +
           ((Symbol)stack.peek()).parse_state +
           ", lhs sym " + lhs_sym_num + " -> state " + act); 
        }
        
        stack.push(lhs_sym);
        tos++;
        act = get_action(((Symbol)stack.peek()).parse_state, error_sym());
    }

  }
  
  /**
   * first try to use the default error recover
   * if it doesnot succeed, try to do reduce
   */
  protected boolean error_recovery(boolean debug) throws java.lang.Exception {
    if (debug) {
      debug_message("trying to recover error");
    }

    try_do_reduce(error_sym(), debug);
    boolean flag = super.error_recovery(debug); // try normal recovery
    return flag;
  }

// WC: Methods that get automatically invoked when using the builtin error recovery mechanism.  
/*
public void report_error(String message, Object info)
    This method should be called whenever an error message is to be issued. In the default implementation of this method, the first parameter provides the text of a message which is printed on System.err and the second parameter is simply ignored. It is very typical to override this method in order to provide a more sophisticated error reporting mechanism. 
public void report_fatal_error(String message, Object info)
    This method should be called whenever a non-recoverable error occurs. It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(), and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early). 
public void syntax_error(Symbol cur_token)
    This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted). In the default implementation it calls: report_error("Syntax error", null);. 
public void unrecovered_syntax_error(Symbol cur_token)
    This method is called by the parser if it is unable to recover from a syntax error. In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);. 
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {



  static blog.symbol.Symbol sym(String s) {
           return blog.symbol.Symbol.Symbol(s);
  }

  void error(int line, int col, String msg) {
    parser.errorMsg.error(line, col, msg);
  }

  void error(Location s, String msg){
    parser.errorMsg.error(s.getLine(), s.getColumn(), msg);
  }



  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action_part00000000(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= opt_statement_lst 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement SEMI statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= statement SEMI 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 if (e!=null) RESULT = new StmtList(e, null); 
                        else RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_lst ::= statement 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(exright, "missing ;"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= declaration_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= evidence_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= query_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= error 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_decl ::= TYPE ID 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new TypeDec(tyxleft.getLine(), tyxleft.getColumn(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_decl",5, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_decl ::= TYPE error 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tyxright, "malformed or missing id"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_decl",5, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= refer_name 
            {
              Ty RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= list_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= array_type 
            {
              Ty RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ArrayTy at = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = at; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= map_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_type ::= LIST LT refer_name GT 
            {
              Ty RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListTy(lxleft.getLine(), lxleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename))); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_type_or_sub ::= refer_name LBRACKET 
            {
              String RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = typename; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_or_sub",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array_type ::= array_type_or_sub RBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ArrayTy(typenamexleft.getLine(), typenamexleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)), 1); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",41, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_type ::= array_type LBRACKET RBRACKET 
            {
              ArrayTy RESULT =null;
		Location arrtyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location arrtyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 arrty.dim += 1; 
      RESULT = arrty; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",41, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location t1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location t1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(mxleft.getLine(), mxleft.getColumn(), t1, t2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_type",40, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opt_parenthesized_type_var_lst ::= parenthesized_type_var_lst 
            {
              FieldList RESULT =null;
		Location tvlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tvlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tvl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = tvl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opt_parenthesized_type_var_lst ::= type_var_lst 
            {
              FieldList RESULT =null;
		Location tvlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tvlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tvl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tvlxleft, "missing parentheses");
      error(tvlxright, "missing parentheses");
      RESULT = tvl;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parenthesized_type_var_lst",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parenthesized_type_var_lst",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // extra_commas ::= COMMA COMMA 
            {
              Object RESULT =null;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",43, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // extra_commas ::= extra_commas COMMA 
            {
              Object RESULT =null;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",43, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_var_lst ::= type ID 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_var_lst ::= type ID extra_commas type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(idxright, "extra commas"); 
      RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_var_lst ::= type ID type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(idxright, "missing comma"); 
      RESULT = new FieldList(sym(id), ty, tl);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_var_lst ::= type COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tyxright, "missing id"); 
      RESULT = tl;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression 
            {
              Stmt RESULT =null;
		Location fxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location fxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object fx = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FixedFuncDec(fxxleft.getLine(), fxxleft.getColumn(), sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("fixed_func_decl",6, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fixed_func_decl ::= FIXED error 
            {
              Stmt RESULT =null;
		Location fxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location fxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object fx = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(fxxright, "error in fixed function defition");
    RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("fixed_func_decl",6, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body 
            {
              Stmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new RandomFuncDec(rxleft.getLine(), rxleft.getColumn(), sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("rand_func_decl",7, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rand_func_decl ::= RANDOM error 
            {
              Stmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(rxright, "error in random function definition");
  RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("rand_func_decl",7, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberDec(nxleft.getLine(), nxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), otl, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // number_stmt ::= NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(nsxright, "missing type name"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // number_stmt ::= NUMSIGN error dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(nsxright, "error in origin variable list"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // origin_var_list ::= ID EQ ID extra_commas origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra commas");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // origin_var_list ::= ID EQ COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(exright, "missing origin var name");
      RESULT = n;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // origin_var_list ::= ID EQ ID origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(varxright, "missing comma");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // origin_var_list ::= ID ID 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(funcxright, "missing =");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OriginFuncDec(oxleft.getLine(), oxleft.getColumn(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // origin_func_decl ::= ORIGIN type ID LPAREN error RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(lpxright, "syntax error in type argument of origin function");
      RESULT = null;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // origin_func_decl ::= ORIGIN type LPAREN type RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(ret_typexright, "missing type or origin function name");
      RESULT = null;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // distinct_decl ::= DISTINCT refer_name id_or_subid_list 
            {
              Stmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DistinctSymbolDec(dxleft.getLine(), dxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distinct_decl",10, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // id_or_subid_list ::= id_or_subid id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(exright, "missing COMMA"); 
        RESULT = new SymbolArrayList(e, n);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id_or_subid_list ::= id_or_subid extra_commas id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra COMMA"); 
      RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // id_or_subid ::= ID 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id), s.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // distribution_decl ::= DISTRIBUTION ID EQ refer_name LPAREN opt_expression_list RPAREN 
            {
              Stmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionDec(dxleft.getLine(), dxleft.getColumn(), sym(id),
      sym(name), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distribution_decl",11, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // refer_name ::= ID 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // refer_name ::= ID DOT refer_name 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dependency_statement_body ::= DISTRIB expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",28, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameter_decl ::= PARAM type ID 
            {
              Stmt RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameter_decl ::= PARAM type ID COLON expression 
            {
              Stmt RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= literal 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= function_call 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FuncCallExpr e = (FuncCallExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= list_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= map_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		MapInitExpr e = (MapInitExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= quantified_formula 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= set_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= number_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= if_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= case_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.toString().intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= INT_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IntExpr(exleft.getLine(), exleft.getColumn(), e.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DoubleExpr(exleft.getLine(), exleft.getColumn(), e.doubleValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new BooleanExpr(exleft.getLine(), exleft.getColumn(), e.booleanValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= NULL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NullExpr(exleft.getLine(), exleft.getColumn()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operation_expr ::= expression POWER expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.POWER, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operation_expr ::= expression LT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operation_expr ::= expression GT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operation_expr ::= expression AND expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operation_expr ::= expression OR expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operation_expr ::= expression DOUBLERIGHTARROW expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.IMPLY, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operation_expr ::= expression LBRACKET error 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "operation expression syntax error"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(mxleft.getLine(), mxleft.getColumn(), new IntExpr(exleft.getLine(), exleft.getColumn(), 0), OpExpr.MINUS, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(nxleft.getLine(), nxleft.getColumn(), null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unary_operation_expr ::= AT expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(axleft.getLine(), axleft.getColumn(), null, OpExpr.AT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unary_operation_expr ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(fxleft.getLine(), fxleft.getColumn(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(exxleft.getLine(), exxleft.getColumn(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function_call ::= refer_name LPAREN opt_expression_list RPAREN 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_call ::= refer_name LPAREN error 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "error in body of function call"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function_call ::= refer_name 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_expr ::= IF expression THEN expression ELSE expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("if_expr",24, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // if_expr ::= IF expression THEN expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("if_expr",24, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_expr ::= CASE expression IN map_construct_expression 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		MapInitExpr e2 = (MapInitExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 
    if (e1 == null) {
      error(e1xleft, "error in case expression");
      RESULT = null;
    } else if (e2 == null) {
      error(e2xleft, "error in case expression");
      RESULT = null;
    } else {
      RESULT = new CaseExpr(cxleft.getLine(), cxleft.getColumn(), e1, e2.values);
    } 
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("case_expr",25, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // opt_expression_list ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_list ::= expression 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_list ::= expression extra_commas expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra commas in expression list");
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // semi_colon_separated_expression_list ::= semi_ending_expression_list semi_colon_separated_expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // semi_colon_separated_expression_list ::= semi_ending_expression_list expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), 
    new ExprList(new ListInitExpr(e2xleft.getLine(), e2xleft.getColumn(), e2), null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // semi_ending_expression_list ::= expression_list SEMI 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_ending_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // semi_ending_expression_list ::= semi_ending_expression_list SEMI 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(sxleft, "extra semicolon"); 
      RESULT = e;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_ending_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              MapInitExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_construct_expression",26, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_pair_list ::= expression RIGHTARROW expression 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), new ImplicitSetExpr(tyxleft.getLine(), tyxleft.getColumn(), ty, null, null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "expecting number expression here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // set_expr ::= explicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExplicitSetExpr e = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // set_expr ::= implicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ImplicitSetExpr e = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // set_expr ::= tuple_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		TupleSetExpr e = (TupleSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              ExplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("explicit_set",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // implicit_set ::= LBRACE type ID RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // implicit_set ::= LBRACE type ID COLON error RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(errxleft, "malformed expression in implicit set"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tuple_set ::= LBRACE expression_list FOR type_var_lst COLON expression RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",32, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tuple_set ::= LBRACE expression_list FOR type_var_lst RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",32, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // evidence_stmt ::= OBS evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence_stmt",13, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // evidence_stmt ::= OBS error 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence_stmt",13, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // evidence ::= value_evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence",15, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ValueEvidence(e1xleft.getLine(), e1xleft.getColumn(), e1, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // value_evidence ::= error EQ expression 
            {
              Stmt RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error(errxleft, "incorrect first expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // value_evidence ::= expression EQ error 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error(errxleft, "incorrect second expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // query_stmt ::= QUERY expression 
            {
              Stmt RESULT =null;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QueryStmt(qxleft.getLine(), qxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // query_stmt ::= QUERY error 
            {
              Stmt RESULT =null;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(qxright, "invalid query"); 
      RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$BLOGParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
              return CUP$BLOGParser$do_action_part00000000(
                               CUP$BLOGParser$act_num,
                               CUP$BLOGParser$parser,
                               CUP$BLOGParser$stack,
                               CUP$BLOGParser$top);
    }
}

