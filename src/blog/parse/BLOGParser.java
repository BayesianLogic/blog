
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Mon Jun 23 08:35:48 PDT 2014
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Mon Jun 23 08:35:48 PDT 2014
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\005\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\004\000\002\007\004\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\006\000\002\054\004\000\002\053\004" +
    "\000\002\053\005\000\002\052\010\000\002\056\002\000" +
    "\002\056\003\000\002\056\003\000\002\057\004\000\002" +
    "\057\005\000\002\057\004\000\002\055\004\000\002\055" +
    "\004\000\002\060\006\000\002\060\004\000\002\060\006" +
    "\000\002\060\005\000\002\060\005\000\002\010\010\000" +
    "\002\011\007\000\002\012\006\000\002\012\005\000\002" +
    "\012\005\000\002\061\002\000\002\061\005\000\002\062" +
    "\007\000\002\062\007\000\002\062\006\000\002\062\006" +
    "\000\002\062\005\000\002\062\004\000\002\013\010\000" +
    "\002\013\010\000\002\013\007\000\002\014\005\000\002" +
    "\064\003\000\002\064\005\000\002\064\004\000\002\064" +
    "\005\000\002\063\003\000\002\063\006\000\002\015\011" +
    "\000\002\065\003\000\002\065\005\000\002\036\004\000" +
    "\002\016\005\000\002\016\007\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\006\000\002\025\005\000\002\025\003" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\005\000\002\027\006\000\002\027\006\000\002" +
    "\035\006\000\002\035\005\000\002\035\003\000\002\032" +
    "\010\000\002\032\006\000\002\033\006\000\002\044\003" +
    "\000\002\044\002\000\002\045\005\000\002\045\003\000" +
    "\002\045\005\000\002\030\005\000\002\030\005\000\002" +
    "\043\004\000\002\043\004\000\002\046\004\000\002\046" +
    "\004\000\002\034\005\000\002\047\007\000\002\047\005" +
    "\000\002\031\004\000\002\031\004\000\002\031\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\040\005\000\002\041\010\000\002\041\006\000\002\041" +
    "\010\000\002\042\011\000\002\042\007\000\002\017\004" +
    "\000\002\017\004\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\020\004\000\002" +
    "\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\032\002\uffff\003\026\011\021\012\022\013" +
    "\030\014\020\015\025\016\031\017\017\020\035\023\027" +
    "\066\004\001\002\000\012\003\u010f\035\042\055\uffcd\070" +
    "\u0112\001\002\000\034\002\ufff3\003\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\023" +
    "\ufff3\063\ufff3\066\ufff3\001\002\000\034\002\uffec\003\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\023\uffec\063\uffec\066\uffec\001\002\000\006" +
    "\002\ufffe\003\u010e\001\002\000\034\002\ufff2\003\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\023\ufff2\063\ufff2\066\ufff2\001\002\000\034\002" +
    "\ufffc\003\026\011\021\012\022\013\030\014\020\015\025" +
    "\016\031\017\017\020\035\023\027\063\344\066\004\001" +
    "\002\000\034\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\063" +
    "\ufff0\066\ufff0\001\002\000\034\002\ufff1\003\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\023\ufff1\063\ufff1\066\ufff1\001\002\000\034\002\ufff4" +
    "\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\023\ufff4\063\ufff4\066\ufff4\001\002" +
    "\000\034\002\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\023\uffee\063\uffee" +
    "\066\uffee\001\002\000\004\002\u010d\001\002\000\050\003" +
    "\u0107\005\064\007\101\024\102\025\055\027\107\030\071" +
    "\031\114\032\057\033\075\034\072\035\042\036\063\040" +
    "\100\056\060\066\054\070\065\072\070\074\067\001\002" +
    "\000\010\021\040\022\041\035\042\001\002\000\006\003" +
    "\371\035\370\001\002\000\010\021\040\022\041\035\042" +
    "\001\002\000\034\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\023\uffeb" +
    "\063\uffeb\066\uffeb\001\002\000\034\002\ufff5\003\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\023\ufff5\063\ufff5\066\ufff5\001\002\000\004\035" +
    "\042\001\002\000\010\002\ufff6\003\ufff6\063\340\001\002" +
    "\000\004\035\332\001\002\000\010\021\040\022\041\035" +
    "\042\001\002\000\050\003\314\005\064\007\101\024\102" +
    "\025\055\027\107\030\071\031\114\032\057\033\075\034" +
    "\072\035\042\036\063\040\100\056\060\066\054\070\065" +
    "\072\070\074\067\001\002\000\034\002\uffed\003\uffed\011" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\023\uffed\063\uffed\066\uffed\001\002\000\004\002" +
    "\000\001\002\000\034\002\uffef\003\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\023" +
    "\uffef\063\uffef\066\uffef\001\002\000\010\021\040\022\041" +
    "\035\042\001\002\000\124\002\uffe7\003\uffe7\004\uffe7\006" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\023\uffe7\026\uffe7\035\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\073\uffe7\074\uffe7\075\uffe7\001\002\000" +
    "\004\075\312\001\002\000\004\046\307\001\002\000\004" +
    "\046\302\001\002\000\130\002\uffba\003\uffba\004\uffba\006" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\023\uffba\026\uffba\035\uffba\037" +
    "\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\065\300" +
    "\066\uffba\067\uffba\070\uffba\071\uffba\073\uffba\074\uffba\075" +
    "\uffba\001\002\000\004\035\052\001\002\000\124\002\uffe8" +
    "\003\uffe8\004\uffe8\006\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8" +
    "\026\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\073\uffe8\074\051" +
    "\075\uffe8\001\002\000\124\002\uffe6\003\uffe6\004\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\023\uffe6\026\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\066\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\073\uffe6\074\047\075\uffe6\001\002\000" +
    "\124\002\uffe5\003\uffe5\004\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\023\uffe5\026\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\001\002\000\004\075\050\001\002" +
    "\000\124\002\uffe1\003\uffe1\004\uffe1\006\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\023\uffe1\026\uffe1\035\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\057\uffe1\060\uffe1\061" +
    "\uffe1\062\uffe1\063\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\001\002\000\004\075\uffe3\001" +
    "\002\000\036\002\uffb7\003\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\023\uffb7\063" +
    "\uffb7\064\053\066\uffb7\001\002\000\046\005\064\007\101" +
    "\024\102\025\055\027\107\030\071\031\114\032\057\033" +
    "\075\034\072\035\042\036\063\040\100\056\060\066\054" +
    "\070\065\072\070\074\067\001\002\000\014\003\276\021" +
    "\040\022\041\035\042\072\274\001\002\000\010\021\040" +
    "\022\041\035\042\001\002\000\120\002\uffac\003\uffac\004" +
    "\uffac\006\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\023\uffac\026\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\067\uffac" +
    "\071\uffac\073\uffac\074\uffac\075\uffac\001\002\000\120\002" +
    "\uffa7\003\uffa7\004\uffa7\006\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\023" +
    "\uffa7\026\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\066\uffa7\067\uffa7\071\uffa7\073\uffa7\074\uffa7\075\uffa7\001" +
    "\002\000\046\005\064\007\101\024\102\025\055\027\107" +
    "\030\071\031\114\032\057\033\075\034\072\035\042\036" +
    "\063\040\100\056\060\066\054\070\065\072\070\074\067" +
    "\001\002\000\122\002\uff8b\003\uff8b\004\uff8b\006\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\023\uff8b\026\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\066\uff8b\067\uff8b\070\241\071\uff8b" +
    "\073\uff8b\074\uff8b\075\uff8b\001\002\000\120\002\uffb3\003" +
    "\uffb3\004\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\023\uffb3\026" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\066\uffb3" +
    "\067\uffb3\071\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000" +
    "\046\005\064\007\101\024\102\025\055\027\107\030\071" +
    "\031\114\032\057\033\075\034\072\035\042\036\063\040" +
    "\100\056\060\066\054\070\065\072\070\074\067\001\002" +
    "\000\046\005\064\007\101\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\072\070\074\067\001" +
    "\002\000\046\005\064\007\101\024\102\025\055\027\107" +
    "\030\071\031\114\032\057\033\075\034\072\035\042\036" +
    "\063\040\100\056\060\066\054\070\065\072\070\074\067" +
    "\001\002\000\120\002\uff75\003\uff75\004\uff75\006\uff75\010" +
    "\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\023\uff75\026\uff75\037\uff75\040\uff75\041" +
    "\uff75\042\uff75\043\uff75\044\uff75\046\uff75\047\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\057\uff75\060\uff75\061" +
    "\uff75\062\uff75\063\uff75\066\uff75\067\uff75\071\uff75\073\uff75" +
    "\074\uff75\075\uff75\001\002\000\050\005\064\007\101\024" +
    "\102\025\055\027\107\030\071\031\114\032\057\033\075" +
    "\034\072\035\042\036\063\040\100\056\060\066\054\070" +
    "\065\072\070\074\067\075\uff86\001\002\000\054\005\064" +
    "\007\101\021\040\022\041\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\072\070\073\uff86\074" +
    "\067\001\002\000\120\002\uffa9\003\uffa9\004\uffa9\006\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\020\uffa9\023\uffa9\026\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\066\uffa9\067\uffa9\071\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\001\002\000\120\002\uffab\003\uffab" +
    "\004\uffab\006\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\023\uffab\026\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\066\uffab\067" +
    "\uffab\071\uffab\073\uffab\074\uffab\075\uffab\001\002\000\074" +
    "\002\uffb6\003\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\037\127\040\120" +
    "\041\123\042\131\043\124\044\132\046\134\047\130\050" +
    "\137\051\133\052\122\053\126\057\121\060\136\061\125" +
    "\063\uffb6\066\uffb6\074\135\001\002\000\120\002\uffae\003" +
    "\uffae\004\uffae\006\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\023\uffae\026" +
    "\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\066\uffae" +
    "\067\uffae\071\uffae\073\uffae\074\uffae\075\uffae\001\002\000" +
    "\120\002\uffaa\003\uffaa\004\uffaa\006\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\023\uffaa\026\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\054\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\066\uffaa\067\uffaa\071\uffaa\073\uffaa\074\uffaa\075" +
    "\uffaa\001\002\000\120\002\uff76\003\uff76\004\uff76\006\uff76" +
    "\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016" +
    "\uff76\017\uff76\020\uff76\023\uff76\026\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\044\uff76\046\uff76\047\uff76\050" +
    "\uff76\051\uff76\052\uff76\053\uff76\054\uff76\057\uff76\060\uff76" +
    "\061\uff76\062\uff76\063\uff76\066\uff76\067\uff76\071\uff76\073" +
    "\uff76\074\uff76\075\uff76\001\002\000\120\002\uff74\003\uff74" +
    "\004\uff74\006\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014" +
    "\uff74\015\uff74\016\uff74\017\uff74\020\uff74\023\uff74\026\uff74" +
    "\037\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\046" +
    "\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\066\uff74\067" +
    "\uff74\071\uff74\073\uff74\074\uff74\075\uff74\001\002\000\046" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\046\005\064\007\101\024\102\025\055\027\107\030\071" +
    "\031\114\032\057\033\075\034\072\035\042\036\063\040" +
    "\100\056\060\066\054\070\065\072\070\074\067\001\002" +
    "\000\010\021\040\022\041\035\042\001\002\000\120\002" +
    "\uffb5\003\uffb5\004\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\023" +
    "\uffb5\026\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\066\uffb5\067\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\120\002\uffb4\003\uffb4\004\uffb4\006\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\023\uffb4\026\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\066\uffb4\067\uffb4\071\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\001\002\000\120\002\uff94\003\uff94\004\uff94" +
    "\006\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\023\uff94\026\uff94\037\uff94" +
    "\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\066\uff94\067\uff94\071" +
    "\uff94\073\uff94\074\uff94\075\uff94\001\002\000\120\002\uffb0" +
    "\003\uffb0\004\uffb0\006\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\023\uffb0" +
    "\026\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\066" +
    "\uffb0\067\uffb0\071\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002" +
    "\000\120\002\uffa6\003\uffa6\004\uffa6\006\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\023\uffa6\026\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\066\uffa6\067\uffa6\071\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\001\002\000\120\002\uffaf\003\uffaf\004\uffaf\006" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\023\uffaf\026\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\066\uffaf\067\uffaf\071\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\001\002\000\120\002\uffb1\003" +
    "\uffb1\004\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\023\uffb1\026" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\066\uffb1" +
    "\067\uffb1\071\uffb1\073\uffb1\074\uffb1\075\uffb1\001\002\000" +
    "\120\002\uffad\003\uffad\004\uffad\006\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\023\uffad\026\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\057\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\066\uffad\067\uffad\071\uffad\073\uffad\074\uffad\075" +
    "\uffad\001\002\000\120\002\uffb2\003\uffb2\004\uffb2\006\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\023\uffb2\026\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\066\uffb2\067\uffb2\071\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\001\002\000\120\002\uffa8\003\uffa8" +
    "\004\uffa8\006\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\023\uffa8\026\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\066\uffa8\067" +
    "\uffa8\071\uffa8\073\uffa8\074\uffa8\075\uffa8\001\002\000\004" +
    "\035\116\001\002\000\046\005\064\007\101\024\102\025" +
    "\055\027\107\030\071\031\114\032\057\033\075\034\072" +
    "\035\042\036\063\040\100\056\060\066\054\070\065\072" +
    "\070\074\067\001\002\000\120\002\uff8e\003\uff8e\004\uff8e" +
    "\006\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\023\uff8e\026\uff8e\037\127" +
    "\040\120\041\123\042\131\043\124\044\132\046\134\047" +
    "\130\050\137\051\133\052\122\053\126\054\uff8e\057\121" +
    "\060\136\061\125\062\uff8e\063\uff8e\066\uff8e\067\uff8e\071" +
    "\uff8e\073\uff8e\074\135\075\uff8e\001\002\000\046\005\064" +
    "\007\101\024\102\025\055\027\107\030\071\031\114\032" +
    "\057\033\075\034\072\035\042\036\063\040\100\056\060" +
    "\066\054\070\065\072\070\074\067\001\002\000\046\005" +
    "\064\007\101\024\102\025\055\027\107\030\071\031\114" +
    "\032\057\033\075\034\072\035\042\036\063\040\100\056" +
    "\060\066\054\070\065\072\070\074\067\001\002\000\046" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\046\005\064\007\101\024\102\025\055\027\107\030\071" +
    "\031\114\032\057\033\075\034\072\035\042\036\063\040" +
    "\100\056\060\066\054\070\065\072\070\074\067\001\002" +
    "\000\046\005\064\007\101\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\072\070\074\067\001" +
    "\002\000\046\005\064\007\101\024\102\025\055\027\107" +
    "\030\071\031\114\032\057\033\075\034\072\035\042\036" +
    "\063\040\100\056\060\066\054\070\065\072\070\074\067" +
    "\001\002\000\046\005\064\007\101\024\102\025\055\027" +
    "\107\030\071\031\114\032\057\033\075\034\072\035\042" +
    "\036\063\040\100\056\060\066\054\070\065\072\070\074" +
    "\067\001\002\000\046\005\064\007\101\024\102\025\055" +
    "\027\107\030\071\031\114\032\057\033\075\034\072\035" +
    "\042\036\063\040\100\056\060\066\054\070\065\072\070" +
    "\074\067\001\002\000\046\005\064\007\101\024\102\025" +
    "\055\027\107\030\071\031\114\032\057\033\075\034\072" +
    "\035\042\036\063\040\100\056\060\066\054\070\065\072" +
    "\070\074\067\001\002\000\046\005\064\007\101\024\102" +
    "\025\055\027\107\030\071\031\114\032\057\033\075\034" +
    "\072\035\042\036\063\040\100\056\060\066\054\070\065" +
    "\072\070\074\067\001\002\000\046\005\064\007\101\024" +
    "\102\025\055\027\107\030\071\031\114\032\057\033\075" +
    "\034\072\035\042\036\063\040\100\056\060\066\054\070" +
    "\065\072\070\074\067\001\002\000\046\005\064\007\101" +
    "\024\102\025\055\027\107\030\071\031\114\032\057\033" +
    "\075\034\072\035\042\036\063\040\100\056\060\066\054" +
    "\070\065\072\070\074\067\001\002\000\046\005\064\007" +
    "\101\024\102\025\055\027\107\030\071\031\114\032\057" +
    "\033\075\034\072\035\042\036\063\040\100\056\060\066" +
    "\054\070\065\072\070\074\067\001\002\000\050\003\143" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\046\005\064\007\101\024\102\025\055\027\107\030\071" +
    "\031\114\032\057\033\075\034\072\035\042\036\063\040" +
    "\100\056\060\066\054\070\065\072\070\074\067\001\002" +
    "\000\046\005\064\007\101\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\072\070\074\067\001" +
    "\002\000\104\002\uff9d\003\uff9d\004\uff9d\006\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\023\uff9d\026\uff9d\037\127\040\120\041\123" +
    "\042\131\043\124\044\132\054\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\066\uff9d\067\uff9d\071\uff9d\073\uff9d" +
    "\074\135\075\uff9d\001\002\000\120\002\uff98\003\uff98\004" +
    "\uff98\006\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\015\uff98\016\uff98\017\uff98\020\uff98\023\uff98\026\uff98\037" +
    "\127\040\120\041\123\042\131\043\124\044\132\046\134" +
    "\047\130\050\137\051\133\052\122\053\126\054\uff98\057" +
    "\uff98\060\uff98\061\uff98\062\uff98\063\uff98\066\uff98\067\uff98" +
    "\071\uff98\073\uff98\074\135\075\uff98\001\002\000\044\037" +
    "\127\040\120\041\123\042\131\043\124\044\132\046\134" +
    "\047\130\050\137\051\133\052\122\053\126\057\121\060" +
    "\136\061\125\074\135\075\144\001\002\000\120\002\uff95" +
    "\003\uff95\004\uff95\006\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\023\uff95" +
    "\026\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95" +
    "\054\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\066" +
    "\uff95\067\uff95\071\uff95\073\uff95\074\uff95\075\uff95\001\002" +
    "\000\120\002\uff96\003\uff96\004\uff96\006\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\023\uff96\026\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\063\uff96\066\uff96\067\uff96\071\uff96\073\uff96\074\uff96" +
    "\075\uff96\001\002\000\104\002\uff9f\003\uff9f\004\uff9f\006" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\023\uff9f\026\uff9f\037\127\040" +
    "\120\041\123\042\131\043\124\044\132\054\uff9f\057\uff9f" +
    "\060\uff9f\061\uff9f\062\uff9f\063\uff9f\066\uff9f\067\uff9f\071" +
    "\uff9f\073\uff9f\074\135\075\uff9f\001\002\000\104\002\uff9c" +
    "\003\uff9c\004\uff9c\006\uff9c\010\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\023\uff9c" +
    "\026\uff9c\037\127\040\120\041\123\042\131\043\124\044" +
    "\132\054\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\066\uff9c\067\uff9c\071\uff9c\073\uff9c\074\135\075\uff9c\001" +
    "\002\000\120\002\uffa0\003\uffa0\004\uffa0\006\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\023\uffa0\026\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\063\uffa0\066\uffa0\067\uffa0\071\uffa0\073\uffa0\074" +
    "\135\075\uffa0\001\002\000\120\002\uffa2\003\uffa2\004\uffa2" +
    "\006\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\023\uffa2\026\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\066\uffa2\067\uffa2\071" +
    "\uffa2\073\uffa2\074\135\075\uffa2\001\002\000\104\002\uff9e" +
    "\003\uff9e\004\uff9e\006\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\023\uff9e" +
    "\026\uff9e\037\127\040\120\041\123\042\131\043\124\044" +
    "\132\054\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\066\uff9e\067\uff9e\071\uff9e\073\uff9e\074\135\075\uff9e\001" +
    "\002\000\120\002\uffa5\003\uffa5\004\uffa5\006\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\023\uffa5\026\uffa5\037\uffa5\040\uffa5\041\123" +
    "\042\131\043\124\044\132\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\066\uffa5\067\uffa5\071\uffa5\073\uffa5\074" +
    "\135\075\uffa5\001\002\000\104\002\uff9a\003\uff9a\004\uff9a" +
    "\006\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\016\uff9a\017\uff9a\020\uff9a\023\uff9a\026\uff9a\037\127" +
    "\040\120\041\123\042\131\043\124\044\132\054\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\066\uff9a\067\uff9a" +
    "\071\uff9a\073\uff9a\074\135\075\uff9a\001\002\000\120\002" +
    "\uff97\003\uff97\004\uff97\006\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\023" +
    "\uff97\026\uff97\037\127\040\120\041\123\042\131\043\124" +
    "\044\132\046\134\047\130\050\137\051\133\052\122\053" +
    "\126\054\uff97\057\121\060\136\061\uff97\062\uff97\063\uff97" +
    "\066\uff97\067\uff97\071\uff97\073\uff97\074\135\075\uff97\001" +
    "\002\000\120\002\uffa1\003\uffa1\004\uffa1\006\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\023\uffa1\026\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\057\uffa1\060\uffa1\061\uffa1" +
    "\062\uffa1\063\uffa1\066\uffa1\067\uffa1\071\uffa1\073\uffa1\074" +
    "\135\075\uffa1\001\002\000\120\002\uffa3\003\uffa3\004\uffa3" +
    "\006\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\023\uffa3\026\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\067\uffa3\071" +
    "\uffa3\073\uffa3\074\135\075\uffa3\001\002\000\104\002\uff9b" +
    "\003\uff9b\004\uff9b\006\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\023\uff9b" +
    "\026\uff9b\037\127\040\120\041\123\042\131\043\124\044" +
    "\132\054\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b" +
    "\066\uff9b\067\uff9b\071\uff9b\073\uff9b\074\135\075\uff9b\001" +
    "\002\000\120\002\uff99\003\uff99\004\uff99\006\uff99\010\uff99" +
    "\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\023\uff99\026\uff99\037\127\040\120\041\123" +
    "\042\131\043\124\044\132\046\134\047\130\050\137\051" +
    "\133\052\122\053\126\054\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\066\uff99\067\uff99\071\uff99\073\uff99\074" +
    "\135\075\uff99\001\002\000\120\002\uffa4\003\uffa4\004\uffa4" +
    "\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4\026\uffa4\037\uffa4" +
    "\040\uffa4\041\123\042\131\043\124\044\132\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\066\uffa4\067\uffa4\071" +
    "\uffa4\073\uffa4\074\135\075\uffa4\001\002\000\044\010\163" +
    "\037\127\040\120\041\123\042\131\043\124\044\132\046" +
    "\134\047\130\050\137\051\133\052\122\053\126\057\121" +
    "\060\136\061\125\074\135\001\002\000\004\072\164\001" +
    "\002\000\046\005\064\007\101\024\102\025\055\027\107" +
    "\030\071\031\114\032\057\033\075\034\072\035\042\036" +
    "\063\040\100\056\060\066\054\070\065\072\070\074\067" +
    "\001\002\000\120\002\uff88\003\uff88\004\uff88\006\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\023\uff88\026\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\044\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\063\uff88\066\uff88\067\uff88\071\uff88\073\uff88" +
    "\074\uff88\075\uff88\001\002\000\004\073\174\001\002\000" +
    "\044\037\127\040\120\041\123\042\131\043\124\044\132" +
    "\046\134\047\130\050\137\051\133\052\122\053\126\057" +
    "\121\060\136\061\125\067\170\074\135\001\002\000\046" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\046\037\127\040\120\041\123\042\131\043\124\044\132" +
    "\046\134\047\130\050\137\051\133\052\122\053\126\057" +
    "\121\060\136\061\125\062\172\073\uff7a\074\135\001\002" +
    "\000\046\005\064\007\101\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\072\070\074\067\001" +
    "\002\000\004\073\uff7b\001\002\000\120\002\uff7c\003\uff7c" +
    "\004\uff7c\006\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\023\uff7c\026\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\066\uff7c\067" +
    "\uff7c\071\uff7c\073\uff7c\074\uff7c\075\uff7c\001\002\000\120" +
    "\002\uff93\003\uff93\004\uff93\006\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\023\uff93\026\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063" +
    "\uff93\066\uff93\067\uff93\071\uff93\073\uff93\074\135\075\uff93" +
    "\001\002\000\056\026\uff8b\035\uffe8\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\067\uff8b\070\241\073\uff8b\074\051\001\002\000\052" +
    "\026\uff84\037\127\040\120\041\123\042\131\043\124\044" +
    "\132\046\134\047\130\050\137\051\133\052\122\053\126" +
    "\057\121\060\136\061\125\062\235\067\170\073\uff84\074" +
    "\135\001\002\000\004\073\233\001\002\000\006\026\212" +
    "\073\uff87\001\002\000\004\035\203\001\002\000\006\064" +
    "\204\073\205\001\002\000\050\003\207\005\064\007\101" +
    "\024\102\025\055\027\107\030\071\031\114\032\057\033" +
    "\075\034\072\035\042\036\063\040\100\056\060\066\054" +
    "\070\065\072\070\074\067\001\002\000\120\002\uff71\003" +
    "\uff71\004\uff71\006\uff71\010\uff71\011\uff71\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\023\uff71\026" +
    "\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71" +
    "\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71\066\uff71" +
    "\067\uff71\071\uff71\073\uff71\074\uff71\075\uff71\001\002\000" +
    "\044\037\127\040\120\041\123\042\131\043\124\044\132" +
    "\046\134\047\130\050\137\051\133\052\122\053\126\057" +
    "\121\060\136\061\125\073\211\074\135\001\002\000\004" +
    "\073\210\001\002\000\120\002\uff70\003\uff70\004\uff70\006" +
    "\uff70\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70" +
    "\016\uff70\017\uff70\020\uff70\023\uff70\026\uff70\037\uff70\040" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\057\uff70\060" +
    "\uff70\061\uff70\062\uff70\063\uff70\066\uff70\067\uff70\071\uff70" +
    "\073\uff70\074\uff70\075\uff70\001\002\000\120\002\uff72\003" +
    "\uff72\004\uff72\006\uff72\010\uff72\011\uff72\012\uff72\013\uff72" +
    "\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\023\uff72\026" +
    "\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054" +
    "\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\066\uff72" +
    "\067\uff72\071\uff72\073\uff72\074\uff72\075\uff72\001\002\000" +
    "\010\021\040\022\041\035\042\001\002\000\006\064\227" +
    "\073\230\001\002\000\006\035\215\062\216\001\002\000" +
    "\024\021\040\022\041\035\042\054\uffd6\055\uffd6\062\222" +
    "\064\uffd6\071\uffd6\073\uffd6\001\002\000\010\021\040\022" +
    "\041\035\042\001\002\000\014\054\uffd3\055\uffd3\064\uffd3" +
    "\071\uffd3\073\uffd3\001\002\000\014\054\uffd4\055\uffd4\064" +
    "\uffd4\071\uffd4\073\uffd4\001\002\000\012\021\040\022\041" +
    "\035\042\062\226\001\002\000\012\021\040\022\041\035" +
    "\042\062\224\001\002\000\014\054\uffd7\055\uffd7\064\uffd7" +
    "\071\uffd7\073\uffd7\001\002\000\054\005\uffd9\007\uffd9\021" +
    "\uffd9\022\uffd9\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\056" +
    "\uffd9\062\uffd9\066\uffd9\070\uffd9\072\uffd9\074\uffd9\001\002" +
    "\000\014\054\uffd5\055\uffd5\064\uffd5\071\uffd5\073\uffd5\001" +
    "\002\000\054\005\uffd8\007\uffd8\021\uffd8\022\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\040\uffd8\056\uffd8\062\uffd8\066\uffd8" +
    "\070\uffd8\072\uffd8\074\uffd8\001\002\000\046\005\064\007" +
    "\101\024\102\025\055\027\107\030\071\031\114\032\057" +
    "\033\075\034\072\035\042\036\063\040\100\056\060\066" +
    "\054\070\065\072\070\074\067\001\002\000\120\002\uff6e" +
    "\003\uff6e\004\uff6e\006\uff6e\010\uff6e\011\uff6e\012\uff6e\013" +
    "\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\023\uff6e" +
    "\026\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\044" +
    "\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053\uff6e" +
    "\054\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\066" +
    "\uff6e\067\uff6e\071\uff6e\073\uff6e\074\uff6e\075\uff6e\001\002" +
    "\000\044\037\127\040\120\041\123\042\131\043\124\044" +
    "\132\046\134\047\130\050\137\051\133\052\122\053\126" +
    "\057\121\060\136\061\125\073\232\074\135\001\002\000" +
    "\120\002\uff6f\003\uff6f\004\uff6f\006\uff6f\010\uff6f\011\uff6f" +
    "\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\023\uff6f\026\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff6f\044\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f" +
    "\063\uff6f\066\uff6f\067\uff6f\071\uff6f\073\uff6f\074\uff6f\075" +
    "\uff6f\001\002\000\120\002\uff73\003\uff73\004\uff73\006\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\023\uff73\026\uff73\037\uff73\040\uff73" +
    "\041\uff73\042\uff73\043\uff73\044\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\057\uff73\060\uff73" +
    "\061\uff73\062\uff73\063\uff73\066\uff73\067\uff73\071\uff73\073" +
    "\uff73\074\uff73\075\uff73\001\002\000\050\005\064\007\101" +
    "\024\102\025\055\027\107\030\071\031\114\032\057\033" +
    "\075\034\072\035\042\036\063\040\100\056\060\062\226" +
    "\066\054\070\065\072\070\074\067\001\002\000\050\005" +
    "\064\007\101\024\102\025\055\027\107\030\071\031\114" +
    "\032\057\033\075\034\072\035\042\036\063\040\100\056" +
    "\060\062\224\066\054\070\065\072\070\074\067\001\002" +
    "\000\056\026\uff84\037\127\040\120\041\123\042\131\043" +
    "\124\044\132\046\134\047\130\050\137\051\133\052\122" +
    "\053\126\057\121\060\136\061\125\062\235\063\uff84\071" +
    "\uff84\073\uff84\074\135\075\uff84\001\002\000\014\026\uff85" +
    "\063\uff85\071\uff85\073\uff85\075\uff85\001\002\000\014\026" +
    "\uff83\063\uff83\071\uff83\073\uff83\075\uff83\001\002\000\052" +
    "\003\242\005\064\007\101\024\102\025\055\027\107\030" +
    "\071\031\114\032\057\033\075\034\072\035\042\036\063" +
    "\040\100\056\060\066\054\070\065\071\uff86\072\070\074" +
    "\067\001\002\000\120\002\uff8c\003\uff8c\004\uff8c\006\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\017\uff8c\020\uff8c\023\uff8c\026\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\044\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\066\uff8c\067\uff8c\071\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\001\002\000\004\071\245\001\002" +
    "\000\004\071\uff87\001\002\000\120\002\uff8d\003\uff8d\004" +
    "\uff8d\006\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\023\uff8d\026\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\057" +
    "\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\066\uff8d\067\uff8d" +
    "\071\uff8d\073\uff8d\074\uff8d\075\uff8d\001\002\000\004\075" +
    "\257\001\002\000\050\005\064\007\101\024\102\025\055" +
    "\027\107\030\071\031\114\032\057\033\075\034\072\035" +
    "\042\036\063\040\100\056\060\063\254\066\054\070\065" +
    "\072\070\074\067\001\002\000\004\075\253\001\002\000" +
    "\006\063\252\075\uff87\001\002\000\050\005\uff7e\007\uff7e" +
    "\024\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\040\uff7e\056\uff7e\063\uff7e" +
    "\066\uff7e\070\uff7e\072\uff7e\074\uff7e\001\002\000\120\002" +
    "\uff82\003\uff82\004\uff82\006\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\023" +
    "\uff82\026\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\044\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\066\uff82\067\uff82\071\uff82\073\uff82\074\uff82\075\uff82\001" +
    "\002\000\050\005\uff7d\007\uff7d\024\uff7d\025\uff7d\027\uff7d" +
    "\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\040\uff7d\056\uff7d\063\uff7d\066\uff7d\070\uff7d\072\uff7d" +
    "\074\uff7d\001\002\000\004\075\uff80\001\002\000\006\063" +
    "\252\075\uff7f\001\002\000\120\002\uff81\003\uff81\004\uff81" +
    "\006\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\uff81\016\uff81\017\uff81\020\uff81\023\uff81\026\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\063\uff81\066\uff81\067\uff81\071" +
    "\uff81\073\uff81\074\uff81\075\uff81\001\002\000\044\037\127" +
    "\040\120\041\123\042\131\043\124\044\132\046\134\047" +
    "\130\050\137\051\133\052\122\053\126\057\121\060\136" +
    "\061\125\071\261\074\135\001\002\000\120\002\uff90\003" +
    "\uff90\004\uff90\006\uff90\010\uff90\011\uff90\012\uff90\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\023\uff90\026" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\066\uff90" +
    "\067\uff90\071\uff90\073\uff90\074\uff90\075\uff90\001\002\000" +
    "\044\006\263\037\127\040\120\041\123\042\131\043\124" +
    "\044\132\046\134\047\130\050\137\051\133\052\122\053" +
    "\126\057\121\060\136\061\125\074\135\001\002\000\046" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\120\002\uff89\003\uff89\004\265\006\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017\uff89\020" +
    "\uff89\023\uff89\026\uff89\037\127\040\120\041\123\042\131" +
    "\043\124\044\132\046\134\047\130\050\137\051\133\052" +
    "\122\053\126\054\uff89\057\121\060\136\061\125\062\uff89" +
    "\063\uff89\066\uff89\067\uff89\071\uff89\073\uff89\074\135\075" +
    "\uff89\001\002\000\046\005\064\007\101\024\102\025\055" +
    "\027\107\030\071\031\114\032\057\033\075\034\072\035" +
    "\042\036\063\040\100\056\060\066\054\070\065\072\070" +
    "\074\067\001\002\000\120\002\uff8a\003\uff8a\004\uff8a\006" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\023\uff8a\026\uff8a\037\127\040" +
    "\120\041\123\042\131\043\124\044\132\046\134\047\130" +
    "\050\137\051\133\052\122\053\126\054\uff8a\057\121\060" +
    "\136\061\125\062\uff8a\063\uff8a\066\uff8a\067\uff8a\071\uff8a" +
    "\073\uff8a\074\135\075\uff8a\001\002\000\120\002\uff91\003" +
    "\uff91\004\uff91\006\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\023\uff91\026" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\066\uff91" +
    "\067\uff91\071\uff91\073\uff91\074\135\075\uff91\001\002\000" +
    "\120\002\uff92\003\uff92\004\uff92\006\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\023\uff92\026\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\063\uff92\066\uff92\067\uff92\071\uff92\073\uff92\074\135\075" +
    "\uff92\001\002\000\004\035\272\001\002\000\046\005\064" +
    "\007\101\024\102\025\055\027\107\030\071\031\114\032" +
    "\057\033\075\034\072\035\042\036\063\040\100\056\060" +
    "\066\054\070\065\072\070\074\067\001\002\000\120\002" +
    "\uff8f\003\uff8f\004\uff8f\006\uff8f\010\uff8f\011\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\023" +
    "\uff8f\026\uff8f\037\127\040\120\041\123\042\131\043\124" +
    "\044\132\046\134\047\130\050\137\051\133\052\122\053" +
    "\126\054\uff8f\057\121\060\136\061\125\062\uff8f\063\uff8f" +
    "\066\uff8f\067\uff8f\071\uff8f\073\uff8f\074\135\075\uff8f\001" +
    "\002\000\054\005\064\007\101\021\040\022\041\024\102" +
    "\025\055\027\107\030\071\031\114\032\057\033\075\034" +
    "\072\035\042\036\063\040\100\056\060\066\054\070\065" +
    "\072\070\073\uff86\074\067\001\002\000\120\002\uff79\003" +
    "\uff79\004\uff79\006\uff79\010\uff79\011\uff79\012\uff79\013\uff79" +
    "\014\uff79\015\uff79\016\uff79\017\uff79\020\uff79\023\uff79\026" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79" +
    "\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054" +
    "\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\066\uff79" +
    "\067\uff79\071\uff79\073\uff79\074\uff79\075\uff79\001\002\000" +
    "\120\002\uff77\003\uff77\004\uff77\006\uff77\010\uff77\011\uff77" +
    "\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020" +
    "\uff77\023\uff77\026\uff77\037\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\053\uff77\054\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\063\uff77\066\uff77\067\uff77\071\uff77\073\uff77\074\uff77\075" +
    "\uff77\001\002\000\120\002\uff78\003\uff78\004\uff78\006\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\017\uff78\020\uff78\023\uff78\026\uff78\037\uff78\040\uff78" +
    "\041\uff78\042\uff78\043\uff78\044\uff78\046\uff78\047\uff78\050" +
    "\uff78\051\uff78\052\uff78\053\uff78\054\uff78\057\uff78\060\uff78" +
    "\061\uff78\062\uff78\063\uff78\066\uff78\067\uff78\071\uff78\073" +
    "\uff78\074\uff78\075\uff78\001\002\000\004\035\042\001\002" +
    "\000\126\002\uffb9\003\uffb9\004\uffb9\006\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\023\uffb9\026\uffb9\035\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\010\021" +
    "\040\022\041\035\042\001\002\000\004\062\304\001\002" +
    "\000\010\021\040\022\041\035\042\001\002\000\004\047" +
    "\306\001\002\000\124\002\uffe0\003\uffe0\004\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\023\uffe0\026\uffe0\035\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000\004" +
    "\035\042\001\002\000\004\047\311\001\002\000\124\002" +
    "\uffe4\003\uffe4\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\023" +
    "\uffe4\026\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\001\002\000\124\002\uffe2\003\uffe2\004\uffe2" +
    "\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\023\uffe2\026\uffe2\035\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2\001\002" +
    "\000\074\002\uff67\003\uff67\011\uff67\012\uff67\013\uff67\014" +
    "\uff67\015\uff67\016\uff67\017\uff67\020\uff67\023\uff67\037\127" +
    "\040\120\041\123\042\131\043\124\044\132\046\134\047" +
    "\130\050\137\051\133\052\122\053\126\057\121\060\136" +
    "\061\125\063\uff67\066\uff67\074\135\001\002\000\034\002" +
    "\uff66\003\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66" +
    "\016\uff66\017\uff66\020\uff66\023\uff66\063\uff66\066\uff66\001" +
    "\002\000\004\035\316\001\002\000\016\003\322\021\040" +
    "\022\041\035\042\054\uffdf\070\323\001\002\000\004\054" +
    "\330\001\002\000\006\054\uffdd\055\uffdd\001\002\000\006" +
    "\054\uffde\055\uffde\001\002\000\006\003\322\070\323\001" +
    "\002\000\012\021\040\022\041\035\042\071\325\001\002" +
    "\000\004\071\326\001\002\000\006\054\uffdc\055\uffdc\001" +
    "\002\000\006\054\uffdb\055\uffdb\001\002\000\006\054\uffda" +
    "\055\uffda\001\002\000\046\005\064\007\101\024\102\025" +
    "\055\027\107\030\071\031\114\032\057\033\075\034\072" +
    "\035\042\036\063\040\100\056\060\066\054\070\065\072" +
    "\070\074\067\001\002\000\074\002\uffd2\003\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\023\uffd2\037\127\040\120\041\123\042\131\043\124" +
    "\044\132\046\134\047\130\050\137\051\133\052\122\053" +
    "\126\057\121\060\136\061\125\063\uffd2\066\uffd2\074\135" +
    "\001\002\000\004\054\333\001\002\000\004\035\042\001" +
    "\002\000\004\070\335\001\002\000\050\005\064\007\101" +
    "\024\102\025\055\027\107\030\071\031\114\032\057\033" +
    "\075\034\072\035\042\036\063\040\100\056\060\066\054" +
    "\070\065\071\uff86\072\070\074\067\001\002\000\004\071" +
    "\337\001\002\000\034\002\uffbb\003\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\023" +
    "\uffbb\063\uffbb\066\uffbb\001\002\000\032\002\ufff7\003\ufff7" +
    "\011\021\012\022\013\030\014\020\015\025\016\031\017" +
    "\017\020\035\023\027\066\004\001\002\000\006\002\ufff8" +
    "\003\ufff8\001\002\000\032\003\026\011\021\012\022\013" +
    "\030\014\020\015\025\016\031\017\017\020\035\023\027" +
    "\063\344\066\004\001\002\000\006\002\ufff9\003\ufff9\001" +
    "\002\000\032\002\ufffa\003\ufffa\011\021\012\022\013\030" +
    "\014\020\015\025\016\031\017\017\020\035\023\027\066" +
    "\004\001\002\000\006\002\ufffb\003\ufffb\001\002\000\004" +
    "\035\347\001\002\000\042\002\uffbd\003\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\023\uffbd\035\uffbd\062\uffbd\063\uffbd\066\uffbd\074\357\001" +
    "\002\000\040\002\uffc1\003\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\023\uffc1\035" +
    "\347\062\352\063\uffc1\066\uffc1\001\002\000\034\002\uffc2" +
    "\003\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\023\uffc2\063\uffc2\066\uffc2\001\002" +
    "\000\006\035\347\062\224\001\002\000\006\035\347\062" +
    "\226\001\002\000\034\002\uffbf\003\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\023" +
    "\uffbf\063\uffbf\066\uffbf\001\002\000\034\002\uffbe\003\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\023\uffbe\063\uffbe\066\uffbe\001\002\000\034" +
    "\002\uffc0\003\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\023\uffc0\063\uffc0\066\uffc0" +
    "\001\002\000\004\030\360\001\002\000\004\075\361\001" +
    "\002\000\040\002\uffbc\003\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\023\uffbc\035" +
    "\uffbc\062\uffbc\063\uffbc\066\uffbc\001\002\000\004\035\363" +
    "\001\002\000\016\003\322\021\040\022\041\035\042\055" +
    "\uffdf\070\323\001\002\000\004\055\365\001\002\000\046" +
    "\005\064\007\101\024\102\025\055\027\107\030\071\031" +
    "\114\032\057\033\075\034\072\035\042\036\063\040\100" +
    "\056\060\066\054\070\065\072\070\074\067\001\002\000" +
    "\034\002\uffd1\003\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\023\uffd1\063\uffd1\066" +
    "\uffd1\001\002\000\074\002\uffb8\003\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\023" +
    "\uffb8\037\127\040\120\041\123\042\131\043\124\044\132" +
    "\046\134\047\130\050\137\051\133\052\122\053\126\057" +
    "\121\060\136\061\125\063\uffb8\066\uffb8\074\135\001\002" +
    "\000\034\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\023\uffea\063\uffea" +
    "\066\uffea\001\002\000\034\002\uffe9\003\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\023\uffe9\063\uffe9\066\uffe9\001\002\000\006\035\373\070" +
    "\374\001\002\000\004\070\377\001\002\000\010\021\040" +
    "\022\041\035\042\001\002\000\004\071\376\001\002\000" +
    "\034\002\uffc3\003\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\023\uffc3\063\uffc3\066" +
    "\uffc3\001\002\000\012\003\u0101\021\040\022\041\035\042" +
    "\001\002\000\004\071\u0103\001\002\000\004\071\u0102\001" +
    "\002\000\034\002\uffc4\003\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\023\uffc4\063" +
    "\uffc4\066\uffc4\001\002\000\034\002\uffc5\003\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\063\uffc5\066\uffc5\001\002\000\034\002\uff6b" +
    "\003\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b\016" +
    "\uff6b\017\uff6b\020\uff6b\023\uff6b\063\uff6b\066\uff6b\001\002" +
    "\000\034\002\uff6d\003\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\023\uff6d\063\uff6d" +
    "\066\uff6d\001\002\000\044\037\127\040\120\041\123\042" +
    "\131\043\124\044\132\046\134\047\130\050\137\051\133" +
    "\052\122\053\126\054\u010a\057\121\060\136\061\125\074" +
    "\135\001\002\000\036\002\uff6c\003\uff6c\011\uff6c\012\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\023" +
    "\uff6c\054\u0108\063\uff6c\066\uff6c\001\002\000\046\005\064" +
    "\007\101\024\102\025\055\027\107\030\071\031\114\032" +
    "\057\033\075\034\072\035\042\036\063\040\100\056\060" +
    "\066\054\070\065\072\070\074\067\001\002\000\074\002" +
    "\uff69\003\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69" +
    "\016\uff69\017\uff69\020\uff69\023\uff69\037\127\040\120\041" +
    "\123\042\131\043\124\044\132\046\134\047\130\050\137" +
    "\051\133\052\122\053\126\057\121\060\136\061\125\063" +
    "\uff69\066\uff69\074\135\001\002\000\050\003\u010c\005\064" +
    "\007\101\024\102\025\055\027\107\030\071\031\114\032" +
    "\057\033\075\034\072\035\042\036\063\040\100\056\060" +
    "\066\054\070\065\072\070\074\067\001\002\000\074\002" +
    "\uff6a\003\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\017\uff6a\020\uff6a\023\uff6a\037\127\040\120\041" +
    "\123\042\131\043\124\044\132\046\134\047\130\050\137" +
    "\051\133\052\122\053\126\057\121\060\136\061\125\063" +
    "\uff6a\066\uff6a\074\135\001\002\000\034\002\uff68\003\uff68" +
    "\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017" +
    "\uff68\020\uff68\023\uff68\063\uff68\066\uff68\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffd\001\002\000\004\055" +
    "\365\001\002\000\004\055\365\001\002\000\006\055\uffcd" +
    "\070\u0112\001\002\000\004\035\u0113\001\002\000\006\035" +
    "\u0116\054\u0117\001\002\000\004\071\u0115\001\002\000\004" +
    "\055\uffcc\001\002\000\004\071\uffc6\001\002\000\006\035" +
    "\u0119\062\u0118\001\002\000\004\035\u0113\001\002\000\010" +
    "\035\u0113\062\u011a\071\uffc7\001\002\000\006\035\u0113\062" +
    "\224\001\002\000\006\035\u0113\062\226\001\002\000\004" +
    "\071\uffc8\001\002\000\004\071\uffca\001\002\000\004\071" +
    "\uffcb\001\002\000\004\071\uffc9\001\002\000\004\055\365" +
    "\001\002\000\034\002\uffd0\003\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\023\uffd0" +
    "\063\uffd0\066\uffd0\001\002\000\034\002\uffcf\003\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\023\uffcf\063\uffcf\066\uffcf\001\002\000\034\002" +
    "\uffce\003\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\023\uffce\063\uffce\066\uffce\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\040\002\015\003\032\004\006\005\010\006" +
    "\023\007\007\010\012\011\011\012\014\013\033\014\031" +
    "\015\022\016\005\017\013\020\004\001\001\000\006\061" +
    "\u010f\065\u0110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\342\005" +
    "\341\006\023\007\007\010\012\011\011\012\014\013\033" +
    "\014\031\015\022\016\005\017\013\020\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\021\u0104\022\u0103\023" +
    "\u0105\024\103\025\102\026\104\027\105\030\112\031\073" +
    "\032\111\033\055\034\110\035\061\037\107\040\075\041" +
    "\065\042\076\065\060\001\001\000\016\050\371\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\002\001" +
    "\001\000\016\050\361\051\035\052\045\053\044\054\036" +
    "\065\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\345\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\050\314\051\035\052\045\053\044\054\036\065" +
    "\043\001\001\000\042\023\312\024\103\025\102\026\104" +
    "\027\105\030\112\031\073\032\111\033\055\034\110\035" +
    "\061\037\107\040\075\041\065\042\076\065\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\050\042\051\035\052\045\053\044\054\036\065\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\023\072\024\103\025\102\026\104\027" +
    "\105\030\112\031\073\032\111\033\055\034\110\035\061" +
    "\037\107\040\075\041\065\042\076\065\060\001\001\000" +
    "\026\037\274\040\075\041\065\042\076\050\276\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\016\050" +
    "\270\051\035\052\045\053\044\054\036\065\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\023\267\024" +
    "\103\025\102\026\104\027\105\030\112\031\073\032\111" +
    "\033\055\034\110\035\061\037\107\040\075\041\065\042" +
    "\076\065\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\023\266\024\103\025\102\026\104\027\105\030" +
    "\112\031\073\032\111\033\055\034\110\035\061\037\107" +
    "\040\075\041\065\042\076\065\060\001\001\000\042\023" +
    "\261\024\103\025\102\026\104\027\105\030\112\031\073" +
    "\032\111\033\055\034\110\035\061\037\107\040\075\041" +
    "\065\042\076\065\060\001\001\000\042\023\257\024\103" +
    "\025\102\026\104\027\105\030\112\031\073\032\111\033" +
    "\055\034\110\035\061\037\107\040\075\041\065\042\076" +
    "\065\060\001\001\000\002\001\001\000\052\023\235\024" +
    "\103\025\102\026\104\027\105\030\112\031\073\032\111" +
    "\033\055\034\110\035\061\037\107\040\075\041\065\042" +
    "\076\043\245\044\247\045\250\046\246\065\060\001\001" +
    "\000\062\023\176\024\103\025\102\026\104\027\105\030" +
    "\112\031\073\032\111\033\055\034\110\035\061\037\107" +
    "\040\075\041\065\042\076\044\177\045\200\047\165\050" +
    "\201\051\035\052\045\053\044\054\036\065\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\023\174\024\103\025\102\026\104\027" +
    "\105\030\112\031\073\032\111\033\055\034\110\035\061" +
    "\037\107\040\075\041\065\042\076\065\060\001\001\000" +
    "\042\023\161\024\103\025\102\026\104\027\105\030\112" +
    "\031\073\032\111\033\055\034\110\035\061\037\107\040" +
    "\075\041\065\042\076\065\060\001\001\000\016\050\114" +
    "\051\035\052\045\053\044\054\036\065\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\023\116\024\103\025\102\026" +
    "\104\027\105\030\112\031\073\032\111\033\055\034\110" +
    "\035\061\037\107\040\075\041\065\042\076\065\060\001" +
    "\001\000\002\001\001\000\042\023\160\024\103\025\102" +
    "\026\104\027\105\030\112\031\073\032\111\033\055\034" +
    "\110\035\061\037\107\040\075\041\065\042\076\065\060" +
    "\001\001\000\042\023\157\024\103\025\102\026\104\027" +
    "\105\030\112\031\073\032\111\033\055\034\110\035\061" +
    "\037\107\040\075\041\065\042\076\065\060\001\001\000" +
    "\042\023\156\024\103\025\102\026\104\027\105\030\112" +
    "\031\073\032\111\033\055\034\110\035\061\037\107\040" +
    "\075\041\065\042\076\065\060\001\001\000\042\023\155" +
    "\024\103\025\102\026\104\027\105\030\112\031\073\032" +
    "\111\033\055\034\110\035\061\037\107\040\075\041\065" +
    "\042\076\065\060\001\001\000\042\023\154\024\103\025" +
    "\102\026\104\027\105\030\112\031\073\032\111\033\055" +
    "\034\110\035\061\037\107\040\075\041\065\042\076\065" +
    "\060\001\001\000\042\023\153\024\103\025\102\026\104" +
    "\027\105\030\112\031\073\032\111\033\055\034\110\035" +
    "\061\037\107\040\075\041\065\042\076\065\060\001\001" +
    "\000\042\023\152\024\103\025\102\026\104\027\105\030" +
    "\112\031\073\032\111\033\055\034\110\035\061\037\107" +
    "\040\075\041\065\042\076\065\060\001\001\000\042\023" +
    "\151\024\103\025\102\026\104\027\105\030\112\031\073" +
    "\032\111\033\055\034\110\035\061\037\107\040\075\041" +
    "\065\042\076\065\060\001\001\000\042\023\150\024\103" +
    "\025\102\026\104\027\105\030\112\031\073\032\111\033" +
    "\055\034\110\035\061\037\107\040\075\041\065\042\076" +
    "\065\060\001\001\000\042\023\147\024\103\025\102\026" +
    "\104\027\105\030\112\031\073\032\111\033\055\034\110" +
    "\035\061\037\107\040\075\041\065\042\076\065\060\001" +
    "\001\000\042\023\146\024\103\025\102\026\104\027\105" +
    "\030\112\031\073\032\111\033\055\034\110\035\061\037" +
    "\107\040\075\041\065\042\076\065\060\001\001\000\042" +
    "\023\145\024\103\025\102\026\104\027\105\030\112\031" +
    "\073\032\111\033\055\034\110\035\061\037\107\040\075" +
    "\041\065\042\076\065\060\001\001\000\042\023\144\024" +
    "\103\025\102\026\104\027\105\030\112\031\073\032\111" +
    "\033\055\034\110\035\061\037\107\040\075\041\065\042" +
    "\076\065\060\001\001\000\042\023\141\024\103\025\102" +
    "\026\104\027\105\030\112\031\073\032\111\033\055\034" +
    "\110\035\061\037\107\040\075\041\065\042\076\065\060" +
    "\001\001\000\042\023\140\024\103\025\102\026\104\027" +
    "\105\030\112\031\073\032\111\033\055\034\110\035\061" +
    "\037\107\040\075\041\065\042\076\065\060\001\001\000" +
    "\042\023\137\024\103\025\102\026\104\027\105\030\112" +
    "\031\073\032\111\033\055\034\110\035\061\037\107\040" +
    "\075\041\065\042\076\065\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\164\001\001" +
    "\000\044\023\166\024\103\025\102\026\104\027\105\030" +
    "\112\031\073\032\111\033\055\034\110\035\061\037\107" +
    "\040\075\041\065\042\076\047\165\065\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\023\170\024\103\025\102\026\104\027\105\030\112\031" +
    "\073\032\111\033\055\034\110\035\061\037\107\040\075" +
    "\041\065\042\076\065\060\001\001\000\002\001\001\000" +
    "\044\023\166\024\103\025\102\026\104\027\105\030\112" +
    "\031\073\032\111\033\055\034\110\035\061\037\107\040" +
    "\075\041\065\042\076\047\172\065\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\023" +
    "\205\024\103\025\102\026\104\027\105\030\112\031\073" +
    "\032\111\033\055\034\110\035\061\037\107\040\075\041" +
    "\065\042\076\065\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\213\051\035\052\045\053\044\054\036" +
    "\060\212\065\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\050\213\051\035\052\045\053\044\054\036" +
    "\055\220\060\217\065\043\001\001\000\020\050\213\051" +
    "\035\052\045\053\044\054\036\060\216\065\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\050\213\051" +
    "\035\052\045\053\044\054\036\060\224\065\043\001\001" +
    "\000\020\050\213\051\035\052\045\053\044\054\036\060" +
    "\222\065\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\023\230\024" +
    "\103\025\102\026\104\027\105\030\112\031\073\032\111" +
    "\033\055\034\110\035\061\037\107\040\075\041\065\042" +
    "\076\065\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\023\235\024" +
    "\103\025\102\026\104\027\105\030\112\031\073\032\111" +
    "\033\055\034\110\035\061\037\107\040\075\041\065\042" +
    "\076\045\237\065\060\001\001\000\044\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\073\032\111\033" +
    "\055\034\110\035\061\037\107\040\075\041\065\042\076" +
    "\045\236\065\060\001\001\000\004\055\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\023\235\024\103" +
    "\025\102\026\104\027\105\030\112\031\073\032\111\033" +
    "\055\034\110\035\061\037\107\040\075\041\065\042\076" +
    "\044\242\045\243\065\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\023\235\024\103\025\102\026\104\027" +
    "\105\030\112\031\073\032\111\033\055\034\110\035\061" +
    "\037\107\040\075\041\065\042\076\043\254\045\255\046" +
    "\246\065\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\023" +
    "\263\024\103\025\102\026\104\027\105\030\112\031\073" +
    "\032\111\033\055\034\110\035\061\037\107\040\075\041" +
    "\065\042\076\065\060\001\001\000\002\001\001\000\042" +
    "\023\265\024\103\025\102\026\104\027\105\030\112\031" +
    "\073\032\111\033\055\034\110\035\061\037\107\040\075" +
    "\041\065\042\076\065\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\023\272\024\103\025\102\026\104\027\105\030\112\031" +
    "\073\032\111\033\055\034\110\035\061\037\107\040\075" +
    "\041\065\042\076\065\060\001\001\000\002\001\001\000" +
    "\060\023\235\024\103\025\102\026\104\027\105\030\112" +
    "\031\073\032\111\033\055\034\110\035\061\037\107\040" +
    "\075\041\065\042\076\044\177\045\200\050\201\051\035" +
    "\052\045\053\044\054\036\065\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\300" +
    "\001\001\000\002\001\001\000\016\050\302\051\035\052" +
    "\045\053\044\054\036\065\043\001\001\000\002\001\001" +
    "\000\016\050\304\051\035\052\045\053\044\054\036\065" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\050\213\051\035\052\045\053\044\054" +
    "\036\056\316\057\320\060\317\065\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\326\001\001\000\020\050\213\051\035\052\045\053\044" +
    "\054\036\060\323\065\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\023\330\024\103\025\102\026\104\027\105\030\112\031" +
    "\073\032\111\033\055\034\110\035\061\037\107\040\075" +
    "\041\065\042\076\065\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\333\001\001\000\002\001\001" +
    "\000\046\023\235\024\103\025\102\026\104\027\105\030" +
    "\112\031\073\032\111\033\055\034\110\035\061\037\107" +
    "\040\075\041\065\042\076\044\335\045\243\065\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\340" +
    "\005\341\006\023\007\007\010\012\011\011\012\014\013" +
    "\033\014\031\015\022\016\005\017\013\020\004\001\001" +
    "\000\002\001\001\000\034\004\342\005\341\006\023\007" +
    "\007\010\012\011\011\012\014\013\033\014\031\015\022" +
    "\016\005\017\013\020\004\001\001\000\002\001\001\000" +
    "\034\004\344\005\341\006\023\007\007\010\012\011\011" +
    "\012\014\013\033\014\031\015\022\016\005\017\013\020" +
    "\004\001\001\000\002\001\001\000\006\063\347\064\350" +
    "\001\001\000\002\001\001\000\010\055\352\063\347\064" +
    "\353\001\001\000\002\001\001\000\006\063\347\064\355" +
    "\001\001\000\006\063\347\064\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\050\213\051\035\052\045\053\044\054\036\056\363" +
    "\057\320\060\317\065\043\001\001\000\004\036\365\001" +
    "\001\000\042\023\366\024\103\025\102\026\104\027\105" +
    "\030\112\031\073\032\111\033\055\034\110\035\061\037" +
    "\107\040\075\041\065\042\076\065\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\050\374" +
    "\051\035\052\045\053\044\054\036\065\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\050\377\051\035" +
    "\052\045\053\044\054\036\065\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\023\u0108\024\103\025\102\026\104" +
    "\027\105\030\112\031\073\032\111\033\055\034\110\035" +
    "\061\037\107\040\075\041\065\042\076\065\060\001\001" +
    "\000\002\001\001\000\042\023\u010a\024\103\025\102\026" +
    "\104\027\105\030\112\031\073\032\111\033\055\034\110" +
    "\035\061\037\107\040\075\041\065\042\076\065\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u0122\001\001\000\004\036" +
    "\u0121\001\001\000\004\061\u011f\001\001\000\004\062\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\u011e" +
    "\001\001\000\006\055\u011a\062\u011b\001\001\000\004\062" +
    "\u011d\001\001\000\004\062\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }
  
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, blog.msg.ErrorMsg msg) {
    this(s, sf);
    errorMsg = msg;
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) info;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), message);
    } else errorMsg.error(0, 0, message);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) {
    if (cur_token instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) cur_token;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), "cannot continue parse at " + s);
    } else errorMsg.error(0, 0, "the last encounterd token #" + cur_token);
  }
  
  public void syntax_error(Symbol cur_token) {
   if (cur_token instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) cur_token;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), "syntax error at " + s);
    } else errorMsg.error(0, 0, "the last encounterd token #" + cur_token);
  }
  
  /**
   * first try to use the default error recover
   * if it doesnot succeed, try to do reduce
   */
  protected boolean error_recovery(boolean debug) throws java.lang.Exception {
    int act = get_action(((Symbol)stack.peek()).parse_state, error_sym());
    Symbol lhs_sym;
    short handle_size, lhs_sym_num;
    while (act < 0) {
        /* perform the action for the reduce */
        lhs_sym = do_action((-act)-1, this, stack, tos);

        /* look up information about the production */
        lhs_sym_num = production_tab[(-act)-1][0];
        handle_size = production_tab[(-act)-1][1];

        /* pop the handle off the stack */
        for (int i = 0; i < handle_size; i++) {
          stack.pop();
          tos--;
        }
        
        /* look up the state to go to from the one popped back to */
        act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);

        /* shift to that state */
        lhs_sym.parse_state = act;
        
        stack.push(lhs_sym);
        tos++;
        act = get_action(((Symbol)stack.peek()).parse_state, error_sym());
    }
    return super.error_recovery(debug);
  }

// WC: Methods that get automatically invoked when using the builtin error recovery mechanism.  
/*
public void report_error(String message, Object info)
    This method should be called whenever an error message is to be issued. In the default implementation of this method, the first parameter provides the text of a message which is printed on System.err and the second parameter is simply ignored. It is very typical to override this method in order to provide a more sophisticated error reporting mechanism. 
public void report_fatal_error(String message, Object info)
    This method should be called whenever a non-recoverable error occurs. It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(), and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early). 
public void syntax_error(Symbol cur_token)
    This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted). In the default implementation it calls: report_error("Syntax error", null);. 
public void unrecovered_syntax_error(Symbol cur_token)
    This method is called by the parser if it is unable to recover from a syntax error. In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);. 
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {



  static blog.symbol.Symbol sym(String s) {
           return blog.symbol.Symbol.Symbol(s);
  }

  void error(int line, int col, String msg) {
    parser.errorMsg.error(line, col, msg);
  }

  void error(Location s, String msg){
    parser.errorMsg.error(s.getLine(), s.getColumn(), msg);
  }



  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action_part00000000(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= opt_statement_lst 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // opt_statement_lst ::= statement_lst error 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // opt_statement_lst ::= statement 
            {
              StmtList RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(sxright, "missing semicolon"); 
     if (s != null) {
       RESULT = new StmtList(s, null);
     } 
  
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_statement_lst",1, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_lst ::= statement SEMI statement_lst 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_lst ::= statement SEMI 
            {
              StmtList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 if (e!=null) RESULT = new StmtList(e, null); 
                        else RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement_lst ::= statement statement_lst 
            {
              StmtList RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(sxright, "missing semicolon"); RESULT = slst; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement_lst ::= error SEMI statement_lst 
            {
              StmtList RESULT =null;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location slstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location slstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = slst; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_lst ::= error SEMI 
            {
              StmtList RESULT =null;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_lst ::= error 
            {
              StmtList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement_lst",2, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= declaration_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= evidence_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= query_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("declaration_stmt",4, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_decl ::= TYPE ID 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new TypeDec(tyxleft.getLine(), tyxleft.getColumn(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_decl",5, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_decl ::= TYPE error 
            {
              Stmt RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tyxright, "malformed or missing id"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_decl",5, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= refer_name 
            {
              Ty RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= list_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= array_type 
            {
              Ty RESULT =null;
		Location atxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location atxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ArrayTy at = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = at; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= map_type 
            {
              Ty RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type",38, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_type ::= LIST LT refer_name GT 
            {
              Ty RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListTy(lxleft.getLine(), lxleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename))); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_type",39, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_type_or_sub ::= refer_name LBRACKET 
            {
              String RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = typename; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type_or_sub",42, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_type ::= array_type_or_sub RBRACKET 
            {
              ArrayTy RESULT =null;
		Location typenamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location typenamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ArrayTy(typenamexleft.getLine(), typenamexleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)), 1); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",41, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_type ::= array_type LBRACKET RBRACKET 
            {
              ArrayTy RESULT =null;
		Location arrtyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location arrtyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 arrty.dim += 1; 
      RESULT = arrty; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("array_type",41, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location t1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location t1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(mxleft.getLine(), mxleft.getColumn(), t1, t2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_type",40, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opt_parenthesized_type_var_lst ::= parenthesized_type_var_lst 
            {
              FieldList RESULT =null;
		Location tvlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tvlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tvl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = tvl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt_parenthesized_type_var_lst ::= type_var_lst 
            {
              FieldList RESULT =null;
		Location tvlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tvlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tvl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tvlxleft, "missing parentheses");
      error(tvlxright, "missing parentheses");
      RESULT = tvl;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_type_var_lst",44, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parenthesized_type_var_lst",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT =null;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parenthesized_type_var_lst",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parenthesized_type_var_lst ::= error parenthesized_type_var_lst 
            {
              FieldList RESULT =null;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(lpxleft, "syntax error"); 
      RESULT = tl; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parenthesized_type_var_lst",45, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // extra_commas ::= COMMA COMMA 
            {
              Object RESULT =null;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",43, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // extra_commas ::= extra_commas COMMA 
            {
              Object RESULT =null;

              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("extra_commas",43, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_var_lst ::= type ID 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FieldList(sym(id), ty, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_var_lst ::= type ID extra_commas type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(idxright, "extra commas"); 
      RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_var_lst ::= type ID type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(idxright, "missing comma"); 
      RESULT = new FieldList(sym(id), ty, tl);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_var_lst ::= type COMMA type_var_lst 
            {
              FieldList RESULT =null;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(tyxright, "missing id"); 
      RESULT = tl;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("type_var_lst",46, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression 
            {
              Stmt RESULT =null;
		Location fxxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location fxxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object fx = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FixedFuncDec(fxxleft.getLine(), fxxleft.getColumn(), sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("fixed_func_decl",6, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body 
            {
              Stmt RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new RandomFuncDec(rxleft.getLine(), rxleft.getColumn(), sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("rand_func_decl",7, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberDec(nxleft.getLine(), nxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), otl, body); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // number_stmt ::= NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location otlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location otlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(nsxright, "missing type name"); RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // number_stmt ::= NUMSIGN error dependency_statement_body 
            {
              Stmt RESULT =null;
		Location nsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location nsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(nsxright, "error in origin variable list"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_stmt",8, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_parenthesized_origin_var_list",47, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // origin_var_list ::= ID EQ ID extra_commas origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra commas");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // origin_var_list ::= ID EQ COMMA origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(exright, "missing origin var name");
      RESULT = n;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // origin_var_list ::= ID EQ ID origin_var_list 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(varxright, "missing comma");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // origin_var_list ::= ID ID 
            {
              OriginFieldList RESULT =null;
		Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(funcxright, "missing =");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null);
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_var_list",48, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OriginFuncDec(oxleft.getLine(), oxleft.getColumn(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // origin_func_decl ::= ORIGIN type ID LPAREN error RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location fnamexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fnamexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location lpxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lpxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location erxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location erxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(lpxright, "syntax error in type argument of origin function");
      RESULT = null;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // origin_func_decl ::= ORIGIN type LPAREN type RPAREN 
            {
              Stmt RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location ret_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location ret_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location arg_typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location arg_typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(ret_typexright, "missing type or origin function name");
      RESULT = null;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("origin_func_decl",9, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // distinct_decl ::= DISTINCT refer_name id_or_subid_list 
            {
              Stmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DistinctSymbolDec(dxleft.getLine(), dxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distinct_decl",10, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id_or_subid_list ::= id_or_subid id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(exright, "missing COMMA"); 
        RESULT = new SymbolArrayList(e, n);
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id_or_subid_list ::= id_or_subid extra_commas id_or_subid_list 
            {
              SymbolArrayList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra COMMA"); 
      RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid_list",50, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id_or_subid ::= ID 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id), s.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("id_or_subid",49, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // distribution_decl ::= DISTRIBUTION ID EQ refer_name LPAREN opt_expression_list RPAREN 
            {
              Stmt RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xright;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionDec(dxleft.getLine(), dxleft.getColumn(), sym(id),
      sym(name), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("distribution_decl",11, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // refer_name ::= ID 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // refer_name ::= ID DOT refer_name 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("refer_name",51, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dependency_statement_body ::= DISTRIB expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("dependency_statement_body",28, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter_decl ::= PARAM type ID 
            {
              Stmt RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter_decl ::= PARAM type ID COLON expression 
            {
              Stmt RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",12, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= literal 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= function_call 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		FuncCallExpr e = (FuncCallExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= list_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= map_construct_expression 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		MapInitExpr e = (MapInitExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= quantified_formula 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= set_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= number_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= if_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= case_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.toString().intern()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= INT_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IntExpr(exleft.getLine(), exleft.getColumn(), e.intValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new DoubleExpr(exleft.getLine(), exleft.getColumn(), e.doubleValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new BooleanExpr(exleft.getLine(), exleft.getColumn(), e.booleanValue()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= NULL 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NullExpr(exleft.getLine(), exleft.getColumn()); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operation_expr ::= expression POWER expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.POWER, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operation_expr ::= expression LT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operation_expr ::= expression GT expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operation_expr ::= expression AND expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operation_expr ::= expression OR expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operation_expr ::= expression DOUBLERIGHTARROW expression 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.IMPLY, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operation_expr ::= expression LBRACKET error 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "operation expression syntax error"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("operation_expr",19, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(mxleft.getLine(), mxleft.getColumn(), new IntExpr(exleft.getLine(), exleft.getColumn(), 0), OpExpr.MINUS, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(nxleft.getLine(), nxleft.getColumn(), null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unary_operation_expr ::= AT expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new OpExpr(axleft.getLine(), axleft.getColumn(), null, OpExpr.AT, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unary_operation_expr ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("unary_operation_expr",20, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(fxleft.getLine(), fxleft.getColumn(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QuantifiedFormulaExpr(exxleft.getLine(), exxleft.getColumn(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("quantified_formula",21, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // function_call ::= refer_name LPAREN opt_expression_list RPAREN 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // function_call ::= refer_name LPAREN error 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "error in body of function call"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // function_call ::= refer_name 
            {
              FuncCallExpr RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if_expr ::= IF expression THEN expression ELSE expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("if_expr",24, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_expr ::= IF expression THEN expression 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("if_expr",24, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // case_expr ::= CASE expression IN map_construct_expression 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		MapInitExpr e2 = (MapInitExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 
    if (e1 == null) {
      error(e1xleft, "error in case expression");
      RESULT = null;
    } else if (e2 == null) {
      error(e2xleft, "error in case expression");
      RESULT = null;
    } else {
      RESULT = new CaseExpr(cxleft.getLine(), cxleft.getColumn(), e1, e2.values);
    } 
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("case_expr",25, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // opt_expression_list ::= 
            {
              ExprList RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("opt_expression_list",34, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_list ::= expression 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_list ::= expression extra_commas expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location ecxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location ecxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(ecxleft, "extra commas in expression list");
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_list",35, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("list_construct_expression",22, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // semi_colon_separated_expression_list ::= semi_ending_expression_list semi_colon_separated_expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), elst); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // semi_colon_separated_expression_list ::= semi_ending_expression_list expression_list 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), 
    new ExprList(new ListInitExpr(e2xleft.getLine(), e2xleft.getColumn(), e2), null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_colon_separated_expression_list",33, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // semi_ending_expression_list ::= expression_list SEMI 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_ending_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // semi_ending_expression_list ::= semi_ending_expression_list SEMI 
            {
              ExprList RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(sxleft, "extra semicolon"); 
      RESULT = e;
    
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("semi_ending_expression_list",36, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              MapInitExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("map_construct_expression",26, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_pair_list ::= expression RIGHTARROW expression 
            {
              ExprTupleList RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ExprTupleList(e1, e2, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("expression_pair_list",37, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), new ImplicitSetExpr(tyxleft.getLine(), tyxleft.getColumn(), ty, null, null)); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 error(errxleft, "expecting number expression here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("number_expr",23, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // set_expr ::= explicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ExplicitSetExpr e = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // set_expr ::= implicit_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		ImplicitSetExpr e = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // set_expr ::= tuple_set 
            {
              SetExpr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		TupleSetExpr e = (TupleSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("set_expr",29, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              ExplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("explicit_set",30, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // implicit_set ::= LBRACE type ID RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location tyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location tyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // implicit_set ::= LBRACE type ID COLON error RBRACE 
            {
              ImplicitSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(errxleft, "malformed expression in implicit set"); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("implicit_set",31, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tuple_set ::= LBRACE expression_list FOR type_var_lst COLON expression RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",32, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tuple_set ::= LBRACE expression_list FOR type_var_lst RBRACE 
            {
              TupleSetExpr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		Location elstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xleft;
		Location elstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).xright;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, null); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("tuple_set",32, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // evidence_stmt ::= OBS evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence_stmt",13, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // evidence_stmt ::= OBS error 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence_stmt",13, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // evidence ::= value_evidence 
            {
              Stmt RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = e; 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("evidence",15, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new ValueEvidence(e1xleft.getLine(), e1xleft.getColumn(), e1, e2); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // value_evidence ::= error EQ expression 
            {
              Stmt RESULT =null;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error(errxleft, "incorrect first expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // value_evidence ::= expression EQ error 
            {
              Stmt RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		Location errxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location errxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		error(errxleft, "incorrect second expression"); RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("value_evidence",16, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // query_stmt ::= QUERY expression 
            {
              Stmt RESULT =null;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.peek()).value;
		 RESULT = new QueryStmt(qxleft.getLine(), qxleft.getColumn(), e); 
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // query_stmt ::= QUERY error 
            {
              Stmt RESULT =null;
		Location qxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xleft;
		Location qxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).xright;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error(qxright, "invalid query"); 
      RESULT = null;
              CUP$BLOGParser$result = parser.getSymbolFactory().newSymbol("query_stmt",14, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)), ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.peek()), RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$BLOGParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
              return CUP$BLOGParser$do_action_part00000000(
                               CUP$BLOGParser$act_num,
                               CUP$BLOGParser$parser,
                               CUP$BLOGParser$stack,
                               CUP$BLOGParser$top);
    }
}

