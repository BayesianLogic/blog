
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 12 00:36:44 PDT 2014
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 12 00:36:44 PDT 2014
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\366\000\002\003\003\000\002\004\002\000\002\004" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\004\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\053\006\000\002" +
    "\056\004\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\055\004\000\002\055\003\000\002\055\005" +
    "\000\002\055\004\000\002\055\004\000\002\054\010\000" +
    "\002\071\002\000\002\071\004\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\062\004\000\002\062\004\000\002\063\004" +
    "\000\002\063\004\000\002\072\006\000\002\072\004\000" +
    "\002\072\005\000\002\072\006\000\002\072\005\000\002" +
    "\072\005\000\002\072\006\000\002\011\011\000\002\011" +
    "\010\000\002\012\010\000\002\012\007\000\002\013\007" +
    "\000\002\013\006\000\002\013\006\000\002\013\007\000" +
    "\002\064\003\000\002\064\003\000\002\065\004\000\002" +
    "\065\004\000\002\066\004\000\002\066\004\000\002\067" +
    "\004\000\002\067\004\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\002\000" +
    "\002\074\007\000\002\074\007\000\002\074\010\000\002" +
    "\074\010\000\002\074\006\000\002\074\006\000\002\074" +
    "\006\000\002\074\005\000\002\014\011\000\002\014\010" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\010\000\002\014\010\000\002\015\006\000\002" +
    "\015\005\000\002\076\003\000\002\076\005\000\002\076" +
    "\004\000\002\076\005\000\002\061\003\000\002\061\003" +
    "\000\002\061\004\000\002\061\004\000\002\060\003\000" +
    "\002\060\005\000\002\060\004\000\002\060\004\000\002" +
    "\060\003\000\002\060\006\000\002\060\006\000\002\060" +
    "\007\000\002\075\003\000\002\075\006\000\002\075\004" +
    "\000\002\016\012\000\002\016\011\000\002\077\003\000" +
    "\002\077\005\000\002\041\004\000\002\041\003\000\002" +
    "\041\007\000\002\041\005\000\002\041\006\000\002\041" +
    "\006\000\002\040\004\000\002\040\002\000\002\017\006" +
    "\000\002\017\005\000\002\017\010\000\002\017\007\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\030\004\000\002\030" +
    "\005\000\002\030\004\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\006\000\002\030\005\000" +
    "\002\030\003\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\005\000\002\031\005" +
    "\000\002\031\004\000\002\032\006\000\002\032\006\000" +
    "\002\032\004\000\002\032\004\000\002\032\005\000\002" +
    "\032\005\000\002\032\006\000\002\032\005\000\002\032" +
    "\005\000\002\032\006\000\002\034\006\000\002\033\007" +
    "\000\002\047\003\000\002\047\002\000\002\050\005\000" +
    "\002\050\006\000\002\050\006\000\002\050\003\000\002" +
    "\050\004\000\002\050\004\000\002\035\005\000\002\035" +
    "\005\000\002\046\005\000\002\046\006\000\002\046\005" +
    "\000\002\046\006\000\002\046\004\000\002\046\004\000" +
    "\002\036\005\000\002\051\007\000\002\051\005\000\002" +
    "\037\004\000\002\037\004\000\002\037\004\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\005" +
    "\000\002\044\010\000\002\044\006\000\002\045\011\000" +
    "\002\045\007\000\002\020\005\000\002\020\004\000\002" +
    "\022\003\000\002\022\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\024\005\000\002\024\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\005\000" +
    "\002\021\004\000\002\025\003\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\032\002\000\003\026\007\021\010\022\011" +
    "\030\012\020\013\025\014\032\015\017\016\035\021\027" +
    "\067\005\001\002\000\032\002\ufff9\003\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\021\ufff9\067\ufff9\001\002\000\020\005\uffb8\033\043\055" +
    "\uffb8\056\uffb8\071\u018d\072\u0188\073\uffb8\001\002\000\032" +
    "\002\ufff1\003\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\021\ufff1\067\ufff1\001\002" +
    "\000\004\002\uffff\001\002\000\032\002\ufffd\003\026\007" +
    "\021\010\022\011\030\012\020\013\025\014\032\015\017" +
    "\016\035\021\027\067\005\001\002\000\032\002\ufff7\003" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\021\ufff7\067\ufff7\001\002\000\032\002" +
    "\ufff5\003\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\021\ufff5\067\ufff5\001\002\000" +
    "\032\002\ufff6\003\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\021\ufff6\067\ufff6\001" +
    "\002\000\032\002\ufffa\003\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\021\ufffa\067" +
    "\ufffa\001\002\000\032\002\ufff3\003\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\021" +
    "\ufff3\067\ufff3\001\002\000\004\002\u0186\001\002\000\102" +
    "\003\u0179\022\122\023\063\025\120\026\143\027\137\030" +
    "\077\031\072\032\064\033\043\040\140\041\110\042\076" +
    "\043\071\044\106\045\123\046\070\047\102\050\142\051" +
    "\134\052\107\053\121\054\124\056\125\057\101\060\100" +
    "\061\104\062\136\067\126\071\074\073\130\075\067\001" +
    "\002\000\010\017\041\020\042\033\043\001\002\000\004" +
    "\033\u0162\001\002\000\010\017\041\020\042\033\043\001" +
    "\002\000\032\002\ufff0\003\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\067" +
    "\ufff0\001\002\000\032\002\ufffb\003\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\021" +
    "\ufffb\067\ufffb\001\002\000\004\033\043\001\002\000\006" +
    "\002\ufffc\064\u012d\001\002\000\004\033\u0126\001\002\000" +
    "\010\017\041\020\042\033\043\001\002\000\004\002\001" +
    "\001\002\000\102\003\u010e\022\122\023\063\025\120\026" +
    "\143\027\137\030\077\031\072\032\064\033\043\040\140" +
    "\041\110\042\076\043\071\044\106\045\123\046\070\047" +
    "\102\050\142\051\134\052\107\053\121\054\124\056\125" +
    "\057\101\060\100\061\104\062\136\067\126\071\074\073" +
    "\130\075\067\001\002\000\032\002\ufff2\003\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\021\ufff2\067\ufff2\001\002\000\032\002\ufff4\003\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\021\ufff4\067\ufff4\001\002\000\010\017\041" +
    "\020\042\033\043\001\002\000\160\002\uffec\003\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076" +
    "\uffec\001\002\000\160\002\uffe3\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3\001\002" +
    "\000\004\076\261\001\002\000\004\047\u010a\001\002\000" +
    "\004\047\u0105\001\002\000\162\002\uff91\003\uff91\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\066\235\067" +
    "\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91" +
    "\076\uff91\001\002\000\004\033\060\001\002\000\160\002" +
    "\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\040" +
    "\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed\074" +
    "\uffed\075\054\076\053\001\002\000\160\002\uffeb\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\051" +
    "\076\050\001\002\000\160\002\uffea\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\070\uffea" +
    "\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\001" +
    "\002\000\160\002\uffe0\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\067\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\001\002\000\160" +
    "\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1" +
    "\074\uffe1\075\uffe1\076\uffe1\001\002\000\160\002\uffe2\003" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\001\002\000\006\075\057\076\056\001\002" +
    "\000\104\003\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\067\uffe8\071\uffe8\073\uffe8\075" +
    "\055\076\uffe8\001\002\000\160\002\uffe7\003\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\067\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7" +
    "\001\002\000\160\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\001\002\000" +
    "\160\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\076\uffe5\001\002\000\036\002\uff86" +
    "\003\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\021\uff86\064\061\065\062\067\uff86" +
    "\001\002\000\032\002\uff87\003\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\021\uff87" +
    "\067\uff87\001\002\000\102\003\116\022\122\023\063\025" +
    "\120\026\143\027\137\030\077\031\072\032\064\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\056\125\057\101\060\100\061\104\062\136\067\126\071" +
    "\074\073\130\075\067\001\002\000\012\003\377\017\041" +
    "\020\042\033\375\001\002\000\154\002\uff79\003\uff79\004" +
    "\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79" +
    "\013\uff79\014\uff79\015\uff79\016\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79" +
    "\032\uff79\033\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044" +
    "\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79" +
    "\053\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061" +
    "\uff79\062\uff79\063\uff79\064\uff79\067\uff79\070\uff79\071\uff79" +
    "\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\001\002\000" +
    "\012\040\140\042\373\057\101\071\374\001\002\000\154" +
    "\002\uff7a\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a" +
    "\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\067" +
    "\uff7a\070\uff7a\071\313\072\uff7a\073\uff7a\074\uff7a\075\371" +
    "\076\uff7a\001\002\000\104\003\116\022\122\023\063\025" +
    "\120\026\143\027\137\030\077\031\072\032\064\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\056\125\057\101\060\100\061\104\062\136\067\126\071" +
    "\212\073\130\075\067\076\uff37\001\002\000\102\003\uff6e" +
    "\022\uff6e\023\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e" +
    "\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052" +
    "\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e" +
    "\062\uff6e\067\uff6e\071\uff6e\073\uff6e\075\uff6e\001\002\000" +
    "\102\003\uff71\022\uff71\023\uff71\025\uff71\026\uff71\027\uff71" +
    "\030\uff71\031\uff71\032\uff71\033\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\053\uff71\054\uff71\056\uff71\057\uff71\060" +
    "\uff71\061\uff71\062\uff71\067\uff71\071\uff71\073\uff71\075\uff71" +
    "\001\002\000\154\002\uff78\003\uff78\004\uff78\005\uff78\006" +
    "\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78\014\uff78" +
    "\015\uff78\016\uff78\021\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78\063" +
    "\uff78\064\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78" +
    "\074\uff78\075\uff78\076\uff78\001\002\000\102\003\116\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\074\073\130\075\067\001\002\000\102" +
    "\003\116\022\122\023\063\025\120\026\143\027\137\030" +
    "\077\031\072\032\064\033\043\040\140\041\110\042\076" +
    "\043\071\044\106\045\123\046\070\047\102\050\142\051" +
    "\134\052\107\053\121\054\124\056\125\057\101\060\100" +
    "\061\104\062\136\067\126\071\300\073\130\075\067\001" +
    "\002\000\154\002\uff81\003\uff81\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015" +
    "\uff81\016\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81" +
    "\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81" +
    "\064\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\076\uff81\001\002\000\102\003\116\022\uff72" +
    "\023\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032" +
    "\uff72\033\043\040\140\041\uff72\042\uff72\043\071\044\106" +
    "\045\123\046\070\047\uff72\050\uff72\051\uff72\052\uff72\053" +
    "\uff72\054\uff72\056\uff72\057\101\060\uff72\061\uff72\062\uff72" +
    "\067\uff72\071\074\073\uff72\075\067\001\002\000\154\002" +
    "\uff75\003\uff75\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\021" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\033\uff75\040\uff75\041\uff75\042" +
    "\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75" +
    "\051\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057" +
    "\uff75\060\uff75\061\uff75\062\uff75\063\uff75\064\uff75\067\uff75" +
    "\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076" +
    "\uff75\001\002\000\102\003\uff67\022\uff67\023\uff67\025\uff67" +
    "\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67" +
    "\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67\056" +
    "\uff67\057\uff67\060\uff67\061\uff67\062\uff67\067\uff67\071\uff67" +
    "\073\uff67\075\uff67\001\002\000\102\003\116\022\122\023" +
    "\063\025\120\026\143\027\137\030\077\031\072\032\064" +
    "\033\043\040\140\041\110\042\076\043\071\044\106\045" +
    "\123\046\070\047\102\050\142\051\134\052\107\053\121" +
    "\054\124\056\125\057\101\060\100\061\104\062\136\067" +
    "\126\071\074\073\130\075\067\001\002\000\102\003\uff6d" +
    "\022\uff6d\023\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d" +
    "\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\053\uff6d\054\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d" +
    "\062\uff6d\067\uff6d\071\uff6d\073\uff6d\075\uff6d\001\002\000" +
    "\154\002\uff83\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056" +
    "\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\076\uff83\001\002\000\102\003\uff66\022\uff66\023\uff66" +
    "\025\uff66\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033" +
    "\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045\uff66" +
    "\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66\067\uff66" +
    "\071\uff66\073\uff66\075\uff66\001\002\000\154\002\uff7b\003" +
    "\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b" +
    "\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060" +
    "\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\001" +
    "\002\000\102\003\uff70\022\uff70\023\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\056\uff70\057" +
    "\uff70\060\uff70\061\uff70\062\uff70\067\uff70\071\uff70\073\uff70" +
    "\075\uff70\001\002\000\102\003\uff6a\022\uff6a\023\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\067\uff6a\071" +
    "\uff6a\073\uff6a\075\uff6a\001\002\000\102\003\uff73\022\uff73" +
    "\023\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032" +
    "\uff73\033\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73" +
    "\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053" +
    "\uff73\054\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73" +
    "\067\uff73\071\uff73\073\uff73\075\uff73\001\002\000\154\002" +
    "\uff20\003\uff20\004\uff20\005\uff20\006\uff20\007\uff20\010\uff20" +
    "\011\uff20\012\uff20\013\uff20\014\uff20\015\uff20\016\uff20\021" +
    "\uff20\022\uff20\023\uff20\024\uff20\025\uff20\026\uff20\027\uff20" +
    "\030\uff20\031\uff20\032\uff20\033\uff20\040\uff20\041\uff20\042" +
    "\uff20\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20" +
    "\051\uff20\052\uff20\053\uff20\054\uff20\055\uff20\056\uff20\057" +
    "\uff20\060\uff20\061\uff20\062\uff20\063\uff20\064\uff20\067\uff20" +
    "\070\uff20\071\uff20\072\uff20\073\uff20\074\uff20\075\uff20\076" +
    "\uff20\001\002\000\074\002\uff84\003\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\021" +
    "\uff84\041\154\042\145\043\150\044\156\045\151\046\160" +
    "\047\161\050\157\051\165\052\163\053\147\054\153\060" +
    "\146\061\164\062\152\064\350\067\uff84\075\162\001\002" +
    "\000\154\002\uff4f\003\uff4f\004\uff4f\005\uff4f\006\uff4f\007" +
    "\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f" +
    "\016\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\026" +
    "\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\040\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047" +
    "\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f" +
    "\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064" +
    "\uff4f\067\uff4f\070\uff4f\071\uff4f\072\303\073\uff4f\074\uff4f" +
    "\075\uff4f\076\uff4f\001\002\000\154\002\uff22\003\uff22\004" +
    "\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22\012\uff22" +
    "\013\uff22\014\uff22\015\uff22\016\uff22\021\uff22\022\uff22\023" +
    "\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22\031\uff22" +
    "\032\uff22\033\uff22\040\uff22\041\uff22\042\uff22\043\uff22\044" +
    "\uff22\045\uff22\046\uff22\047\uff22\050\uff22\051\uff22\052\uff22" +
    "\053\uff22\054\uff22\055\uff22\056\uff22\057\uff22\060\uff22\061" +
    "\uff22\062\uff22\063\uff22\064\uff22\067\uff22\070\uff22\071\uff22" +
    "\072\uff22\073\uff22\074\uff22\075\uff22\076\uff22\001\002\000" +
    "\154\002\uff7d\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d" +
    "\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d" +
    "\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\001\002\000\040\041\110\042\344\043\071" +
    "\044\106\045\123\046\070\047\102\050\142\051\134\052" +
    "\107\053\121\054\124\060\100\061\104\062\136\001\002" +
    "\000\154\002\uff7f\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007" +
    "\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\001\002\000\154\002\uff74\003\uff74\004" +
    "\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012\uff74" +
    "\013\uff74\014\uff74\015\uff74\016\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061" +
    "\uff74\062\uff74\063\uff74\064\uff74\067\uff74\070\uff74\071\uff74" +
    "\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74\001\002\000" +
    "\102\003\uff69\022\uff69\023\uff69\025\uff69\026\uff69\027\uff69" +
    "\030\uff69\031\uff69\032\uff69\033\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\044\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\056\uff69\057\uff69\060" +
    "\uff69\061\uff69\062\uff69\067\uff69\071\uff69\073\uff69\075\uff69" +
    "\001\002\000\012\003\337\017\041\020\042\033\335\001" +
    "\002\000\102\003\uff6f\022\uff6f\023\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\040\uff6f\041" +
    "\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\062\uff6f\067\uff6f\071\uff6f\073\uff6f" +
    "\075\uff6f\001\002\000\102\003\uff68\022\uff68\023\uff68\025" +
    "\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\056\uff68\057\uff68\060\uff68\061\uff68\062\uff68\067\uff68\071" +
    "\uff68\073\uff68\075\uff68\001\002\000\004\033\043\001\002" +
    "\000\014\003\327\017\041\020\042\033\043\073\325\001" +
    "\002\000\102\003\116\022\122\023\063\025\120\026\143" +
    "\027\137\030\077\031\072\032\064\033\043\040\140\041" +
    "\110\042\076\043\071\044\106\045\123\046\070\047\102" +
    "\050\142\051\134\052\107\053\121\054\124\056\125\057" +
    "\101\060\100\061\104\062\136\067\126\071\074\073\130" +
    "\075\067\001\002\000\110\003\116\017\041\020\042\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\212\073\130\074\uff37\075\067\001\002" +
    "\000\154\002\uff82\003\uff82\004\uff82\005\uff82\006\uff82\007" +
    "\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\040\uff82" +
    "\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055\uff82" +
    "\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064" +
    "\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\001\002\000\154\002\uff80\003\uff80\004" +
    "\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\021\uff80\022\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\033\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80" +
    "\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061" +
    "\uff80\062\uff80\063\uff80\064\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\001\002\000" +
    "\154\002\uff7e\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\040\uff7e\041" +
    "\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e" +
    "\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e" +
    "\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075" +
    "\uff7e\076\uff7e\001\002\000\102\003\uff6b\022\uff6b\023\uff6b" +
    "\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054" +
    "\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\067\uff6b" +
    "\071\uff6b\073\uff6b\075\uff6b\001\002\000\154\002\uff21\003" +
    "\uff21\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011\uff21" +
    "\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\021\uff21\022" +
    "\uff21\023\uff21\024\uff21\025\uff21\026\uff21\027\uff21\030\uff21" +
    "\031\uff21\032\uff21\033\uff21\040\uff21\041\uff21\042\uff21\043" +
    "\uff21\044\uff21\045\uff21\046\uff21\047\uff21\050\uff21\051\uff21" +
    "\052\uff21\053\uff21\054\uff21\055\uff21\056\uff21\057\uff21\060" +
    "\uff21\061\uff21\062\uff21\063\uff21\064\uff21\067\uff21\070\uff21" +
    "\071\uff21\072\uff21\073\uff21\074\uff21\075\uff21\076\uff21\001" +
    "\002\000\102\003\uff65\022\uff65\023\uff65\025\uff65\026\uff65" +
    "\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\040\uff65\041" +
    "\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65" +
    "\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\056\uff65\057" +
    "\uff65\060\uff65\061\uff65\062\uff65\067\uff65\071\uff65\073\uff65" +
    "\075\uff65\001\002\000\154\002\uff76\003\uff76\004\uff76\005" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76" +
    "\014\uff76\015\uff76\016\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\033\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76" +
    "\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062" +
    "\uff76\063\uff76\064\uff76\067\uff76\070\uff76\071\uff76\072\uff76" +
    "\073\uff76\074\uff76\075\uff76\076\uff76\001\002\000\102\003" +
    "\116\022\122\023\063\025\120\026\143\027\137\030\077" +
    "\031\072\032\064\033\043\040\140\041\110\042\076\043" +
    "\071\044\106\045\123\046\070\047\102\050\142\051\134" +
    "\052\107\053\121\054\124\056\125\057\101\060\100\061" +
    "\104\062\136\067\126\071\074\073\130\075\067\001\002" +
    "\000\154\002\uff7c\003\uff7c\004\uff7c\005\uff7c\006\uff7c\007" +
    "\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c" +
    "\016\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\040\uff7c" +
    "\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c" +
    "\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\001\002\000\102\003\uff6c\022\uff6c\023" +
    "\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c" +
    "\033\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045" +
    "\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\067" +
    "\uff6c\071\uff6c\073\uff6c\075\uff6c\001\002\000\154\002\uff77" +
    "\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011" +
    "\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\031\uff77\032\uff77\033\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77" +
    "\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\001\002\000\154\002\uff48\003\uff48\004\uff48\005\uff48\006" +
    "\uff48\007\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014\uff48" +
    "\015\uff48\016\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025" +
    "\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48" +
    "\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046" +
    "\uff48\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054\uff48" +
    "\055\uff48\056\uff48\057\uff48\060\uff48\061\uff48\062\uff48\063" +
    "\uff48\064\uff48\067\uff48\070\uff48\071\uff48\072\uff48\073\uff48" +
    "\074\uff48\075\162\076\uff48\001\002\000\154\002\uff72\003" +
    "\116\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72" +
    "\012\uff72\013\uff72\014\uff72\015\uff72\016\uff72\021\uff72\022" +
    "\uff72\023\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\031\uff72\032\uff72\033\043\040\140\041\uff72\042\uff72\043" +
    "\071\044\106\045\123\046\070\047\uff72\050\uff72\051\uff72" +
    "\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\101\060" +
    "\uff72\061\uff72\062\uff72\063\uff72\064\uff72\067\uff72\070\uff72" +
    "\071\074\072\uff72\073\uff72\074\uff72\075\067\076\uff72\001" +
    "\002\000\154\002\uff67\003\116\004\uff67\005\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025\uff67" +
    "\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\043\040" +
    "\140\041\110\042\076\043\071\044\106\045\123\046\070" +
    "\047\102\050\142\051\134\052\107\053\121\054\124\055" +
    "\uff67\056\uff67\057\101\060\uff67\061\uff67\062\uff67\063\uff67" +
    "\064\uff67\067\uff67\070\uff67\071\074\072\uff67\073\uff67\074" +
    "\uff67\075\067\076\uff67\001\002\000\140\002\uff69\003\116" +
    "\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\014\uff69\015\uff69\016\uff69\021\uff69\022\uff69" +
    "\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\043\040\140\041\110\042\076\043\071" +
    "\044\106\045\123\046\070\055\uff69\056\uff69\057\101\060" +
    "\uff69\061\uff69\062\uff69\063\uff69\064\uff69\067\uff69\070\uff69" +
    "\071\074\072\uff69\073\uff69\074\uff69\075\067\076\uff69\001" +
    "\002\000\154\002\uff71\003\116\004\uff71\005\uff71\006\uff71" +
    "\007\uff71\010\uff71\011\uff71\012\uff71\013\uff71\014\uff71\015" +
    "\uff71\016\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71" +
    "\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\043\040" +
    "\140\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71" +
    "\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055" +
    "\uff71\056\uff71\057\101\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\067\uff71\070\uff71\071\074\072\uff71\073\uff71\074" +
    "\uff71\075\067\076\uff71\001\002\000\154\002\uff6f\003\116" +
    "\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012" +
    "\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\043\040\140\041\uff6f\042\uff6f\043\uff6f" +
    "\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\101\060\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\067\uff6f\070\uff6f\071" +
    "\074\072\uff6f\073\uff6f\074\uff6f\075\067\076\uff6f\001\002" +
    "\000\154\002\uff65\003\116\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65" +
    "\016\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\026" +
    "\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\043\040\140" +
    "\041\110\042\076\043\071\044\106\045\123\046\070\047" +
    "\102\050\142\051\134\052\107\053\121\054\124\055\uff65" +
    "\056\uff65\057\101\060\100\061\104\062\uff65\063\uff65\064" +
    "\uff65\067\uff65\070\uff65\071\074\072\uff65\073\uff65\074\uff65" +
    "\075\067\076\uff65\001\002\000\140\002\uff68\003\116\004" +
    "\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68\012\uff68" +
    "\013\uff68\014\uff68\015\uff68\016\uff68\021\uff68\022\uff68\023" +
    "\uff68\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68" +
    "\032\uff68\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\055\uff68\056\uff68\057\101\060\uff68" +
    "\061\uff68\062\uff68\063\uff68\064\uff68\067\uff68\070\uff68\071" +
    "\074\072\uff68\073\uff68\074\uff68\075\067\076\uff68\001\002" +
    "\000\154\002\uff73\003\116\004\uff73\005\uff73\006\uff73\007" +
    "\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73\015\uff73" +
    "\016\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73\026" +
    "\uff73\027\uff73\030\uff73\031\uff73\032\uff73\033\043\040\140" +
    "\041\uff73\042\uff73\043\071\044\106\045\123\046\070\047" +
    "\uff73\050\uff73\051\uff73\052\uff73\053\uff73\054\uff73\055\uff73" +
    "\056\uff73\057\101\060\uff73\061\uff73\062\uff73\063\uff73\064" +
    "\uff73\067\uff73\070\uff73\071\074\072\uff73\073\uff73\074\uff73" +
    "\075\067\076\uff73\001\002\000\154\002\uff64\003\177\004" +
    "\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64" +
    "\013\uff64\014\uff64\015\uff64\016\uff64\021\uff64\022\uff64\023" +
    "\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64" +
    "\032\uff64\033\uff64\040\uff64\041\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64" +
    "\053\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061" +
    "\uff64\062\uff64\063\uff64\064\uff64\067\uff64\070\uff64\071\uff64" +
    "\072\uff64\073\uff64\074\uff64\075\uff64\076\uff64\001\002\000" +
    "\154\002\uff70\003\116\004\uff70\005\uff70\006\uff70\007\uff70" +
    "\010\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\033\043\040\140\041" +
    "\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056" +
    "\uff70\057\101\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70" +
    "\067\uff70\070\uff70\071\074\072\uff70\073\uff70\074\uff70\075" +
    "\067\076\uff70\001\002\000\140\002\uff6c\003\116\004\uff6c" +
    "\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\015\uff6c\016\uff6c\021\uff6c\022\uff6c\023\uff6c" +
    "\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\033\043\040\140\041\110\042\076\043\071\044\106" +
    "\045\123\046\070\055\uff6c\056\uff6c\057\101\060\uff6c\061" +
    "\uff6c\062\uff6c\063\uff6c\064\uff6c\067\uff6c\070\uff6c\071\074" +
    "\072\uff6c\073\uff6c\074\uff6c\075\067\076\uff6c\001\002\000" +
    "\154\002\uff6e\003\116\004\uff6e\005\uff6e\006\uff6e\007\uff6e" +
    "\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e" +
    "\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\043\040\140\041" +
    "\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e" +
    "\050\uff6e\051\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\101\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e" +
    "\067\uff6e\070\uff6e\071\074\072\uff6e\073\uff6e\074\uff6e\075" +
    "\067\076\uff6e\001\002\000\140\002\uff6d\003\116\004\uff6d" +
    "\005\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013" +
    "\uff6d\014\uff6d\015\uff6d\016\uff6d\021\uff6d\022\uff6d\023\uff6d" +
    "\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\033\043\040\140\041\110\042\076\043\071\044\106" +
    "\045\123\046\070\055\uff6d\056\uff6d\057\101\060\uff6d\061" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\067\uff6d\070\uff6d\071\074" +
    "\072\uff6d\073\uff6d\074\uff6d\075\067\076\uff6d\001\002\000" +
    "\102\003\116\022\122\023\063\025\120\026\143\027\137" +
    "\030\077\031\072\032\064\033\043\040\140\041\110\042" +
    "\076\043\071\044\106\045\123\046\070\047\102\050\142" +
    "\051\134\052\107\053\121\054\124\056\125\057\101\060" +
    "\100\061\104\062\136\067\126\071\074\073\130\075\067" +
    "\001\002\000\140\002\uff6a\003\116\004\uff6a\005\uff6a\006" +
    "\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\016\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\055\uff6a\056\uff6a\057\101\060\uff6a\061\uff6a\062\uff6a" +
    "\063\uff6a\064\uff6a\067\uff6a\070\uff6a\071\074\072\uff6a\073" +
    "\uff6a\074\uff6a\075\067\076\uff6a\001\002\000\154\002\uff66" +
    "\003\116\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\021\uff66" +
    "\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\030" +
    "\uff66\031\uff66\032\uff66\033\043\040\140\041\110\042\076" +
    "\043\071\044\106\045\123\046\070\047\102\050\142\051" +
    "\134\052\107\053\121\054\124\055\uff66\056\uff66\057\101" +
    "\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66\067\uff66\070" +
    "\uff66\071\074\072\uff66\073\uff66\074\uff66\075\067\076\uff66" +
    "\001\002\000\140\002\uff6b\003\116\004\uff6b\005\uff6b\006" +
    "\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b" +
    "\015\uff6b\016\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\055\uff6b\056\uff6b\057\101\060\uff6b\061\uff6b\062\uff6b" +
    "\063\uff6b\064\uff6b\067\uff6b\070\uff6b\071\074\072\uff6b\073" +
    "\uff6b\074\uff6b\075\067\076\uff6b\001\002\000\140\002\uff58" +
    "\003\uff58\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58\011" +
    "\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016\uff58\021\uff58" +
    "\022\uff58\023\uff58\024\uff58\025\uff58\026\uff58\027\uff58\030" +
    "\uff58\031\uff58\032\uff58\033\uff58\040\uff58\041\154\042\145" +
    "\043\150\044\156\045\151\046\160\055\uff58\056\uff58\057" +
    "\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58\067\uff58" +
    "\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\162\076" +
    "\uff58\001\002\000\154\002\uff53\003\uff53\004\uff53\005\uff53" +
    "\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53\013\uff53\014" +
    "\uff53\015\uff53\016\uff53\021\uff53\022\uff53\023\uff53\024\uff53" +
    "\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033" +
    "\uff53\040\uff53\041\154\042\145\043\150\044\156\045\151" +
    "\046\160\047\161\050\157\051\165\052\163\053\147\054" +
    "\153\055\uff53\056\uff53\057\uff53\060\uff53\061\uff53\062\uff53" +
    "\063\uff53\064\uff53\067\uff53\070\uff53\071\uff53\072\uff53\073" +
    "\uff53\074\uff53\075\162\076\uff53\001\002\000\140\002\uff57" +
    "\003\uff57\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011" +
    "\uff57\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\021\uff57" +
    "\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57\030" +
    "\uff57\031\uff57\032\uff57\033\uff57\040\uff57\041\154\042\145" +
    "\043\150\044\156\045\151\046\160\055\uff57\056\uff57\057" +
    "\uff57\060\uff57\061\uff57\062\uff57\063\uff57\064\uff57\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\075\162\076" +
    "\uff57\001\002\000\044\041\154\042\145\043\150\044\156" +
    "\045\151\046\160\047\161\050\157\051\165\052\163\053" +
    "\147\054\153\060\146\061\164\062\152\075\162\076\172" +
    "\001\002\000\154\002\uff51\003\uff51\004\uff51\005\uff51\006" +
    "\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51" +
    "\015\uff51\016\uff51\021\uff51\022\uff51\023\uff51\024\uff51\025" +
    "\uff51\026\uff51\027\uff51\030\uff51\031\uff51\032\uff51\033\uff51" +
    "\040\uff51\041\uff51\042\uff51\043\uff51\044\uff51\045\uff51\046" +
    "\uff51\047\uff51\050\uff51\051\uff51\052\uff51\053\uff51\054\uff51" +
    "\055\uff51\056\uff51\057\uff51\060\uff51\061\uff51\062\uff51\063" +
    "\uff51\064\uff51\067\uff51\070\uff51\071\uff51\072\uff51\073\uff51" +
    "\074\uff51\075\uff51\076\uff51\001\002\000\140\002\uff5a\003" +
    "\uff5a\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a" +
    "\012\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\021\uff5a\022" +
    "\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a" +
    "\031\uff5a\032\uff5a\033\uff5a\040\uff5a\041\154\042\145\043" +
    "\150\044\156\045\151\046\160\055\uff5a\056\uff5a\057\uff5a" +
    "\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\067\uff5a\070" +
    "\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\162\076\uff5a" +
    "\001\002\000\154\002\uff5b\003\uff5b\004\uff5b\005\uff5b\006" +
    "\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b" +
    "\015\uff5b\016\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b\025" +
    "\uff5b\026\uff5b\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b" +
    "\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b" +
    "\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b" +
    "\074\uff5b\075\162\076\uff5b\001\002\000\140\002\uff59\003" +
    "\uff59\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59" +
    "\012\uff59\013\uff59\014\uff59\015\uff59\016\uff59\021\uff59\022" +
    "\uff59\023\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59" +
    "\031\uff59\032\uff59\033\uff59\040\uff59\041\154\042\145\043" +
    "\150\044\156\045\151\046\160\055\uff59\056\uff59\057\uff59" +
    "\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\067\uff59\070" +
    "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\162\076\uff59" +
    "\001\002\000\154\002\uff5d\003\uff5d\004\uff5d\005\uff5d\006" +
    "\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d" +
    "\015\uff5d\016\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025" +
    "\uff5d\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d" +
    "\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046" +
    "\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d" +
    "\055\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063" +
    "\uff5d\064\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d" +
    "\074\uff5d\075\162\076\uff5d\001\002\000\154\002\uff63\003" +
    "\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\014\uff63\015\uff63\016\uff63\021\uff63\022" +
    "\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63\030\uff63" +
    "\031\uff63\032\uff63\033\uff63\040\uff63\041\uff63\042\uff63\043" +
    "\uff63\044\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\067\uff63\070\uff63" +
    "\071\uff63\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\001" +
    "\002\000\154\002\uff60\003\uff60\004\uff60\005\uff60\006\uff60" +
    "\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60\015" +
    "\uff60\016\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60" +
    "\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\040" +
    "\uff60\041\uff60\042\uff60\043\150\044\156\045\151\046\160" +
    "\047\uff60\050\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055" +
    "\uff60\056\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063\uff60" +
    "\064\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074" +
    "\uff60\075\162\076\uff60\001\002\000\140\002\uff55\003\uff55" +
    "\004\uff55\005\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012" +
    "\uff55\013\uff55\014\uff55\015\uff55\016\uff55\021\uff55\022\uff55" +
    "\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031" +
    "\uff55\032\uff55\033\uff55\040\uff55\041\154\042\145\043\150" +
    "\044\156\045\151\046\160\055\uff55\056\uff55\057\uff55\060" +
    "\uff55\061\uff55\062\uff55\063\uff55\064\uff55\067\uff55\070\uff55" +
    "\071\uff55\072\uff55\073\uff55\074\uff55\075\162\076\uff55\001" +
    "\002\000\154\002\uff52\003\uff52\004\uff52\005\uff52\006\uff52" +
    "\007\uff52\010\uff52\011\uff52\012\uff52\013\uff52\014\uff52\015" +
    "\uff52\016\uff52\021\uff52\022\uff52\023\uff52\024\uff52\025\uff52" +
    "\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52\040" +
    "\uff52\041\154\042\145\043\150\044\156\045\151\046\160" +
    "\047\161\050\157\051\165\052\163\053\147\054\153\055" +
    "\uff52\056\uff52\057\uff52\060\146\061\164\062\uff52\063\uff52" +
    "\064\uff52\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52\074" +
    "\uff52\075\162\076\uff52\001\002\000\154\002\uff5c\003\uff5c" +
    "\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\015\uff5c\016\uff5c\021\uff5c\022\uff5c" +
    "\023\uff5c\024\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031" +
    "\uff5c\032\uff5c\033\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c" +
    "\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052" +
    "\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\061\uff5c\062\uff5c\063\uff5c\064\uff5c\067\uff5c\070\uff5c\071" +
    "\uff5c\072\uff5c\073\uff5c\074\uff5c\075\162\076\uff5c\001\002" +
    "\000\154\002\uff5e\003\uff5e\004\uff5e\005\uff5e\006\uff5e\007" +
    "\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e" +
    "\016\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e\025\uff5e\026" +
    "\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055\uff5e" +
    "\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e" +
    "\075\162\076\uff5e\001\002\000\140\002\uff56\003\uff56\004" +
    "\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56\012\uff56" +
    "\013\uff56\014\uff56\015\uff56\016\uff56\021\uff56\022\uff56\023" +
    "\uff56\024\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56" +
    "\032\uff56\033\uff56\040\uff56\041\154\042\145\043\150\044" +
    "\156\045\151\046\160\055\uff56\056\uff56\057\uff56\060\uff56" +
    "\061\uff56\062\uff56\063\uff56\064\uff56\067\uff56\070\uff56\071" +
    "\uff56\072\uff56\073\uff56\074\uff56\075\162\076\uff56\001\002" +
    "\000\154\002\uff54\003\uff54\004\uff54\005\uff54\006\uff54\007" +
    "\uff54\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54" +
    "\016\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\026" +
    "\uff54\027\uff54\030\uff54\031\uff54\032\uff54\033\uff54\040\uff54" +
    "\041\154\042\145\043\150\044\156\045\151\046\160\047" +
    "\161\050\157\051\165\052\163\053\147\054\153\055\uff54" +
    "\056\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54\064" +
    "\uff54\067\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074\uff54" +
    "\075\162\076\uff54\001\002\000\154\002\uff5f\003\uff5f\004" +
    "\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\016\uff5f\021\uff5f\022\uff5f\023" +
    "\uff5f\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f" +
    "\032\uff5f\033\uff5f\040\uff5f\041\uff5f\042\uff5f\043\150\044" +
    "\156\045\151\046\160\047\uff5f\050\uff5f\051\uff5f\052\uff5f" +
    "\053\uff5f\054\uff5f\055\uff5f\056\uff5f\057\uff5f\060\uff5f\061" +
    "\uff5f\062\uff5f\063\uff5f\064\uff5f\067\uff5f\070\uff5f\071\uff5f" +
    "\072\uff5f\073\uff5f\074\uff5f\075\162\076\uff5f\001\002\000" +
    "\102\003\116\022\122\023\063\025\120\026\143\027\137" +
    "\030\077\031\072\032\064\033\043\040\140\041\110\042" +
    "\076\043\071\044\106\045\123\046\070\047\102\050\142" +
    "\051\134\052\107\053\121\054\124\056\125\057\101\060" +
    "\100\061\104\062\136\067\126\071\317\073\130\075\067" +
    "\001\002\000\062\024\uff7a\033\uffed\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\060\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\070\uff7a\071\313\072\uff7a\074\uff7a\075\054\076\053" +
    "\001\002\000\102\003\116\022\122\023\063\025\120\026" +
    "\143\027\137\030\077\031\072\032\064\033\043\040\140" +
    "\041\110\042\076\043\071\044\106\045\123\046\070\047" +
    "\102\050\142\051\134\052\107\053\121\054\124\056\125" +
    "\057\101\060\100\061\104\062\136\067\126\071\300\073" +
    "\130\075\067\001\002\000\004\074\277\001\002\000\054" +
    "\024\uff33\041\154\042\145\043\150\044\156\045\151\046" +
    "\160\047\161\050\157\051\165\052\163\053\147\054\153" +
    "\060\146\061\164\062\152\063\266\070\264\072\263\074" +
    "\uff33\075\162\001\002\000\104\003\116\022\122\023\063" +
    "\025\120\026\143\027\137\030\077\031\072\032\064\033" +
    "\043\040\140\041\110\042\076\043\071\044\106\045\123" +
    "\046\070\047\102\050\142\051\134\052\107\053\121\054" +
    "\124\056\125\057\101\060\100\061\104\062\136\067\126" +
    "\071\074\073\130\075\067\076\261\001\002\000\004\074" +
    "\257\001\002\000\006\024\226\074\uff38\001\002\000\004" +
    "\033\221\001\002\000\006\065\223\074\222\001\002\000" +
    "\154\002\uff1d\003\uff1d\004\uff1d\005\uff1d\006\uff1d\007\uff1d" +
    "\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d\016" +
    "\uff1d\021\uff1d\022\uff1d\023\uff1d\024\uff1d\025\uff1d\026\uff1d" +
    "\027\uff1d\030\uff1d\031\uff1d\032\uff1d\033\uff1d\040\uff1d\041" +
    "\uff1d\042\uff1d\043\uff1d\044\uff1d\045\uff1d\046\uff1d\047\uff1d" +
    "\050\uff1d\051\uff1d\052\uff1d\053\uff1d\054\uff1d\055\uff1d\056" +
    "\uff1d\057\uff1d\060\uff1d\061\uff1d\062\uff1d\063\uff1d\064\uff1d" +
    "\067\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074\uff1d\075" +
    "\uff1d\076\uff1d\001\002\000\102\003\116\022\122\023\063" +
    "\025\120\026\143\027\137\030\077\031\072\032\064\033" +
    "\043\040\140\041\110\042\076\043\071\044\106\045\123" +
    "\046\070\047\102\050\142\051\134\052\107\053\121\054" +
    "\124\056\125\057\101\060\100\061\104\062\136\067\126" +
    "\071\074\073\130\075\067\001\002\000\044\041\154\042" +
    "\145\043\150\044\156\045\151\046\160\047\161\050\157" +
    "\051\165\052\163\053\147\054\153\060\146\061\164\062" +
    "\152\074\225\075\162\001\002\000\154\002\uff1e\003\uff1e" +
    "\004\uff1e\005\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012" +
    "\uff1e\013\uff1e\014\uff1e\015\uff1e\016\uff1e\021\uff1e\022\uff1e" +
    "\023\uff1e\024\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031" +
    "\uff1e\032\uff1e\033\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e" +
    "\044\uff1e\045\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\052" +
    "\uff1e\053\uff1e\054\uff1e\055\uff1e\056\uff1e\057\uff1e\060\uff1e" +
    "\061\uff1e\062\uff1e\063\uff1e\064\uff1e\067\uff1e\070\uff1e\071" +
    "\uff1e\072\uff1e\073\uff1e\074\uff1e\075\uff1e\076\uff1e\001\002" +
    "\000\010\017\041\020\042\033\043\001\002\000\006\065" +
    "\254\074\253\001\002\000\012\017\041\020\042\033\240" +
    "\063\242\001\002\000\010\017\041\020\042\033\232\001" +
    "\002\000\020\017\uff91\020\uff91\033\uff91\063\234\066\235" +
    "\075\uff91\076\uff91\001\002\000\010\017\uffd4\020\uffd4\033" +
    "\uffd4\001\002\000\010\017\041\020\042\033\043\001\002" +
    "\000\004\033\043\001\002\000\160\002\uff90\003\uff90\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\001\002\000\012\065\uffcd\071\uffcd\072\uffcd\074\uffcd" +
    "\001\002\000\030\017\uff91\020\uff91\033\uff91\063\246\065" +
    "\uffd2\066\235\071\uffd2\072\uffd2\074\uffd2\075\uff91\076\uff91" +
    "\001\002\000\010\017\uffd5\020\uffd5\033\uffd5\001\002\000" +
    "\010\017\041\020\042\033\043\001\002\000\012\065\uffce" +
    "\071\uffce\072\uffce\074\uffce\001\002\000\012\065\uffcf\071" +
    "\uffcf\072\uffcf\074\uffcf\001\002\000\012\017\041\020\042" +
    "\033\043\063\252\001\002\000\022\017\041\020\042\033" +
    "\043\063\250\065\uffd1\071\uffd1\072\uffd1\074\uffd1\001\002" +
    "\000\012\065\uffd3\071\uffd3\072\uffd3\074\uffd3\001\002\000" +
    "\012\017\uffd7\020\uffd7\033\uffd7\063\uffd7\001\002\000\012" +
    "\065\uffd0\071\uffd0\072\uffd0\074\uffd0\001\002\000\012\017" +
    "\uffd6\020\uffd6\033\uffd6\063\uffd6\001\002\000\154\002\uff1b" +
    "\003\uff1b\004\uff1b\005\uff1b\006\uff1b\007\uff1b\010\uff1b\011" +
    "\uff1b\012\uff1b\013\uff1b\014\uff1b\015\uff1b\016\uff1b\021\uff1b" +
    "\022\uff1b\023\uff1b\024\uff1b\025\uff1b\026\uff1b\027\uff1b\030" +
    "\uff1b\031\uff1b\032\uff1b\033\uff1b\040\uff1b\041\uff1b\042\uff1b" +
    "\043\uff1b\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050\uff1b\051" +
    "\uff1b\052\uff1b\053\uff1b\054\uff1b\055\uff1b\056\uff1b\057\uff1b" +
    "\060\uff1b\061\uff1b\062\uff1b\063\uff1b\064\uff1b\067\uff1b\070" +
    "\uff1b\071\uff1b\072\uff1b\073\uff1b\074\uff1b\075\uff1b\076\uff1b" +
    "\001\002\000\102\003\116\022\122\023\063\025\120\026" +
    "\143\027\137\030\077\031\072\032\064\033\043\040\140" +
    "\041\110\042\076\043\071\044\106\045\123\046\070\047" +
    "\102\050\142\051\134\052\107\053\121\054\124\056\125" +
    "\057\101\060\100\061\104\062\136\067\126\071\074\073" +
    "\130\075\067\001\002\000\044\041\154\042\145\043\150" +
    "\044\156\045\151\046\160\047\161\050\157\051\165\052" +
    "\163\053\147\054\153\060\146\061\164\062\152\074\256" +
    "\075\162\001\002\000\154\002\uff1c\003\uff1c\004\uff1c\005" +
    "\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c\013\uff1c" +
    "\014\uff1c\015\uff1c\016\uff1c\021\uff1c\022\uff1c\023\uff1c\024" +
    "\uff1c\025\uff1c\026\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c" +
    "\033\uff1c\040\uff1c\041\uff1c\042\uff1c\043\uff1c\044\uff1c\045" +
    "\uff1c\046\uff1c\047\uff1c\050\uff1c\051\uff1c\052\uff1c\053\uff1c" +
    "\054\uff1c\055\uff1c\056\uff1c\057\uff1c\060\uff1c\061\uff1c\062" +
    "\uff1c\063\uff1c\064\uff1c\067\uff1c\070\uff1c\071\uff1c\072\uff1c" +
    "\073\uff1c\074\uff1c\075\uff1c\076\uff1c\001\002\000\154\002" +
    "\uff1f\003\uff1f\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010\uff1f" +
    "\011\uff1f\012\uff1f\013\uff1f\014\uff1f\015\uff1f\016\uff1f\021" +
    "\uff1f\022\uff1f\023\uff1f\024\uff1f\025\uff1f\026\uff1f\027\uff1f" +
    "\030\uff1f\031\uff1f\032\uff1f\033\uff1f\040\uff1f\041\uff1f\042" +
    "\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f" +
    "\051\uff1f\052\uff1f\053\uff1f\054\uff1f\055\uff1f\056\uff1f\057" +
    "\uff1f\060\uff1f\061\uff1f\062\uff1f\063\uff1f\064\uff1f\067\uff1f" +
    "\070\uff1f\071\uff1f\072\uff1f\073\uff1f\074\uff1f\075\uff1f\076" +
    "\uff1f\001\002\000\044\041\154\042\145\043\150\044\156" +
    "\045\151\046\160\047\161\050\157\051\165\052\163\053" +
    "\147\054\153\060\146\061\164\062\152\075\162\076\262" +
    "\001\002\000\160\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\001\002\000" +
    "\154\002\uff50\003\uff50\004\uff50\005\uff50\006\uff50\007\uff50" +
    "\010\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015\uff50\016" +
    "\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50\026\uff50" +
    "\027\uff50\030\uff50\031\uff50\032\uff50\033\uff50\040\uff50\041" +
    "\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50" +
    "\050\uff50\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50\056" +
    "\uff50\057\uff50\060\uff50\061\uff50\062\uff50\063\uff50\064\uff50" +
    "\067\uff50\070\uff50\071\uff50\072\uff50\073\uff50\074\uff50\075" +
    "\uff50\076\uff50\001\002\000\114\003\uff32\022\uff32\023\uff32" +
    "\024\uff32\025\uff32\026\uff32\027\uff32\030\uff32\031\uff32\032" +
    "\uff32\033\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32" +
    "\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053" +
    "\uff32\054\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062\uff32" +
    "\064\uff32\067\uff32\071\uff32\072\uff32\073\uff32\074\uff32\075" +
    "\uff32\076\uff32\001\002\000\102\003\116\022\122\023\063" +
    "\025\120\026\143\027\137\030\077\031\072\032\064\033" +
    "\043\040\140\041\110\042\076\043\071\044\106\045\123" +
    "\046\070\047\102\050\142\051\134\052\107\053\121\054" +
    "\124\056\125\057\101\060\100\061\104\062\136\067\126" +
    "\071\074\073\130\075\067\001\002\000\114\003\uff31\022" +
    "\uff31\023\uff31\024\uff31\025\uff31\026\uff31\027\uff31\030\uff31" +
    "\031\uff31\032\uff31\033\uff31\040\uff31\041\uff31\042\uff31\043" +
    "\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051\uff31" +
    "\052\uff31\053\uff31\054\uff31\056\uff31\057\uff31\060\uff31\061" +
    "\uff31\062\uff31\064\uff31\067\uff31\071\uff31\072\271\073\uff31" +
    "\074\uff31\075\uff31\076\uff31\001\002\000\102\003\116\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\212\073\130\075\067\001\002\000\116" +
    "\003\uff33\022\uff33\023\uff33\024\uff33\025\uff33\026\uff33\027" +
    "\uff33\030\uff33\031\uff33\032\uff33\033\uff33\040\uff33\041\154" +
    "\042\145\043\150\044\156\045\151\046\160\047\161\050" +
    "\157\051\165\052\163\053\147\054\153\056\uff33\057\uff33" +
    "\060\146\061\164\062\152\063\266\064\uff33\067\uff33\071" +
    "\uff33\072\263\073\uff33\074\uff33\075\162\076\uff33\001\002" +
    "\000\114\003\uff36\022\uff36\023\uff36\024\uff36\025\uff36\026" +
    "\uff36\027\uff36\030\uff36\031\uff36\032\uff36\033\uff36\040\uff36" +
    "\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36\047" +
    "\uff36\050\uff36\051\uff36\052\uff36\053\uff36\054\uff36\056\uff36" +
    "\057\uff36\060\uff36\061\uff36\062\uff36\064\uff36\067\uff36\071" +
    "\uff36\072\uff36\073\uff36\074\uff36\075\uff36\076\uff36\001\002" +
    "\000\120\003\uffbd\005\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd" +
    "\076\uffbd\001\002\000\046\041\154\042\145\043\150\044" +
    "\156\045\151\046\160\047\161\050\157\051\165\052\163" +
    "\053\147\054\153\060\146\061\164\062\152\063\273\074" +
    "\uff26\075\162\001\002\000\102\003\116\022\122\023\063" +
    "\025\120\026\143\027\137\030\077\031\072\032\064\033" +
    "\043\040\140\041\110\042\076\043\071\044\106\045\123" +
    "\046\070\047\102\050\142\051\134\052\107\053\121\054" +
    "\124\056\125\057\101\060\100\061\104\062\136\067\126" +
    "\071\074\073\130\075\067\001\002\000\004\074\uff27\001" +
    "\002\000\044\041\154\042\145\043\150\044\156\045\151" +
    "\046\160\047\161\050\157\051\165\052\163\053\147\054" +
    "\153\060\146\061\164\062\152\070\264\075\162\001\002" +
    "\000\120\003\uffbe\005\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\067\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\001\002\000\154\002\uff28\003\uff28\004\uff28\005" +
    "\uff28\006\uff28\007\uff28\010\uff28\011\uff28\012\uff28\013\uff28" +
    "\014\uff28\015\uff28\016\uff28\021\uff28\022\uff28\023\uff28\024" +
    "\uff28\025\uff28\026\uff28\027\uff28\030\uff28\031\uff28\032\uff28" +
    "\033\uff28\040\uff28\041\uff28\042\uff28\043\uff28\044\uff28\045" +
    "\uff28\046\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28" +
    "\054\uff28\055\uff28\056\uff28\057\uff28\060\uff28\061\uff28\062" +
    "\uff28\063\uff28\064\uff28\067\uff28\070\uff28\071\uff28\072\uff28" +
    "\073\uff28\074\uff28\075\uff28\076\uff28\001\002\000\102\003" +
    "\116\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\067\uffc0\071\300\073\uffc0\075\067\001\002" +
    "\000\120\003\310\022\uff45\023\uff45\024\uff45\025\uff45\026" +
    "\uff45\027\uff45\030\uff45\031\uff45\032\uff45\033\uff45\040\uff45" +
    "\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047" +
    "\uff45\050\uff45\051\uff45\052\uff45\053\uff45\054\uff45\056\uff45" +
    "\057\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\067" +
    "\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075\162" +
    "\076\uff45\001\002\000\154\002\uff4f\003\304\004\uff4f\005" +
    "\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f" +
    "\014\uff4f\015\uff4f\016\uff4f\021\uff4f\022\uff4f\023\uff4f\024" +
    "\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f" +
    "\033\uff4f\040\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f" +
    "\054\uff4f\055\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062" +
    "\uff4f\063\uff4f\064\uff4f\067\uff4f\070\uff4f\071\uff4f\072\303" +
    "\073\uff4f\074\uff4f\075\uff4f\076\uff4f\001\002\000\154\002" +
    "\uff4b\003\305\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b" +
    "\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\021" +
    "\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b" +
    "\030\uff4b\031\uff4b\032\uff4b\033\uff4b\040\uff4b\041\uff4b\042" +
    "\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b" +
    "\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\057" +
    "\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064\uff4b\067\uff4b" +
    "\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076" +
    "\uff4b\001\002\000\154\002\uff4e\003\uff4e\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e" +
    "\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033" +
    "\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e" +
    "\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\054" +
    "\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e" +
    "\063\uff4e\064\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073" +
    "\uff4e\074\uff4e\075\uff4e\076\uff4e\001\002\000\154\002\uff4c" +
    "\003\uff4c\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c\011" +
    "\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\021\uff4c" +
    "\022\uff4c\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030" +
    "\uff4c\031\uff4c\032\uff4c\033\uff4c\040\uff4c\041\uff4c\042\uff4c" +
    "\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051" +
    "\uff4c\052\uff4c\053\uff4c\054\uff4c\055\uff4c\056\uff4c\057\uff4c" +
    "\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\067\uff4c\070" +
    "\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c" +
    "\001\002\000\154\002\uff47\003\uff47\004\uff47\005\uff47\006" +
    "\uff47\007\uff47\010\uff47\011\uff47\012\uff47\013\uff47\014\uff47" +
    "\015\uff47\016\uff47\021\uff47\022\uff47\023\uff47\024\uff47\025" +
    "\uff47\026\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47" +
    "\040\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046" +
    "\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47" +
    "\055\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062\uff47\063" +
    "\uff47\064\uff47\067\uff47\070\uff47\071\uff47\072\uff47\073\uff47" +
    "\074\uff47\075\uff47\076\uff47\001\002\000\102\003\116\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\212\073\130\075\067\001\002\000\154" +
    "\002\uff46\003\uff46\004\uff46\005\uff46\006\uff46\007\uff46\010" +
    "\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46" +
    "\021\uff46\022\uff46\023\uff46\024\uff46\025\uff46\026\uff46\027" +
    "\uff46\030\uff46\031\uff46\032\uff46\033\uff46\040\uff46\041\uff46" +
    "\042\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050" +
    "\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055\uff46\056\uff46" +
    "\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\064\uff46\067" +
    "\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46" +
    "\076\uff46\001\002\000\114\003\uff35\022\uff35\023\uff35\024" +
    "\uff35\025\uff35\026\uff35\027\uff35\030\uff35\031\uff35\032\uff35" +
    "\033\uff35\040\uff35\041\uff35\042\uff35\043\uff35\044\uff35\045" +
    "\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35" +
    "\054\uff35\056\uff35\057\uff35\060\uff35\061\uff35\062\uff35\064" +
    "\uff35\067\uff35\071\uff35\072\uff35\073\uff35\074\uff35\075\uff35" +
    "\076\uff35\001\002\000\154\002\uff45\003\310\004\uff45\005" +
    "\uff45\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45" +
    "\014\uff45\015\uff45\016\uff45\021\uff45\022\uff45\023\uff45\024" +
    "\uff45\025\uff45\026\uff45\027\uff45\030\uff45\031\uff45\032\uff45" +
    "\033\uff45\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045" +
    "\uff45\046\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45" +
    "\054\uff45\055\uff45\056\uff45\057\uff45\060\uff45\061\uff45\062" +
    "\uff45\063\uff45\064\uff45\067\uff45\070\uff45\071\uff45\072\uff45" +
    "\073\uff45\074\uff45\075\162\076\uff45\001\002\000\104\003" +
    "\116\022\122\023\063\025\120\026\143\027\137\030\077" +
    "\031\072\032\064\033\043\040\140\041\110\042\076\043" +
    "\071\044\106\045\123\046\070\047\102\050\142\051\134" +
    "\052\107\053\121\054\124\056\125\057\101\060\100\061" +
    "\104\062\136\067\126\071\212\072\uff37\073\130\075\067" +
    "\001\002\000\004\072\316\001\002\000\006\072\uff38\074" +
    "\uff38\001\002\000\154\002\uff3a\003\uff3a\004\uff3a\005\uff3a" +
    "\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014" +
    "\uff3a\015\uff3a\016\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a" +
    "\025\uff3a\026\uff3a\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033" +
    "\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a" +
    "\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054" +
    "\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a" +
    "\063\uff3a\064\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\073" +
    "\uff3a\074\uff3a\075\uff3a\076\uff3a\001\002\000\102\003\116" +
    "\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\067\uffbf\071\300\073\uffbf\075\067\001\002\000" +
    "\044\041\154\042\145\043\150\044\156\045\151\046\160" +
    "\047\161\050\157\051\165\052\163\053\147\054\153\060" +
    "\146\061\164\062\152\063\323\075\162\001\002\000\050" +
    "\003\322\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046" +
    "\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f" +
    "\060\uff4f\061\uff4f\062\uff4f\063\uff4f\072\303\075\uff4f\001" +
    "\002\000\154\002\uff4d\003\uff4d\004\uff4d\005\uff4d\006\uff4d" +
    "\007\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\016\uff4d\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d" +
    "\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\040" +
    "\uff4d\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d" +
    "\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d\055" +
    "\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d" +
    "\064\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073\uff4d\074" +
    "\uff4d\075\uff4d\076\uff4d\001\002\000\102\003\116\022\122" +
    "\023\063\025\120\026\143\027\137\030\077\031\072\032" +
    "\064\033\043\040\140\041\110\042\076\043\071\044\106" +
    "\045\123\046\070\047\102\050\142\051\134\052\107\053" +
    "\121\054\124\056\125\057\101\060\100\061\104\062\136" +
    "\067\126\071\212\073\130\075\067\001\002\000\114\003" +
    "\uff34\022\uff34\023\uff34\024\uff34\025\uff34\026\uff34\027\uff34" +
    "\030\uff34\031\uff34\032\uff34\033\uff34\040\uff34\041\uff34\042" +
    "\uff34\043\uff34\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34" +
    "\051\uff34\052\uff34\053\uff34\054\uff34\056\uff34\057\uff34\060" +
    "\uff34\061\uff34\062\uff34\064\uff34\067\uff34\071\uff34\072\uff34" +
    "\073\uff34\074\uff34\075\uff34\076\uff34\001\002\000\110\003" +
    "\116\017\041\020\042\022\122\023\063\025\120\026\143" +
    "\027\137\030\077\031\072\032\064\033\043\040\140\041" +
    "\110\042\076\043\071\044\106\045\123\046\070\047\102" +
    "\050\142\051\134\052\107\053\121\054\124\056\125\057" +
    "\101\060\100\061\104\062\136\067\126\071\212\073\130" +
    "\074\uff37\075\067\001\002\000\154\002\uff25\003\uff25\004" +
    "\uff25\005\uff25\006\uff25\007\uff25\010\uff25\011\uff25\012\uff25" +
    "\013\uff25\014\uff25\015\uff25\016\uff25\021\uff25\022\uff25\023" +
    "\uff25\024\uff25\025\uff25\026\uff25\027\uff25\030\uff25\031\uff25" +
    "\032\uff25\033\uff25\040\uff25\041\uff25\042\uff25\043\uff25\044" +
    "\uff25\045\uff25\046\uff25\047\uff25\050\uff25\051\uff25\052\uff25" +
    "\053\uff25\054\uff25\055\uff25\056\uff25\057\uff25\060\uff25\061" +
    "\uff25\062\uff25\063\uff25\064\uff25\067\uff25\070\uff25\071\uff25" +
    "\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25\001\002\000" +
    "\154\002\uff23\003\uff23\004\uff23\005\uff23\006\uff23\007\uff23" +
    "\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015\uff23\016" +
    "\uff23\021\uff23\022\uff23\023\uff23\024\uff23\025\uff23\026\uff23" +
    "\027\uff23\030\uff23\031\uff23\032\uff23\033\uff23\040\uff23\041" +
    "\uff23\042\uff23\043\uff23\044\uff23\045\uff23\046\uff23\047\uff23" +
    "\050\uff23\051\uff23\052\uff23\053\uff23\054\uff23\055\uff23\056" +
    "\uff23\057\uff23\060\uff23\061\uff23\062\uff23\063\uff23\064\uff23" +
    "\067\uff23\070\uff23\071\uff23\072\uff23\073\uff23\074\uff23\075" +
    "\uff23\076\uff23\001\002\000\154\002\uff24\003\uff24\004\uff24" +
    "\005\uff24\006\uff24\007\uff24\010\uff24\011\uff24\012\uff24\013" +
    "\uff24\014\uff24\015\uff24\016\uff24\021\uff24\022\uff24\023\uff24" +
    "\024\uff24\025\uff24\026\uff24\027\uff24\030\uff24\031\uff24\032" +
    "\uff24\033\uff24\040\uff24\041\uff24\042\uff24\043\uff24\044\uff24" +
    "\045\uff24\046\uff24\047\uff24\050\uff24\051\uff24\052\uff24\053" +
    "\uff24\054\uff24\055\uff24\056\uff24\057\uff24\060\uff24\061\uff24" +
    "\062\uff24\063\uff24\064\uff24\067\uff24\070\uff24\071\uff24\072" +
    "\uff24\073\uff24\074\uff24\075\uff24\076\uff24\001\002\000\004" +
    "\071\332\001\002\000\104\003\116\022\122\023\063\025" +
    "\120\026\143\027\137\030\077\031\072\032\064\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\056\125\057\101\060\100\061\104\062\136\067\126\071" +
    "\212\072\uff37\073\130\075\067\001\002\000\004\072\334" +
    "\001\002\000\154\002\uff39\003\uff39\004\uff39\005\uff39\006" +
    "\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39" +
    "\015\uff39\016\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025" +
    "\uff39\026\uff39\027\uff39\030\uff39\031\uff39\032\uff39\033\uff39" +
    "\040\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046" +
    "\uff39\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063" +
    "\uff39\064\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39" +
    "\074\uff39\075\uff39\076\uff39\001\002\000\106\003\116\022" +
    "\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\066\235\067\uff91\071\074\073\uff91\075\067\076\uff91" +
    "\001\002\000\102\003\116\022\122\023\063\025\120\026" +
    "\143\027\137\030\077\031\072\032\064\033\340\040\140" +
    "\041\110\042\076\043\071\044\106\045\123\046\070\047" +
    "\102\050\142\051\134\052\107\053\121\054\124\056\125" +
    "\057\101\060\100\061\104\062\136\067\126\071\074\073" +
    "\130\075\067\001\002\000\154\002\uff41\003\uff41\004\uff41" +
    "\005\uff41\006\uff41\007\uff41\010\uff41\011\uff41\012\uff41\013" +
    "\uff41\014\uff41\015\uff41\016\uff41\021\uff41\022\uff41\023\uff41" +
    "\024\uff41\025\uff41\026\uff41\027\uff41\030\uff41\031\uff41\032" +
    "\uff41\033\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044\uff41" +
    "\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053" +
    "\uff41\054\uff41\055\uff41\056\uff41\057\uff41\060\uff41\061\uff41" +
    "\062\uff41\063\uff41\064\uff41\067\uff41\070\uff41\071\uff41\072" +
    "\uff41\073\uff41\074\uff41\075\uff41\076\uff41\001\002\000\156" +
    "\002\uff91\003\343\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\066" +
    "\235\067\uff91\070\uff91\071\074\072\uff91\073\uff91\074\uff91" +
    "\075\067\076\uff91\001\002\000\154\002\uff3d\003\uff3d\004" +
    "\uff3d\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d" +
    "\013\uff3d\014\uff3d\015\uff3d\016\uff3d\021\uff3d\022\uff3d\023" +
    "\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030\uff3d\031\uff3d" +
    "\032\uff3d\033\uff3d\040\uff3d\041\154\042\145\043\150\044" +
    "\156\045\151\046\160\047\161\050\157\051\165\052\163" +
    "\053\147\054\153\055\uff3d\056\uff3d\057\uff3d\060\146\061" +
    "\164\062\152\063\uff3d\064\uff3d\067\uff3d\070\uff3d\071\uff3d" +
    "\072\uff3d\073\uff3d\074\uff3d\075\162\076\uff3d\001\002\000" +
    "\154\002\uff43\003\uff43\004\uff43\005\uff43\006\uff43\007\uff43" +
    "\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43\015\uff43\016" +
    "\uff43\021\uff43\022\uff43\023\uff43\024\uff43\025\uff43\026\uff43" +
    "\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43\040\uff43\041" +
    "\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43\056" +
    "\uff43\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43" +
    "\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43\074\uff43\075" +
    "\162\076\uff43\001\002\000\154\002\uff3b\003\uff3b\004\uff3b" +
    "\005\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013" +
    "\uff3b\014\uff3b\015\uff3b\016\uff3b\021\uff3b\022\uff3b\023\uff3b" +
    "\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b\031\uff3b\032" +
    "\uff3b\033\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b" +
    "\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053" +
    "\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b" +
    "\062\uff3b\063\uff3b\064\uff3b\067\uff3b\070\uff3b\071\uff3b\072" +
    "\uff3b\073\uff3b\074\uff3b\075\uff3b\076\uff3b\001\002\000\102" +
    "\003\uff72\022\uff72\023\uff72\025\uff72\026\uff72\027\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051" +
    "\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057\uff72\060\uff72" +
    "\061\uff72\062\uff72\067\uff72\071\uff72\073\uff72\075\uff72\001" +
    "\002\000\102\003\116\022\122\023\063\025\120\026\143" +
    "\027\137\030\077\031\072\032\064\033\043\040\140\041" +
    "\110\042\076\043\071\044\106\045\123\046\070\047\102" +
    "\050\142\051\134\052\107\053\121\054\124\056\125\057" +
    "\101\060\100\061\104\062\136\067\126\071\074\073\130" +
    "\075\067\001\002\000\154\002\uff61\003\uff61\004\uff61\005" +
    "\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61" +
    "\014\uff61\015\uff61\016\uff61\021\uff61\022\uff61\023\uff61\024" +
    "\uff61\025\uff61\026\uff61\027\uff61\030\uff61\031\uff61\032\uff61" +
    "\033\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045" +
    "\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61" +
    "\054\uff61\055\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062" +
    "\uff61\063\uff61\064\uff61\067\uff61\070\uff61\071\uff61\072\uff61" +
    "\073\uff61\074\uff61\075\uff61\076\uff61\001\002\000\154\002" +
    "\uff3c\003\uff3c\004\uff3c\005\uff3c\006\uff3c\007\uff3c\010\uff3c" +
    "\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c\021" +
    "\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c\027\uff3c" +
    "\030\uff3c\031\uff3c\032\uff3c\033\uff3c\040\uff3c\041\uff3c\042" +
    "\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c" +
    "\051\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057" +
    "\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\067\uff3c" +
    "\070\uff3c\071\uff3c\072\uff3c\073\uff3c\074\uff3c\075\162\076" +
    "\uff3c\001\002\000\032\002\uff85\003\uff85\007\uff85\010\uff85" +
    "\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\021" +
    "\uff85\067\uff85\001\002\000\154\002\uff49\003\uff49\004\uff49" +
    "\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\015\uff49\016\uff49\021\uff49\022\uff49\023\uff49" +
    "\024\uff49\025\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032" +
    "\uff49\033\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49" +
    "\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053" +
    "\uff49\054\uff49\055\uff49\056\uff49\057\uff49\060\uff49\061\uff49" +
    "\062\uff49\063\uff49\064\uff49\067\uff49\070\uff49\071\uff49\072" +
    "\uff49\073\uff49\074\uff49\075\162\076\uff49\001\002\000\154" +
    "\002\uff4a\003\uff4a\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010" +
    "\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a\027" +
    "\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\040\uff4a\041\uff4a" +
    "\042\uff4a\043\150\044\156\045\151\046\160\047\uff4a\050" +
    "\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a" +
    "\057\uff4a\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\067" +
    "\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\162" +
    "\076\uff4a\001\002\000\154\002\uff62\003\uff62\004\uff62\005" +
    "\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62" +
    "\014\uff62\015\uff62\016\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62\032\uff62" +
    "\033\uff62\040\uff62\041\154\042\145\043\150\044\156\045" +
    "\151\046\160\047\161\050\157\051\165\052\163\053\147" +
    "\054\153\055\uff62\056\uff62\057\uff62\060\146\061\164\062" +
    "\152\063\uff62\064\uff62\067\uff62\070\uff62\071\uff62\072\uff62" +
    "\073\uff62\074\uff62\075\162\076\uff62\001\002\000\004\076" +
    "\370\001\002\000\004\076\367\001\002\000\106\003\116" +
    "\022\122\023\063\025\120\026\143\027\137\030\077\031" +
    "\072\032\064\033\043\040\140\041\110\042\076\043\071" +
    "\044\106\045\123\046\070\047\102\050\142\051\134\052" +
    "\107\053\121\054\124\056\125\057\101\060\100\061\104" +
    "\062\136\064\357\067\126\071\212\073\130\075\067\076" +
    "\uff38\001\002\000\104\003\116\022\122\023\063\025\120" +
    "\026\143\027\137\030\077\031\072\032\064\033\043\040" +
    "\140\041\110\042\076\043\071\044\106\045\123\046\070" +
    "\047\102\050\142\051\134\052\107\053\121\054\124\056" +
    "\125\057\101\060\100\061\104\062\136\064\362\067\126" +
    "\071\212\073\130\075\067\001\002\000\004\076\uff2a\001" +
    "\002\000\106\003\116\022\122\023\063\025\120\026\143" +
    "\027\137\030\077\031\072\032\064\033\043\040\140\041" +
    "\110\042\076\043\071\044\106\045\123\046\070\047\102" +
    "\050\142\051\134\052\107\053\121\054\124\056\125\057" +
    "\101\060\100\061\104\062\136\064\357\067\126\071\212" +
    "\073\130\075\067\076\uff29\001\002\000\102\003\116\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\212\073\130\075\067\001\002\000\004" +
    "\076\uff2e\001\002\000\106\003\116\022\122\023\063\025" +
    "\120\026\143\027\137\030\077\031\072\032\064\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\056\125\057\101\060\100\061\104\062\136\064\357\067" +
    "\126\071\212\073\130\075\067\076\uff2c\001\002\000\004" +
    "\076\uff2d\001\002\000\106\003\116\022\122\023\063\025" +
    "\120\026\143\027\137\030\077\031\072\032\064\033\043" +
    "\040\140\041\110\042\076\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\056\125\057\101\060\100\061\104\062\136\064\357\067" +
    "\126\071\212\073\130\075\067\076\uff2b\001\002\000\154" +
    "\002\uff30\003\uff30\004\uff30\005\uff30\006\uff30\007\uff30\010" +
    "\uff30\011\uff30\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30" +
    "\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30\026\uff30\027" +
    "\uff30\030\uff30\031\uff30\032\uff30\033\uff30\040\uff30\041\uff30" +
    "\042\uff30\043\uff30\044\uff30\045\uff30\046\uff30\047\uff30\050" +
    "\uff30\051\uff30\052\uff30\053\uff30\054\uff30\055\uff30\056\uff30" +
    "\057\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064\uff30\067" +
    "\uff30\070\uff30\071\uff30\072\uff30\073\uff30\074\uff30\075\uff30" +
    "\076\uff30\001\002\000\154\002\uff2f\003\uff2f\004\uff2f\005" +
    "\uff2f\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f" +
    "\014\uff2f\015\uff2f\016\uff2f\021\uff2f\022\uff2f\023\uff2f\024" +
    "\uff2f\025\uff2f\026\uff2f\027\uff2f\030\uff2f\031\uff2f\032\uff2f" +
    "\033\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\044\uff2f\045" +
    "\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f" +
    "\054\uff2f\055\uff2f\056\uff2f\057\uff2f\060\uff2f\061\uff2f\062" +
    "\uff2f\063\uff2f\064\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f" +
    "\073\uff2f\074\uff2f\075\uff2f\076\uff2f\001\002\000\102\003" +
    "\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\067\uffe8\071\uffe8\073\uffe8\075\uffe8\001\002" +
    "\000\004\003\322\001\002\000\102\003\116\022\122\023" +
    "\063\025\120\026\143\027\137\030\077\031\072\032\064" +
    "\033\043\040\140\041\110\042\076\043\071\044\106\045" +
    "\123\046\070\047\102\050\142\051\134\052\107\053\121" +
    "\054\124\056\125\057\101\060\100\061\104\062\136\067" +
    "\126\071\074\073\130\075\067\001\002\000\102\003\116" +
    "\022\122\023\063\025\120\026\143\027\137\030\077\031" +
    "\072\032\064\033\043\040\uffbf\041\110\042\uffbf\043\071" +
    "\044\106\045\123\046\070\047\102\050\142\051\134\052" +
    "\107\053\121\054\124\056\125\057\uffbf\060\100\061\104" +
    "\062\136\067\126\071\074\073\130\075\067\001\002\000" +
    "\106\003\116\022\uff91\023\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\040\uff91\041\uff91\042" +
    "\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\066\235\067\uff91\071\074\073\uff91" +
    "\075\067\076\uff91\001\002\000\102\003\116\022\122\023" +
    "\063\025\120\026\143\027\137\030\077\031\072\032\064" +
    "\033\u0100\040\140\041\110\042\076\043\071\044\106\045" +
    "\123\046\070\047\102\050\142\051\134\052\107\053\121" +
    "\054\124\056\125\057\101\060\100\061\104\062\136\067" +
    "\126\071\074\073\130\075\067\001\002\000\154\002\uff42" +
    "\003\uff42\004\uff42\005\uff42\006\uff42\007\uff42\010\uff42\011" +
    "\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\021\uff42" +
    "\022\uff42\023\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030" +
    "\uff42\031\uff42\032\uff42\033\uff42\040\uff42\041\uff42\042\uff42" +
    "\043\uff42\044\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051" +
    "\uff42\052\uff42\053\uff42\054\uff42\055\uff42\056\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\067\uff42\070" +
    "\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42\076\uff42" +
    "\001\002\000\156\002\uff91\003\u0103\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\066\235\067\uff91\070\uff91\071\074\072\uff91" +
    "\073\uff91\074\uff91\075\067\076\uff91\001\002\000\154\002" +
    "\uff40\003\uff40\004\uff40\005\uff40\006\uff40\007\uff40\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\021" +
    "\uff40\022\uff40\023\uff40\024\uff40\025\uff40\026\uff40\027\uff40" +
    "\030\uff40\031\uff40\032\uff40\033\uff40\040\uff40\041\154\042" +
    "\145\043\150\044\156\045\151\046\160\047\161\050\157" +
    "\051\165\052\163\053\147\054\153\055\uff40\056\uff40\057" +
    "\uff40\060\146\061\164\062\152\063\uff40\064\uff40\067\uff40" +
    "\070\uff40\071\uff40\072\uff40\073\uff40\074\uff40\075\162\076" +
    "\uff40\001\002\000\154\002\uff44\003\uff44\004\uff44\005\uff44" +
    "\006\uff44\007\uff44\010\uff44\011\uff44\012\uff44\013\uff44\014" +
    "\uff44\015\uff44\016\uff44\021\uff44\022\uff44\023\uff44\024\uff44" +
    "\025\uff44\026\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033" +
    "\uff44\040\uff44\041\uff44\042\uff44\043\uff44\044\uff44\045\uff44" +
    "\046\uff44\047\uff44\050\uff44\051\uff44\052\uff44\053\uff44\054" +
    "\uff44\055\uff44\056\uff44\057\uff44\060\uff44\061\uff44\062\uff44" +
    "\063\uff44\064\uff44\067\uff44\070\uff44\071\uff44\072\uff44\073" +
    "\uff44\074\uff44\075\162\076\uff44\001\002\000\154\002\uff3e" +
    "\003\uff3e\004\uff3e\005\uff3e\006\uff3e\007\uff3e\010\uff3e\011" +
    "\uff3e\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\021\uff3e" +
    "\022\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030" +
    "\uff3e\031\uff3e\032\uff3e\033\uff3e\040\uff3e\041\uff3e\042\uff3e" +
    "\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051" +
    "\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e" +
    "\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064\uff3e\067\uff3e\070" +
    "\uff3e\071\uff3e\072\uff3e\073\uff3e\074\uff3e\075\uff3e\076\uff3e" +
    "\001\002\000\154\002\uff3f\003\uff3f\004\uff3f\005\uff3f\006" +
    "\uff3f\007\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f" +
    "\015\uff3f\016\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025" +
    "\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f" +
    "\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046" +
    "\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f" +
    "\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063" +
    "\uff3f\064\uff3f\067\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f" +
    "\074\uff3f\075\162\076\uff3f\001\002\000\010\017\041\020" +
    "\042\033\043\001\002\000\004\063\u0107\001\002\000\010" +
    "\017\041\020\042\033\043\001\002\000\004\050\u0109\001" +
    "\002\000\160\002\uffdf\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\067\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002\000\004" +
    "\033\043\001\002\000\004\050\u010c\001\002\000\160\002" +
    "\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\001\002\000\074\002\uff0d\003\uff0d" +
    "\007\uff0d\010\uff0d\011\uff0d\012\uff0d\013\uff0d\014\uff0d\015" +
    "\uff0d\016\uff0d\021\uff0d\041\154\042\145\043\150\044\156" +
    "\045\151\046\160\047\161\050\157\051\165\052\163\053" +
    "\147\054\153\060\146\061\164\062\152\064\uff0d\067\uff0d" +
    "\075\162\001\002\000\072\002\uff0e\003\uff0e\007\uff0e\010" +
    "\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015\uff0e\016\uff0e" +
    "\021\uff0e\041\110\042\344\043\071\044\106\045\123\046" +
    "\070\047\102\050\142\051\134\052\107\053\121\054\124" +
    "\060\100\061\104\062\136\064\u0111\067\uff0e\001\002\000" +
    "\034\002\uff10\003\uff10\007\uff10\010\uff10\011\uff10\012\uff10" +
    "\013\uff10\014\uff10\015\uff10\016\uff10\021\uff10\064\u0110\067" +
    "\uff10\001\002\000\032\002\uff11\003\uff11\007\uff11\010\uff11" +
    "\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11\016\uff11\021" +
    "\uff11\067\uff11\001\002\000\032\002\uff0f\003\uff0f\007\uff0f" +
    "\010\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f\015\uff0f\016" +
    "\uff0f\021\uff0f\067\uff0f\001\002\000\004\033\u0113\001\002" +
    "\000\010\055\uffde\071\u0117\072\u0114\001\002\000\010\017" +
    "\041\020\042\033\043\001\002\000\004\055\u0121\001\002" +
    "\000\012\017\041\020\042\033\043\071\u011e\001\002\000" +
    "\014\017\041\020\042\033\043\071\u011a\072\u0119\001\002" +
    "\000\004\072\u011b\001\002\000\012\005\uffdd\055\uffdd\056" +
    "\uffdd\073\uffdd\001\002\000\012\017\uffc0\020\uffc0\033\uffc0" +
    "\071\uffc0\001\002\000\014\005\uffdc\055\uffdc\056\uffdc\072" +
    "\276\073\uffdc\001\002\000\014\005\uffd9\055\uffd9\056\uffd9" +
    "\072\271\073\uffd9\001\002\000\004\072\u011f\001\002\000" +
    "\012\017\uffbf\020\uffbf\033\uffbf\071\uffbf\001\002\000\014" +
    "\005\uffda\055\uffda\056\uffda\072\276\073\uffda\001\002\000" +
    "\014\005\uffd8\055\uffd8\056\uffd8\072\271\073\uffd8\001\002" +
    "\000\102\003\116\022\122\023\063\025\120\026\143\027" +
    "\137\030\077\031\072\032\064\033\043\040\140\041\110" +
    "\042\076\043\071\044\106\045\123\046\070\047\102\050" +
    "\142\051\134\052\107\053\121\054\124\056\125\057\101" +
    "\060\100\061\104\062\136\067\126\071\074\073\130\075" +
    "\067\001\002\000\074\002\uffcb\003\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\021" +
    "\uffcb\041\154\042\145\043\150\044\156\045\151\046\160" +
    "\047\161\050\157\051\165\052\163\053\147\054\153\060" +
    "\146\061\164\062\152\064\u0123\067\uffcb\075\162\001\002" +
    "\000\032\002\uffcc\003\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\021\uffcc\067\uffcc" +
    "\001\002\000\004\071\u0125\001\002\000\012\005\uffdb\055" +
    "\uffdb\056\uffdb\073\uffdb\001\002\000\004\055\u0127\001\002" +
    "\000\004\033\043\001\002\000\004\071\u0129\001\002\000" +
    "\104\003\116\022\122\023\063\025\120\026\143\027\137" +
    "\030\077\031\072\032\064\033\043\040\140\041\110\042" +
    "\076\043\071\044\106\045\123\046\070\047\102\050\142" +
    "\051\134\052\107\053\121\054\124\056\125\057\101\060" +
    "\100\061\104\062\136\067\126\071\212\072\uff37\073\130" +
    "\075\067\001\002\000\004\072\u012b\001\002\000\034\002" +
    "\uff92\003\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\021\uff92\064\u012c\067\uff92\001" +
    "\002\000\032\002\uff93\003\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\021\uff93\067" +
    "\uff93\001\002\000\032\002\ufff8\003\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\021" +
    "\ufff8\067\ufff8\001\002\000\004\033\u012f\001\002\000\046" +
    "\002\uff96\003\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\021\uff96\026\u0138\033\uff96" +
    "\063\uff96\064\uff96\067\uff96\075\u013a\076\u0139\001\002\000" +
    "\040\002\uffa6\003\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\021\uffa6\033\u012f\063" +
    "\u0133\064\uffa6\067\uffa6\001\002\000\034\002\uffa7\003\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\021\uffa7\064\u0132\067\uffa7\001\002\000\032" +
    "\002\uffa8\003\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\067\uffa8\001\002" +
    "\000\006\033\u012f\063\250\001\002\000\006\033\u012f\063" +
    "\252\001\002\000\034\002\uffa4\003\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021" +
    "\uffa4\064\uffa4\067\uffa4\001\002\000\034\002\uffa3\003\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\021\uffa3\064\uffa3\067\uffa3\001\002\000\034" +
    "\002\uffa5\003\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\021\uffa5\064\uffa5\067\uffa5" +
    "\001\002\000\044\002\uff9a\003\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\021\uff9a" +
    "\033\uff9a\063\uff9a\064\uff9a\067\uff9a\075\u0143\076\u0142\001" +
    "\002\000\046\002\uffa1\003\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\021\uffa1\026" +
    "\uffa1\033\uffa1\063\uffa1\064\uffa1\067\uffa1\075\uffa1\076\uffa1" +
    "\001\002\000\046\002\uffa2\003\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\021\uffa2" +
    "\026\uffa2\033\uffa2\063\uffa2\064\uffa2\067\uffa2\075\uffa2\076" +
    "\uffa2\001\002\000\046\002\uff9e\003\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\021" +
    "\uff9e\026\u013d\033\uff9e\063\uff9e\064\uff9e\067\uff9e\075\u013f" +
    "\076\u013e\001\002\000\040\002\uff94\003\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94" +
    "\021\uff94\033\uff94\063\uff94\064\uff94\067\uff94\001\002\000" +
    "\040\002\uff9c\003\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\021\uff9c\033\uff9c\063" +
    "\uff9c\064\uff9c\067\uff9c\001\002\000\046\002\uff9f\003\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\021\uff9f\026\uff9f\033\uff9f\063\uff9f\064\uff9f" +
    "\067\uff9f\075\uff9f\076\uff9f\001\002\000\046\002\uffa0\003" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\021\uffa0\026\uffa0\033\uffa0\063\uffa0\064" +
    "\uffa0\067\uffa0\075\uffa0\076\uffa0\001\002\000\004\076\u0141" +
    "\001\002\000\044\002\uff99\003\uff99\007\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\021\uff99" +
    "\033\uff99\063\uff99\064\uff99\067\uff99\075\u0143\076\u0142\001" +
    "\002\000\044\002\uffa1\003\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\021\uffa1\033" +
    "\uffa1\063\uffa1\064\uffa1\067\uffa1\075\uffa1\076\uffa1\001\002" +
    "\000\044\002\uffa2\003\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\021\uffa2\033\uffa2" +
    "\063\uffa2\064\uffa2\067\uffa2\075\uffa2\076\uffa2\001\002\000" +
    "\044\002\uff97\003\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\021\uff97\033\uff97\063" +
    "\uff97\064\uff97\067\uff97\075\u0145\076\u013e\001\002\000\044" +
    "\002\uffa0\003\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\021\uffa0\033\uffa0\063\uffa0" +
    "\064\uffa0\067\uffa0\075\uffa0\076\uffa0\001\002\000\004\076" +
    "\u0147\001\002\000\044\002\uff95\003\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\021" +
    "\uff95\033\uff95\063\uff95\064\uff95\067\uff95\075\u0143\076\u0142" +
    "\001\002\000\044\002\uff98\003\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\021\uff98" +
    "\033\uff98\063\uff98\064\uff98\067\uff98\075\u0145\076\u013e\001" +
    "\002\000\004\075\u014a\001\002\000\040\002\uff9d\003\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\021\uff9d\033\uff9d\063\uff9d\064\uff9d\067\uff9d" +
    "\001\002\000\044\002\uff9b\003\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b" +
    "\033\uff9b\063\uff9b\064\uff9b\067\uff9b\075\u0145\076\u013e\001" +
    "\002\000\004\033\u014d\001\002\000\016\005\uffde\055\uffde" +
    "\056\uffde\071\u0117\072\u0114\073\uffde\001\002\000\012\005" +
    "\u0153\055\u014f\056\125\073\u0150\001\002\000\102\003\116" +
    "\022\122\023\063\025\120\026\143\027\137\030\077\031" +
    "\072\032\064\033\043\040\140\041\110\042\076\043\071" +
    "\044\106\045\123\046\070\047\102\050\142\051\134\052" +
    "\107\053\121\054\124\056\125\057\101\060\100\061\104" +
    "\062\136\067\126\071\074\073\130\075\067\001\002\000" +
    "\012\005\u0153\055\u014f\056\125\073\u0150\001\002\000\040" +
    "\002\uff8e\003\uff8e\004\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\021\uff8e\064\uff8e" +
    "\067\uff8e\074\uff8e\001\002\000\034\002\uffc9\003\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\021\uffc9\064\u015c\067\uffc9\001\002\000\102\003" +
    "\116\022\122\023\063\025\120\026\143\027\137\030\077" +
    "\031\072\032\064\033\043\040\140\041\110\042\076\043" +
    "\071\044\106\045\123\046\070\047\102\050\142\051\134" +
    "\052\107\053\121\054\124\056\125\057\101\060\100\061" +
    "\104\062\136\067\126\071\074\073\130\075\067\001\002" +
    "\000\054\005\u0153\006\u0155\041\154\042\145\043\150\044" +
    "\156\045\151\046\160\047\161\050\157\051\165\052\163" +
    "\053\147\054\153\055\u014f\056\125\060\146\061\164\062" +
    "\152\073\u0150\075\162\001\002\000\012\005\u0153\055\u014f" +
    "\056\125\073\u0150\001\002\000\040\002\uff88\003\uff88\004" +
    "\u0158\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\021\uff88\064\uff88\067\uff88\074\uff88\001" +
    "\002\000\040\002\uff8a\003\uff8a\004\uff8a\007\uff8a\010\uff8a" +
    "\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\021" +
    "\uff8a\064\uff8a\067\uff8a\074\uff8a\001\002\000\012\005\u0153" +
    "\055\u014f\056\125\073\u0150\001\002\000\040\002\uff89\003" +
    "\uff89\004\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\021\uff89\064\uff89\067\uff89\074" +
    "\uff89\001\002\000\040\002\uff88\003\uff88\004\u0158\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\021\uff88\064\uff88\067\uff88\074\uff88\001\002\000\040" +
    "\002\uff8d\003\uff8d\004\uff8d\007\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\021\uff8d\064\uff8d" +
    "\067\uff8d\074\uff8d\001\002\000\032\002\uffca\003\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\021\uffca\067\uffca\001\002\000\006\064\u015e\074" +
    "\u015f\001\002\000\004\074\u0160\001\002\000\040\002\uff8c" +
    "\003\uff8c\004\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\021\uff8c\064\uff8c\067\uff8c" +
    "\074\uff8c\001\002\000\040\002\uff8b\003\uff8b\004\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b" +
    "\016\uff8b\021\uff8b\064\uff8b\067\uff8b\074\uff8b\001\002\000" +
    "\100\002\uff8f\003\uff8f\004\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\021\uff8f\041" +
    "\154\042\145\043\150\044\156\045\151\046\160\047\161" +
    "\050\157\051\165\052\163\053\147\054\153\060\146\061" +
    "\164\062\152\064\uff8f\067\uff8f\074\uff8f\075\162\001\002" +
    "\000\034\002\uffee\003\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\021\uffee\064\u0163" +
    "\067\uffee\001\002\000\032\002\uffef\003\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\021\uffef\067\uffef\001\002\000\004\033\u0165\001\002\000" +
    "\012\017\041\020\042\033\043\071\u0168\001\002\000\004" +
    "\072\u0174\001\002\000\012\017\041\020\042\033\043\071" +
    "\u011e\001\002\000\012\017\041\020\042\033\043\071\u011a" +
    "\001\002\000\006\064\u016b\072\u016a\001\002\000\036\002" +
    "\uffae\003\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\021\uffae\064\u016e\067\uffae\072" +
    "\276\001\002\000\032\002\uffaa\003\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\021" +
    "\uffaa\067\uffaa\001\002\000\006\064\u016d\072\271\001\002" +
    "\000\032\002\uffab\003\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\021\uffab\067\uffab" +
    "\001\002\000\032\002\uffaf\003\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\021\uffaf" +
    "\067\uffaf\001\002\000\004\072\u0170\001\002\000\006\064" +
    "\u0173\072\276\001\002\000\006\064\u0172\072\271\001\002" +
    "\000\032\002\uffac\003\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021\uffac\067\uffac" +
    "\001\002\000\032\002\uffad\003\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\021\uffad" +
    "\067\uffad\001\002\000\004\064\u0175\001\002\000\032\002" +
    "\uffa9\003\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\021\uffa9\067\uffa9\001\002\000" +
    "\034\002\uff17\003\uff17\007\uff17\010\uff17\011\uff17\012\uff17" +
    "\013\uff17\014\uff17\015\uff17\016\uff17\021\uff17\064\uff17\067" +
    "\uff17\001\002\000\034\002\uff19\003\uff19\007\uff19\010\uff19" +
    "\011\uff19\012\uff19\013\uff19\014\uff19\015\uff19\016\uff19\021" +
    "\uff19\064\u0185\067\uff19\001\002\000\044\041\154\042\145" +
    "\043\150\044\156\045\151\046\160\047\161\050\157\051" +
    "\165\052\163\053\147\054\153\055\u0182\060\146\061\164" +
    "\062\152\075\162\001\002\000\042\041\110\042\344\043" +
    "\071\044\106\045\123\046\070\047\102\050\142\051\134" +
    "\052\107\053\121\054\124\055\u017f\060\100\061\104\062" +
    "\136\001\002\000\034\002\uff18\003\uff18\007\uff18\010\uff18" +
    "\011\uff18\012\uff18\013\uff18\014\uff18\015\uff18\016\uff18\021" +
    "\uff18\064\uff18\067\uff18\001\002\000\044\041\uff21\042\uff21" +
    "\043\uff21\044\uff21\045\uff21\046\uff21\047\uff21\050\uff21\051" +
    "\uff21\052\uff21\053\uff21\054\uff21\055\u017c\060\uff21\061\uff21" +
    "\062\uff21\075\uff21\001\002\000\004\073\u017d\001\002\000" +
    "\104\003\116\022\122\023\063\025\120\026\143\027\137" +
    "\030\077\031\072\032\064\033\043\040\140\041\110\042" +
    "\076\043\071\044\106\045\123\046\070\047\102\050\142" +
    "\051\134\052\107\053\121\054\124\056\125\057\101\060" +
    "\100\061\104\062\136\067\126\071\212\073\130\074\uff37" +
    "\075\067\001\002\000\034\002\uff13\003\uff13\007\uff13\010" +
    "\uff13\011\uff13\012\uff13\013\uff13\014\uff13\015\uff13\016\uff13" +
    "\021\uff13\064\uff13\067\uff13\001\002\000\102\003\u0181\022" +
    "\122\023\063\025\120\026\143\027\137\030\077\031\072" +
    "\032\064\033\043\040\140\041\110\042\076\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\056\125\057\101\060\100\061\104\062" +
    "\136\067\126\071\074\073\130\075\067\001\002\000\074" +
    "\002\uff15\003\uff15\007\uff15\010\uff15\011\uff15\012\uff15\013" +
    "\uff15\014\uff15\015\uff15\016\uff15\021\uff15\041\154\042\145" +
    "\043\150\044\156\045\151\046\160\047\161\050\157\051" +
    "\165\052\163\053\147\054\153\060\146\061\164\062\152" +
    "\064\uff15\067\uff15\075\162\001\002\000\072\002\uff12\003" +
    "\uff12\007\uff12\010\uff12\011\uff12\012\uff12\013\uff12\014\uff12" +
    "\015\uff12\016\uff12\021\uff12\041\110\042\344\043\071\044" +
    "\106\045\123\046\070\047\102\050\142\051\134\052\107" +
    "\053\121\054\124\060\100\061\104\062\136\064\uff12\067" +
    "\uff12\001\002\000\102\003\u0184\022\122\023\063\025\120" +
    "\026\143\027\137\030\077\031\072\032\064\033\043\040" +
    "\140\041\110\042\076\043\071\044\106\045\123\046\070" +
    "\047\102\050\142\051\134\052\107\053\121\054\124\056" +
    "\125\057\101\060\100\061\104\062\136\067\126\071\074" +
    "\073\130\075\067\001\002\000\074\002\uff16\003\uff16\007" +
    "\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014\uff16\015\uff16" +
    "\016\uff16\021\uff16\041\154\042\145\043\150\044\156\045" +
    "\151\046\160\047\161\050\157\051\165\052\163\053\147" +
    "\054\153\060\146\061\164\062\152\064\uff16\067\uff16\075" +
    "\162\001\002\000\072\002\uff14\003\uff14\007\uff14\010\uff14" +
    "\011\uff14\012\uff14\013\uff14\014\uff14\015\uff14\016\uff14\021" +
    "\uff14\041\110\042\344\043\071\044\106\045\123\046\070" +
    "\047\102\050\142\051\134\052\107\053\121\054\124\060" +
    "\100\061\104\062\136\064\uff14\067\uff14\001\002\000\032" +
    "\002\uff1a\003\uff1a\007\uff1a\010\uff1a\011\uff1a\012\uff1a\013" +
    "\uff1a\014\uff1a\015\uff1a\016\uff1a\021\uff1a\067\uff1a\001\002" +
    "\000\004\002\uff0c\001\002\000\004\002\ufffe\001\002\000" +
    "\022\003\uffc3\005\uffc3\033\uffc3\055\uffc3\056\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\001\002\000\010\033\u018e\071\u0192\072" +
    "\u0188\001\002\000\012\005\u0153\055\u014f\056\125\073\u0150" +
    "\001\002\000\006\071\u0192\072\u0188\001\002\000\020\003" +
    "\uffb8\005\uffb8\055\uffb8\056\uffb8\071\u018d\072\u0188\073\uffb8" +
    "\001\002\000\010\033\u018e\071\uffc4\072\uffc4\001\002\000" +
    "\006\033\u0194\055\u0195\001\002\000\006\071\u0192\072\u0190" +
    "\001\002\000\020\003\uffbc\005\uffbc\055\uffbc\056\uffbc\071" +
    "\uffc3\072\uffc3\073\uffbc\001\002\000\020\003\uffba\005\uffba" +
    "\055\uffba\056\uffba\071\u0192\072\u0188\073\uffba\001\002\000" +
    "\022\003\uffc4\005\uffc4\033\uffc4\055\uffc4\056\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\001\002\000\022\003\uffc1\005\uffc1\033" +
    "\uffc1\055\uffc1\056\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002" +
    "\000\004\063\u01a5\001\002\000\010\033\u0197\055\u0198\063" +
    "\u0196\001\002\000\004\033\u018e\001\002\000\012\033\u019d" +
    "\063\u019c\071\uffb0\072\uffb0\001\002\000\004\033\u0199\001" +
    "\002\000\004\063\u019a\001\002\000\004\033\u018e\001\002" +
    "\000\006\071\uffb5\072\uffb5\001\002\000\006\033\u018e\063" +
    "\250\001\002\000\010\033\u0194\055\u0195\063\u01a1\001\002" +
    "\000\006\033\u018e\063\252\001\002\000\006\071\uffb2\072" +
    "\uffb2\001\002\000\006\071\uffb6\072\uffb6\001\002\000\004" +
    "\033\u018e\001\002\000\006\071\uffb4\072\uffb4\001\002\000" +
    "\006\071\uffb7\072\uffb7\001\002\000\006\071\uffb3\072\uffb3" +
    "\001\002\000\004\033\u018e\001\002\000\006\071\uffb1\072" +
    "\uffb1\001\002\000\014\003\u01a8\005\u0153\055\u014f\056\125" +
    "\073\u0150\001\002\000\004\064\u01ab\001\002\000\034\002" +
    "\uffc7\003\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\021\uffc7\064\u01aa\067\uffc7\001" +
    "\002\000\032\002\uffc8\003\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\021\uffc8\067" +
    "\uffc8\001\002\000\032\002\uffc5\003\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\067\uffc5\001\002\000\022\003\uffc2\005\uffc2\033\uffc2" +
    "\055\uffc2\056\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000" +
    "\004\064\u01ae\001\002\000\032\002\uffc6\003\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\021\uffc6\067\uffc6\001\002\000\006\071\u0192\072\u01b0" +
    "\001\002\000\020\003\uffb9\005\uffb9\055\uffb9\056\uffb9\071" +
    "\uffc3\072\uffc3\073\uffb9\001\002\000\020\003\uffbb\005\uffbb" +
    "\055\uffbb\056\uffbb\071\u0192\072\u0188\073\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01af\000\040\003\015\004\030\005\006\006\007\007" +
    "\023\010\010\011\012\012\011\013\014\014\033\015\032" +
    "\016\022\017\005\020\013\021\003\001\001\000\002\001" +
    "\001\000\012\064\u018a\065\u0188\073\u0189\077\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\u0186\006" +
    "\007\007\023\010\010\011\012\012\011\013\014\014\033" +
    "\015\032\016\022\017\005\020\013\021\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\022" +
    "\u0176\023\u0175\024\u0179\026\u0177\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\u017a\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\020\052\u0163\053\035\054\046\055" +
    "\045\056\037\057\036\077\044\001\001\000\002\001\001" +
    "\000\020\052\u014b\053\035\054\046\055\045\056\037\057" +
    "\036\077\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\u012d\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\052\u0111\053\035\054\046\055\045\056\037" +
    "\057\036\077\044\001\001\000\002\001\001\000\050\025" +
    "\u010e\026\u010c\027\074\030\102\031\112\032\114\033\130" +
    "\034\131\035\116\036\132\037\104\042\140\043\113\044" +
    "\134\045\110\056\126\066\064\070\072\077\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\043\053" +
    "\035\054\046\055\045\056\037\057\036\077\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\026\111\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\020\052\375\053\035\054\046\055\045" +
    "\056\037\057\036\077\044\001\001\000\002\001\001\000" +
    "\004\031\371\001\001\000\002\001\001\000\054\026\266" +
    "\027\074\030\102\031\112\032\114\033\130\034\131\035" +
    "\116\036\132\037\104\042\140\043\113\044\134\045\110" +
    "\046\353\047\354\050\355\056\126\066\207\070\072\077" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\026\352\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\046\026\311\027\074\030\102\031\301" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\002\001\001\000\046\026\351\027" +
    "\074\030\102\031\112\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\056" +
    "\126\066\064\070\072\077\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\026\350\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\056\126\066\064\070" +
    "\072\077\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\335\053" +
    "\035\054\046\055\045\056\037\057\036\077\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\330\001" +
    "\001\000\030\042\325\043\113\044\134\045\110\052\327" +
    "\053\035\054\046\055\045\056\037\057\036\077\044\001" +
    "\001\000\046\026\257\027\074\030\102\031\112\032\114" +
    "\033\130\034\131\035\116\036\132\037\104\042\140\043" +
    "\113\044\134\045\110\056\126\066\064\070\072\077\065" +
    "\001\001\000\066\026\213\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\047\215\050\216\051\212\052" +
    "\217\053\035\054\046\055\045\056\214\057\036\066\207" +
    "\070\072\077\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\026\143\027" +
    "\074\030\102\031\112\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\056" +
    "\126\066\064\070\072\077\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\154\001" +
    "\001\000\046\026\206\027\074\030\102\031\112\032\114" +
    "\033\130\034\131\035\116\036\132\037\104\042\140\043" +
    "\113\044\134\045\110\056\126\066\064\070\072\077\065" +
    "\001\001\000\046\026\205\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\046\026\204\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\046\026\203\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\056\126\066\064\070" +
    "\072\077\065\001\001\000\046\026\202\027\074\030\102" +
    "\031\112\032\114\033\130\034\131\035\116\036\132\037" +
    "\104\042\140\043\113\044\134\045\110\056\126\066\064" +
    "\070\072\077\065\001\001\000\046\026\201\027\074\030" +
    "\102\031\112\032\114\033\130\034\131\035\116\036\132" +
    "\037\104\042\140\043\113\044\134\045\110\056\126\066" +
    "\064\070\072\077\065\001\001\000\046\026\200\027\074" +
    "\030\102\031\112\032\114\033\130\034\131\035\116\036" +
    "\132\037\104\042\140\043\113\044\134\045\110\056\126" +
    "\066\064\070\072\077\065\001\001\000\046\026\177\027" +
    "\074\030\102\031\112\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\056" +
    "\126\066\064\070\072\077\065\001\001\000\002\001\001" +
    "\000\046\026\175\027\074\030\102\031\112\032\114\033" +
    "\130\034\131\035\116\036\132\037\104\042\140\043\113" +
    "\044\134\045\110\056\126\066\064\070\072\077\065\001" +
    "\001\000\046\026\174\027\074\030\102\031\112\032\114" +
    "\033\130\034\131\035\116\036\132\037\104\042\140\043" +
    "\113\044\134\045\110\056\126\066\064\070\072\077\065" +
    "\001\001\000\046\026\173\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\046\026\172\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\046\026\170\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\056\126\066\064\070" +
    "\072\077\065\001\001\000\046\026\167\027\074\030\102" +
    "\031\112\032\114\033\130\034\131\035\116\036\132\037" +
    "\104\042\140\043\113\044\134\045\110\056\126\066\064" +
    "\070\072\077\065\001\001\000\046\026\166\027\074\030" +
    "\102\031\112\032\114\033\130\034\131\035\116\036\132" +
    "\037\104\042\140\043\113\044\134\045\110\056\126\066" +
    "\064\070\072\077\065\001\001\000\046\026\165\027\074" +
    "\030\102\031\112\032\114\033\130\034\131\035\116\036" +
    "\132\037\104\042\140\043\113\044\134\045\110\056\126" +
    "\066\064\070\072\077\065\001\001\000\004\070\154\001" +
    "\001\000\004\070\154\001\001\000\004\070\154\001\001" +
    "\000\004\070\154\001\001\000\002\001\001\000\004\070" +
    "\154\001\001\000\004\070\154\001\001\000\004\070\154" +
    "\001\001\000\004\070\154\001\001\000\002\001\001\000" +
    "\004\070\154\001\001\000\004\070\154\001\001\000\004" +
    "\070\154\001\001\000\004\070\154\001\001\000\004\070" +
    "\154\001\001\000\004\070\154\001\001\000\004\070\154" +
    "\001\001\000\004\070\154\001\001\000\046\026\317\027" +
    "\074\030\102\031\320\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\056" +
    "\126\066\064\070\072\077\065\001\001\000\002\001\001" +
    "\000\046\026\300\027\074\030\102\031\301\032\114\033" +
    "\130\034\131\035\116\036\132\037\104\042\140\043\113" +
    "\044\134\045\110\056\126\066\064\070\072\077\065\001" +
    "\001\000\002\001\001\000\006\067\264\070\154\001\001" +
    "\000\046\026\257\027\074\030\102\031\112\032\114\033" +
    "\130\034\131\035\116\036\132\037\104\042\140\043\113" +
    "\044\134\045\110\056\126\066\064\070\072\077\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\026\223\027" +
    "\074\030\102\031\112\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\056" +
    "\126\066\064\070\072\077\065\001\001\000\004\070\154" +
    "\001\001\000\002\001\001\000\024\052\227\053\035\054" +
    "\046\055\045\056\037\057\036\063\230\072\226\077\044" +
    "\001\001\000\002\001\001\000\020\052\240\053\035\054" +
    "\046\055\045\056\037\057\036\077\044\001\001\000\020" +
    "\052\232\053\035\054\046\055\045\056\037\057\036\077" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\052\227\053\035\054\046\055\045\056\037\057\036\063" +
    "\230\072\236\077\044\001\001\000\004\077\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\052\227\053" +
    "\035\054\046\055\045\056\037\057\036\062\244\063\230" +
    "\072\243\077\044\001\001\000\002\001\001\000\024\052" +
    "\227\053\035\054\046\055\045\056\037\057\036\063\230" +
    "\072\242\077\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\052\227\053\035\054\046\055\045\056\037" +
    "\057\036\063\230\072\250\077\044\001\001\000\024\052" +
    "\227\053\035\054\046\055\045\056\037\057\036\063\230" +
    "\072\246\077\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\026\254\027\074\030\102\031\112\032\114\033" +
    "\130\034\131\035\116\036\132\037\104\042\140\043\113" +
    "\044\134\045\110\056\126\066\064\070\072\077\065\001" +
    "\001\000\004\070\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\026\271\027\074" +
    "\030\102\031\112\032\114\033\130\034\131\035\116\036" +
    "\132\037\104\042\140\043\113\044\134\045\110\056\126" +
    "\066\064\070\072\077\065\001\001\000\002\001\001\000" +
    "\050\026\266\027\074\030\102\031\112\032\114\033\130" +
    "\034\131\035\116\036\132\037\104\042\140\043\113\044" +
    "\134\045\110\050\267\056\126\066\207\070\072\077\065" +
    "\001\001\000\006\067\264\070\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\154\001\001\000\050" +
    "\026\274\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\051\273\056\126\066\064\070\072\077\065\001" +
    "\001\000\002\001\001\000\004\070\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\026\311\027\074\030" +
    "\102\031\301\032\114\033\130\034\131\035\116\036\132" +
    "\037\104\042\140\043\113\044\134\045\110\056\126\066" +
    "\064\070\072\077\065\001\001\000\004\070\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\026\266\027\074" +
    "\030\102\031\112\032\114\033\130\034\131\035\116\036" +
    "\132\037\104\042\140\043\113\044\134\045\110\050\310" +
    "\056\126\066\207\070\072\077\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\154\001\001\000\052" +
    "\026\266\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\047\313\050\314\056\126\066\207\070\072\077" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\026\311\027\074\030\102\031\301\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\004\070\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\026\266\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\050\323\056\126\066" +
    "\207\070\072\077\065\001\001\000\002\001\001\000\064" +
    "\026\266\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\047\215\050\216\052\217\053\035\054\046\055" +
    "\045\056\214\057\036\066\207\070\072\077\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\026\266\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\047\332\050\314\056\126" +
    "\066\207\070\072\077\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\026\346\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\046\026\340\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\056\126\066\064\070" +
    "\072\077\065\001\001\000\002\001\001\000\046\026\341" +
    "\027\074\030\102\031\112\032\114\033\130\034\131\035" +
    "\116\036\132\037\104\042\140\043\113\044\134\045\110" +
    "\056\126\066\064\070\072\077\065\001\001\000\004\070" +
    "\154\001\001\000\004\070\154\001\001\000\004\070\344" +
    "\001\001\000\002\001\001\000\046\026\345\027\074\030" +
    "\102\031\112\032\114\033\130\034\131\035\116\036\132" +
    "\037\104\042\140\043\113\044\134\045\110\056\126\066" +
    "\064\070\072\077\065\001\001\000\004\070\154\001\001" +
    "\000\004\070\154\001\001\000\002\001\001\000\004\070" +
    "\154\001\001\000\004\070\154\001\001\000\004\070\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\026" +
    "\266\027\074\030\102\031\112\032\114\033\130\034\131" +
    "\035\116\036\132\037\104\042\140\043\113\044\134\045" +
    "\110\046\357\050\360\056\126\066\207\070\072\077\065" +
    "\001\001\000\052\026\266\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\046\362\050\363\056\126\066" +
    "\207\070\072\077\065\001\001\000\002\001\001\000\052" +
    "\026\266\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\046\357\050\360\056\126\066\207\070\072\077" +
    "\065\001\001\000\052\026\266\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\046\364\050\365\056\126" +
    "\066\207\070\072\077\065\001\001\000\002\001\001\000" +
    "\052\026\266\027\074\030\102\031\112\032\114\033\130" +
    "\034\131\035\116\036\132\037\104\042\140\043\113\044" +
    "\134\045\110\046\357\050\360\056\126\066\207\070\072" +
    "\077\065\001\001\000\002\001\001\000\052\026\266\027" +
    "\074\030\102\031\112\032\114\033\130\034\131\035\116" +
    "\036\132\037\104\042\140\043\113\044\134\045\110\046" +
    "\357\050\360\056\126\066\207\070\072\077\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\026\351\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\046\026\311\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\056\126\066\064\070" +
    "\072\077\065\001\001\000\046\026\u0103\027\074\030\102" +
    "\031\112\032\114\033\130\034\131\035\116\036\132\037" +
    "\104\042\140\043\113\044\134\045\110\056\126\066\064" +
    "\070\072\077\065\001\001\000\046\026\u0100\027\074\030" +
    "\102\031\112\032\114\033\130\034\131\035\116\036\132" +
    "\037\104\042\140\043\113\044\134\045\110\056\126\066" +
    "\064\070\072\077\065\001\001\000\002\001\001\000\046" +
    "\026\u0101\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\056\126\066\064\070\072\077\065\001\001\000" +
    "\004\070\154\001\001\000\004\070\154\001\001\000\004" +
    "\070\344\001\001\000\004\070\154\001\001\000\020\052" +
    "\u0105\053\035\054\046\055\045\056\037\057\036\077\044" +
    "\001\001\000\002\001\001\000\020\052\u0107\053\035\054" +
    "\046\055\045\056\037\057\036\077\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\154\001\001" +
    "\000\004\070\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\u0115" +
    "\071\u0114\001\001\000\024\052\227\053\035\054\046\055" +
    "\045\056\037\057\036\063\230\072\u0123\077\044\001\001" +
    "\000\002\001\001\000\024\052\227\053\035\054\046\055" +
    "\045\056\037\057\036\063\230\072\u011c\077\044\001\001" +
    "\000\024\052\227\053\035\054\046\055\045\056\037\057" +
    "\036\063\230\072\u0117\077\044\001\001\000\004\067\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\026" +
    "\u0121\027\074\030\102\031\112\032\114\033\130\034\131" +
    "\035\116\036\132\037\104\042\140\043\113\044\134\045" +
    "\110\056\126\066\064\070\072\077\065\001\001\000\004" +
    "\070\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0127\001\001" +
    "\000\002\001\001\000\052\026\266\027\074\030\102\031" +
    "\112\032\114\033\130\034\131\035\116\036\132\037\104" +
    "\042\140\043\113\044\134\045\110\047\u0129\050\314\056" +
    "\126\066\207\070\072\077\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\075\u012f\076\u0130\001\001\000\006\060\u013b\061\u013a" +
    "\001\001\000\010\062\u0133\075\u012f\076\u0134\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\075\u012f\076\u0136" +
    "\001\001\000\006\075\u012f\076\u0135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\066\u0115\071" +
    "\u014d\001\001\000\006\033\u0150\041\u0151\001\001\000\046" +
    "\026\u0160\027\074\030\102\031\112\032\114\033\130\034" +
    "\131\035\116\036\132\037\104\042\140\043\113\044\134" +
    "\045\110\056\126\066\064\070\072\077\065\001\001\000" +
    "\006\033\u0150\041\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\026\u0153\027\074\030\102\031\112\032" +
    "\114\033\130\034\131\035\116\036\132\037\104\042\140" +
    "\043\113\044\134\045\110\056\126\066\064\070\072\077" +
    "\065\001\001\000\010\033\u0150\041\u0155\070\154\001\001" +
    "\000\006\033\u0150\041\u0159\001\001\000\004\040\u0156\001" +
    "\001\000\002\001\001\000\006\033\u0150\041\u0158\001\001" +
    "\000\002\001\001\000\004\040\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\052\u0165\053\035\054\046\055\045\056\037\057" +
    "\036\066\u0166\077\044\001\001\000\002\001\001\000\020" +
    "\052\u016e\053\035\054\046\055\045\056\037\057\036\077" +
    "\044\001\001\000\020\052\u0168\053\035\054\046\055\045" +
    "\056\037\057\036\077\044\001\001\000\004\067\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u0170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\154\001\001" +
    "\000\004\070\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u017d\001\001\000\052\026\266\027\074" +
    "\030\102\031\112\032\114\033\130\034\131\035\116\036" +
    "\132\037\104\042\140\043\113\044\134\045\110\047\215" +
    "\050\314\056\126\066\207\070\072\077\065\001\001\000" +
    "\002\001\001\000\046\026\u017f\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\004\070\154\001\001\000\004\070" +
    "\344\001\001\000\046\026\u0182\027\074\030\102\031\112" +
    "\032\114\033\130\034\131\035\116\036\132\037\104\042" +
    "\140\043\113\044\134\045\110\056\126\066\064\070\072" +
    "\077\065\001\001\000\004\070\154\001\001\000\004\070" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\064\u0192\074\u01ae\001" +
    "\001\000\006\033\u0150\041\u01ac\001\001\000\004\064\u01ab" +
    "\001\001\000\010\064\u018a\065\u0188\073\u01a6\001\001\000" +
    "\004\074\u018e\001\001\000\002\001\001\000\006\064\u018a" +
    "\065\u0190\001\001\000\002\001\001\000\004\064\u0192\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\074\u01a3\001\001\000\006\062" +
    "\u019d\074\u019e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\u019a\001\001\000\002\001\001\000\004\074" +
    "\u01a2\001\001\000\002\001\001\000\004\074\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\u01a1\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\u01a5\001\001\000\002\001\001\000\006\033" +
    "\u0150\041\u01a8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\u018a\065\u01b0" +
    "\001\001\000\002\001\001\000\004\064\u0192\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 245;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }

  public BLOGParser(Scanner s, blog.msg.ErrorMsg msg) {
    this(s);
    errorMsg = msg;
  }

// WC: Methods that get automatically invoked when using the builtin error recovery mechanism.  
/*
public void report_error(String message, Object info)
    This method should be called whenever an error message is to be issued. In the default implementation of this method, the first parameter provides the text of a message which is printed on System.err and the second parameter is simply ignored. It is very typical to override this method in order to provide a more sophisticated error reporting mechanism. 
public void report_fatal_error(String message, Object info)
    This method should be called whenever a non-recoverable error occurs. It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(), and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early). 
public void syntax_error(Symbol cur_token)
    This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted). In the default implementation it calls: report_error("Syntax error", null);. 
public void unrecovered_syntax_error(Symbol cur_token)
    This method is called by the parser if it is unable to recover from a syntax error. In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);. 
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {



  static blog.symbol.Symbol sym(String s) {
           return blog.symbol.Symbol.Symbol(s);
  }

    LocationInFile getCurLocation() {
        return new LocationInFile
            (((ScannerWithLocInfo)parser.getScanner()).getCurFilename(),
             ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum());
    }

    int currLineno() {
  return ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum();
    }


    int currColno() {
  return ((ScannerWithLocInfo)parser.getScanner()).getCurColNum();
    }

/* //TO-DO
    void semantic_error( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + curr_lineno( )
                            + " Semantic error: " + message);
   parser.omerrs++;
    }
*/
  void error(String msg) {
    parser.errorMsg.error(currLineno(), currColno(), msg);
  }

    void warning( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + currLineno( )
                            + " Warning: " + message);
    }

    String curr_filename() {
    return ((ScannerWithLocInfo)parser.getScanner()).getCurFilename();
    }


  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // query ::= expression 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QueryStmt(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*query*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // query_stmt ::= QUERY error 
            {
              Stmt RESULT = null;
		 error("missing semicolon"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // query_stmt ::= QUERY error SEMI 
            {
              Stmt RESULT = null;
		 error("invalid query"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // query_stmt ::= QUERY query 
            {
              Stmt RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt q = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // query_stmt ::= QUERY query SEMI 
            {
              Stmt RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt q = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = q; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // symbol_evidence ::= error EQ error 
            {
              Stmt RESULT = null;
		error("error in first and second set"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(18/*symbol_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // symbol_evidence ::= implicit_set EQ explicit_set 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ImplicitSetExpr e1 = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExplicitSetExpr e2 = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(18/*symbol_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // value_evidence ::= expression EQ error 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("incorrect second expression"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(17/*value_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // value_evidence ::= error EQ expression 
            {
              Stmt RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("incorrect first expression"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(17/*value_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ValueEvidence(currLineno(), currColno(), e1, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(17/*value_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // evidence ::= value_evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(16/*evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // evidence ::= symbol_evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(16/*evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // evidence_stmt ::= OBS evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("missing semi"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(14/*evidence_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // evidence_stmt ::= OBS evidence SEMI 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(14/*evidence_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // tuple_set ::= LBRACE expression_list FOR type_var_lst RBRACE 
            {
              TupleSetExpr RESULT = null;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(currLineno(), currColno(), elst, vars, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*tuple_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // tuple_set ::= LBRACE expression_list FOR type_var_lst COLON expression RBRACE 
            {
              TupleSetExpr RESULT = null;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		FieldList vars = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TupleSetExpr(currLineno(), currColno(), elst, vars, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*tuple_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // implicit_set ::= LBRACE type ID RBRACE 
            {
              ImplicitSetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(34/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              ImplicitSetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(34/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              ExplicitSetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(33/*explicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // set_expr ::= tuple_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		TupleSetExpr e = (TupleSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // set_expr ::= implicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ImplicitSetExpr e = (ImplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // set_expr ::= explicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExplicitSetExpr e = (ExplicitSetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT = null;
		 error("expecting number expression here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), new ImplicitSetExpr(currLineno(), currColno(), ty, null, null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expression_pair_list ::= expression RIGHTARROW expression 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(39/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(39/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(28/*map_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // semi_colon_separated_expression_list ::= expression_list expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2left, e2), null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // semi_colon_separated_expression_list ::= expression_list semi_colon_separated_expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // semi_colon_separated_expression_list ::= expression_list SEMI SEMI expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2left, e2), null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // semi_colon_separated_expression_list ::= expression_list SEMI expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), new ExprList(new ListInitExpr(e2left, e2), null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // semi_colon_separated_expression_list ::= expression_list SEMI SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra semicolon"); RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // semi_colon_separated_expression_list ::= expression_list SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(currLineno(), currColno(), e), elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(currLineno(), currColno(), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expression_list ::= expression extra_rparens 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expression_list ::= expression RPAREN 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expression_list ::= expression 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expression_list ::= extra_lparens expression COMMA expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expression_list ::= LPAREN expression COMMA expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // opt_expression_list ::= 
            {
              ExprList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // distribution_expr ::= DISTRIB refer_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionExpr(currLineno(), currColno(), sym(name), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(25/*distribution_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // function_call ::= refer_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(currLineno(), currColno(), sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(26/*function_call*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // quantified_formula ::= EXISTS type ID error 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("error in exists expression"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // quantified_formula ::= EXISTS ID expression 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing type in exists statement"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // quantified_formula ::= EXISTS type expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing id in exists statement"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // quantified_formula ::= FORALL type ID error 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("error in for all expression"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // quantified_formula ::= FORALL ID expression 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing type in for all statement"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // quantified_formula ::= FORALL type expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing id in for all statement"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // quantified_formula ::= EXISTS error 
            {
              Expr RESULT = null;
		 error("error in exists formula"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // quantified_formula ::= FORALL error 
            {
              Expr RESULT = null;
		 error("error in for all formula"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(currLineno(), currColno(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // unary_operation_expr ::= LPAREN expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("mismatched parentheses"); RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // unary_operation_expr ::= LPAREN expression error 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // unary_operation_expr ::= LPAREN expression RPAREN 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // unary_operation_expr ::= AT expression 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.AT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), new IntExpr(currLineno(), currColno(), 0), OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // operation_expr ::= unary_operation_expr RPAREN 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // operation_expr ::= unary_operation_expr RPAREN error 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // operation_expr ::= extra_lparens unary_operation_expr error 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // operation_expr ::= LPAREN unary_operation_expr error 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // operation_expr ::= array_type_or_sub expression RBRACKET 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), 
      new SymbolExpr(currLineno(), currColno(), sym(e1)), OpExpr.SUB, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operation_expr ::= expression DOUBLERIGHTARROW expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.IMPLY, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operation_expr ::= expression OR expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operation_expr ::= expression AND expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operation_expr ::= expression GT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operation_expr ::= expression LT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operation_expr ::= expression POWER expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.POWER, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(currLineno(), currColno(), e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operation_expr ::= error binop expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operation_expr ::= binop expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operation_expr ::= expression binop error 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operation_expr ::= expression binop 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("unmatched expression or mismatched parentheses"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // binop ::= DOUBLERIGHTARROW 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // binop ::= OR 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // binop ::= AND 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // binop ::= NEQ 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // binop ::= EQEQ 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // binop ::= GEQ 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // binop ::= LEQ 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // binop ::= GT 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // binop ::= LT 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // binop ::= POWER 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // binop ::= MOD 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // binop ::= DIV 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // binop ::= MULT 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // binop ::= MINUS 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // binop ::= PLUS 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(54/*binop*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // literal ::= NULL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NullExpr(currLineno(), currColno()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new BooleanExpr(currLineno(), currColno(), e.booleanValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new DoubleExpr(currLineno(), currColno(), e.doubleValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // literal ::= INT_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IntExpr(currLineno(), currColno(), e.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.toString().intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literal ::= STRING_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(currLineno(), currColno(), e.intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression ::= refer_name 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolExpr(currLineno(), currColno(), sym(e)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= number_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= quantified_formula 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= map_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= list_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= function_call 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= literal 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= distribution_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parameter_decl ::= PARAM type ID COLON expression 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), e);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parameter_decl ::= PARAM type ID COLON expression SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // parameter_decl ::= PARAM type ID 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("missing semicolon"); RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), null);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_decl ::= PARAM type ID SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(currLineno(), currColno(), ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // elseif_list ::= 
            {
              Expr RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // elseif_list ::= ELSE dependency_statement_body 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // dependency_statement_body ::= IF expression dependency_statement_body elseif_list 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing THEN in dependency statement clause, proceed anyway");
    RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // dependency_statement_body ::= LBRACE dependency_statement_body SEMI RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("extra semicolon inside braces!"); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // dependency_statement_body ::= LBRACE dependency_statement_body RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // dependency_statement_body ::= IF expression THEN dependency_statement_body elseif_list 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IfExpr(currLineno(), currColno(), e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // dependency_statement_body ::= distribution_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // dependency_statement_body ::= EQ expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // refer_name ::= ID DOT refer_name 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(61/*refer_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // refer_name ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(61/*refer_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // distribution_decl ::= DISTRIBUTION ID EQ refer_name LPAREN opt_expression_list RPAREN 
            {
              Stmt RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("missing semicolon"); RESULT = new DistributionDec(currLineno(), currColno(), sym(id),
      new ClassName(currLineno(), currColno(), sym(name)), e);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(12/*distribution_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // distribution_decl ::= DISTRIBUTION ID EQ refer_name LPAREN opt_expression_list RPAREN SEMI 
            {
              Stmt RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new DistributionDec(currLineno(), currColno(), sym(id),
      new ClassName(currLineno(), currColno(), sym(name)), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(12/*distribution_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // id_or_subid ::= ID bracket_error 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(59/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id), s.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(59/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // id_or_subid ::= ID 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArray(currLineno(), currColno(), sym(id)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(59/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bracket_error ::= brackets LBRACKET INT_LITERAL RBRACKET brackets 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // bracket_error ::= LBRACKET INT_LITERAL RBRACKET brackets 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bracket_error ::= brackets LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bracket_error ::= INT_LITERAL 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // bracket_error ::= INT_LITERAL brackets 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bracket_error ::= brackets INT_LITERAL 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("missing brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bracket_error ::= RBRACKET INT_LITERAL LBRACKET 
            {
              SymbolArray RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		error("mismatched brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bracket_error ::= brackets 
            {
              SymbolArray RESULT = null;
		error("missing integer literal in brackets"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*bracket_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // brackets ::= brackets RBRACKET 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*brackets*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // brackets ::= brackets LBRACKET 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*brackets*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // brackets ::= RBRACKET 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*brackets*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // brackets ::= LBRACKET 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*brackets*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // id_or_subid_list ::= id_or_subid extra_commas id_or_subid_list 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra COMMA"); RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(60/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // id_or_subid_list ::= id_or_subid id_or_subid_list 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing COMMA"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(60/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(e, n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(60/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(60/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // distinct_decl ::= DISTINCT refer_name id_or_subid_list 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		error("missing semicolon"); RESULT = new DistinctSymbolDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), e);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(11/*distinct_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // distinct_decl ::= DISTINCT refer_name id_or_subid_list SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistinctSymbolDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(11/*distinct_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // origin_func_decl ::= ORIGIN type ID type RPAREN SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("missing parentheses"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // origin_func_decl ::= ORIGIN type ID LPAREN type SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("missing parentheses"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // origin_func_decl ::= ORIGIN type ID LPAREN type extra_rparens SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("mismatched parentheses"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // origin_func_decl ::= ORIGIN type ID extra_lparens type extra_rparens SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("mismatched parentheses"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // origin_func_decl ::= ORIGIN type ID extra_lparens type RPAREN SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("mismatched parentheses"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("missing semicolon"); RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new OriginFuncDec(currLineno(), currColno(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // origin_var_list ::= ID ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing equal sign");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // origin_var_list ::= ID EQ ID origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing comma");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // origin_var_list ::= ID EQ COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing id");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // origin_var_list ::= ID EQ ID ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra ids");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // origin_var_list ::= ID EQ EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra equal sign");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // origin_var_list ::= ID EQ ID extra_commas origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra commas");RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(currLineno(), currColno(), sym(func), sym(var), n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(58/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(57/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opt_parenthesized_origin_var_list ::= extra_parens origin_var_list RPAREN 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(57/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list extra_parens 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(57/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt_parenthesized_origin_var_list ::= extra_parens origin_var_list extra_parens 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("unmatched parentheses"); RESULT = e;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(57/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(57/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // extra_rparens ::= extra_rparens RPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(53/*extra_rparens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // extra_rparens ::= RPAREN RPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(53/*extra_rparens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // extra_lparens ::= extra_lparens LPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(52/*extra_lparens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extra_lparens ::= LPAREN LPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(52/*extra_lparens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // extra_parens ::= extra_parens paren 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(51/*extra_parens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // extra_parens ::= paren paren 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(51/*extra_parens*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paren ::= RPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*paren*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paren ::= LPAREN 
            {
              String RESULT = null;
		RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*paren*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list error SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 error("error in number statement body"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // number_stmt ::= NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("missing name"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = new NumberDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), otl, body);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // number_stmt ::= NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new NumberDec(currLineno(), currColno(), 
    new NameTy(currLineno(), currColno(), sym(ty)), otl, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing semicolon"); RESULT = new RandomFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, body);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(8/*rand_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new RandomFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(8/*rand_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("mising semicolon"); RESULT = new FixedFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, ex);
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(7/*fixed_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FixedFuncDec(currLineno(), currColno(), sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(7/*fixed_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_var_lst ::= extra_types ID COMMA type_var_lst 
            {
              FieldList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra types"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_var_lst ::= type COMMA type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing id"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_var_lst ::= type ID type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("missing comma"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_var_lst ::= type ID extra_commas type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("extra commas"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_var_lst ::= type ID COMMA 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("extra comma"); RESULT = null;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_var_lst ::= type ID 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(sym(id), ty, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(sym(id), ty, tl); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(56/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // extra_types ::= extra_types type 
            {
              String RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*extra_types*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extra_types ::= type type 
            {
              String RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int ty2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int ty2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*extra_types*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // extra_commas ::= extra_commas COMMA 
            {
              String RESULT = null;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*extra_commas*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // extra_commas ::= COMMA COMMA 
            {
              String RESULT = null;
		 RESULT = "uh oh";
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*extra_commas*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_parenthesized_type_var_lst ::= extra_lparens type_var_lst extra_rparens 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst extra_rparens 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opt_parenthesized_type_var_lst ::= extra_lparens type_var_lst RPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_parenthesized_type_var_lst ::= RPAREN type_var_lst LPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("mismatched parentheses"); RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt_parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(55/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(currLineno(), currColno(), t1, t2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(42/*map_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // array_type ::= array_type RBRACKET 
            {
              ArrayTy RESULT = null;
		int arrtyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int arrtyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("array type error, possibly unmatched right bracket"); RESULT = arrty; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_type ::= array_type LBRACKET 
            {
              ArrayTy RESULT = null;
		int arrtyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int arrtyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 error("array type error, possibly unmatched left bracket"); RESULT = arrty; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_type ::= array_type LBRACKET RBRACKET 
            {
              ArrayTy RESULT = null;
		int arrtyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arrtyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ArrayTy arrty = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 arrty.dim += 1; 
      RESULT = arrty; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_type ::= array_type_error 
            {
              ArrayTy RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ArrayTy typename = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("array type error, possibly unmatched bracket"); RESULT = typename; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array_type ::= array_type_or_sub RBRACKET 
            {
              ArrayTy RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ArrayTy(currLineno(), currColno(), 
      new NameTy(currLineno(), currColno(), sym(typename)), 1); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_type_error ::= refer_name RBRACKET LBRACKET 
            {
              ArrayTy RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*array_type_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array_type_error ::= refer_name RBRACKET RBRACKET 
            {
              ArrayTy RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*array_type_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_type_error ::= refer_name LBRACKET LBRACKET 
            {
              ArrayTy RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;

              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*array_type_error*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_type_or_sub ::= refer_name LBRACKET 
            {
              String RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = typename; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(44/*array_type_or_sub*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_type ::= LIST LT refer_name GT 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListTy(currLineno(), currColno(), 
      new NameTy(currLineno(), currColno(), sym(typename))); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(41/*list_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= map_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= array_type 
            {
              Ty RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ArrayTy at = (ArrayTy)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = at; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= list_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= refer_name 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		String typename = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NameTy(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_decl ::= TYPE ID 
            {
              Stmt RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 error("mising semicolon"); RESULT = new TypeDec(currLineno(), currColno(), sym(typename));
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(6/*type_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_decl ::= TYPE ID SEMI 
            {
              Stmt RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TypeDec(currLineno(), currColno(), sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(6/*type_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= error SEMI 
            {
              Stmt RESULT = null;
		 error("unmatched statement, or possible missing semicolon");
              RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= query_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= evidence_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= error 
            {
              StmtList RESULT = null;
		 System.err.println(
    "Possible cause: forgotten semicolon" );
    RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StmtList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_lst ::= statement statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int slstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // opt_statement_lst ::= 
            {
              StmtList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opt_statement_lst 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

