
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Apr 19 13:00:44 PDT 2012
//----------------------------------------------------

package blog.parse;

import java_cup.runtime.*;
import blog.absyn.*;

/** CUP v0.10k generated parser.
  * @version Thu Apr 19 13:00:44 PDT 2012
  */
public class BLOGParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public BLOGParser() {super();}

  /** Constructor which sets the default scanner. */
  public BLOGParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\003\003\000\002\004\002\000\002\004" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\052\003\000\002\050\004\000\002\053\004\000\002" +
    "\053\005\000\002\051\010\000\002\054\002\000\002\054" +
    "\004\000\002\054\005\000\002\055\005\000\002\055\003" +
    "\000\002\056\002\000\002\056\004\000\002\056\005\000" +
    "\002\057\006\000\002\057\004\000\002\011\011\000\002" +
    "\012\010\000\002\013\007\000\002\060\005\000\002\060" +
    "\002\000\002\061\007\000\002\061\005\000\002\014\011" +
    "\000\002\015\006\000\002\063\003\000\002\063\005\000" +
    "\002\062\003\000\002\062\006\000\002\016\012\000\002" +
    "\064\003\000\002\064\005\000\002\037\004\000\002\037" +
    "\007\000\002\037\007\000\002\037\005\000\002\037\003" +
    "\000\002\036\004\000\002\036\002\000\002\017\006\000" +
    "\002\017\010\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\006\000\002\027\003\000\002\030\004\000\002\030" +
    "\004\000\002\031\006\000\002\031\006\000\002\032\006" +
    "\000\002\032\003\000\002\044\003\000\002\044\002\000" +
    "\002\045\005\000\002\045\003\000\002\033\005\000\002" +
    "\033\005\000\002\043\005\000\002\043\005\000\002\034" +
    "\005\000\002\046\007\000\002\046\005\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\040\003\000" +
    "\002\040\003\000\002\041\005\000\002\042\010\000\002" +
    "\042\006\000\002\020\005\000\002\022\003\000\002\023" +
    "\005\000\002\021\005\000\002\024\003\000\002\002\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\032\002\000\003\026\014\021\015\022\016" +
    "\030\017\020\020\025\021\032\022\017\023\035\025\027" +
    "\064\004\001\002\000\004\037\261\001\002\000\032\002" +
    "\ufff9\003\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\025\ufff9\064\ufff9\001\002\000" +
    "\032\002\ufff1\003\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\064\ufff1\001" +
    "\002\000\004\002\uffff\001\002\000\032\002\ufff7\003\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\025\ufff7\064\ufff7\001\002\000\032\002\ufffd" +
    "\003\026\014\021\015\022\016\030\017\020\020\025\021" +
    "\032\022\017\023\035\025\027\064\004\001\002\000\032" +
    "\002\ufff5\003\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\064\ufff5\001\002" +
    "\000\032\002\ufff6\003\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\064\ufff6" +
    "\001\002\000\032\002\ufffa\003\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa" +
    "\064\ufffa\001\002\000\032\002\ufff3\003\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\025\ufff3\064\ufff3\001\002\000\004\002\341\001\002\000" +
    "\040\026\070\027\050\030\075\031\061\032\101\033\054" +
    "\034\052\035\065\036\062\037\060\041\067\055\051\064" +
    "\047\070\057\072\056\001\002\000\006\024\040\037\036" +
    "\001\002\000\004\037\323\001\002\000\006\024\040\037" +
    "\036\001\002\000\032\002\ufff0\003\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\025" +
    "\ufff0\064\ufff0\001\002\000\032\002\ufffb\003\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\025\ufffb\064\ufffb\001\002\000\004\037\261\001\002" +
    "\000\006\002\ufffc\061\260\001\002\000\004\037\246\001" +
    "\002\000\006\024\040\037\036\001\002\000\004\002\001" +
    "\001\002\000\040\026\070\027\050\030\075\031\061\032" +
    "\101\033\054\034\052\035\065\036\062\037\060\041\067" +
    "\055\051\064\047\070\057\072\056\001\002\000\032\002" +
    "\ufff2\003\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\025\ufff2\064\ufff2\001\002\000" +
    "\032\002\ufff4\003\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\064\ufff4\001" +
    "\002\000\006\024\040\037\036\001\002\000\062\010\uffeb" +
    "\013\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\065\uffeb\067" +
    "\uffeb\071\uffeb\072\167\073\uffeb\001\002\000\062\010\uffee" +
    "\013\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\056\uffee\057\uffee\060\uffee\061\uffee\065\uffee\067" +
    "\uffee\071\uffee\072\uffee\073\uffee\001\002\000\004\045\220" +
    "\001\002\000\004\037\044\001\002\000\062\010\uffec\013" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\065\uffec\067\uffec" +
    "\071\uffec\072\uffec\073\uffec\001\002\000\062\010\uffed\013" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\056\uffed\057\uffed\060\uffed\061\uffed\065\uffed\067\uffed" +
    "\071\uffed\072\uffed\073\uffed\001\002\000\006\061\045\062" +
    "\046\001\002\000\032\002\uffc5\003\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025" +
    "\uffc5\064\uffc5\001\002\000\040\026\070\027\050\030\075" +
    "\031\061\032\101\033\054\034\052\035\065\036\062\037" +
    "\060\041\067\055\051\064\047\070\057\072\056\001\002" +
    "\000\012\003\217\024\040\037\036\070\214\001\002\000" +
    "\006\024\040\037\036\001\002\000\040\026\070\027\050" +
    "\030\075\031\061\032\101\033\054\034\052\035\065\036" +
    "\062\037\060\041\067\055\051\064\047\070\057\072\056" +
    "\001\002\000\060\010\uffb6\013\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\065\uffb6\067\uffb6\071\uffb6\072\uffb6\073\uffb6\001\002" +
    "\000\060\010\uffc1\013\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\065" +
    "\uffc1\067\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002\000\060" +
    "\010\uffb7\013\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\065\uffb7\067" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\001\002\000\060\010\uff90" +
    "\013\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90" +
    "\056\uff90\057\uff90\060\uff90\061\uff90\065\uff90\067\uff90\071" +
    "\uff90\072\uff90\073\uff90\001\002\000\042\026\070\027\050" +
    "\030\075\031\061\032\101\033\054\034\052\035\065\036" +
    "\062\037\060\041\067\055\051\064\047\070\057\072\056" +
    "\073\uff9e\001\002\000\044\024\040\026\070\027\050\030" +
    "\075\031\061\032\101\033\054\034\052\035\065\036\062" +
    "\037\155\041\067\055\051\064\047\070\057\071\uff9e\072" +
    "\056\001\002\000\062\010\uffa0\013\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\065\uffa0\066\144\067\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\001\002\000\060\010\uffb9\013\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\061\uffb9\065\uffb9\067\uffb9\071\uffb9\072\uffb9\073\uffb9\001" +
    "\002\000\060\010\uffbb\013\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\065\uffbb\067\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000" +
    "\040\040\113\041\105\042\111\043\114\044\110\045\120" +
    "\046\115\047\122\050\117\051\107\052\112\056\106\057" +
    "\121\061\143\072\116\001\002\000\060\010\uffbc\013\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\065\uffbc\067\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\001\002\000\060\010\uffba\013\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\065\uffba\067\uffba\071\uffba\072\uffba\073" +
    "\uffba\001\002\000\060\010\uff91\013\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\065\uff91\067\uff91\071\uff91\072\uff91\073\uff91\001" +
    "\002\000\040\026\070\027\050\030\075\031\061\032\101" +
    "\033\054\034\052\035\065\036\062\037\060\041\067\055" +
    "\051\064\047\070\057\072\056\001\002\000\006\024\040" +
    "\037\036\001\002\000\060\010\uffc2\013\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\065\uffc2\067\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\001\002\000\060\010\uffc3\013\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\065\uffc3\067\uffc3\071\uffc3\072\uffc3\073\uffc3\001\002" +
    "\000\060\010\uffa6\013\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\065" +
    "\uffa6\067\uffa6\071\uffa6\072\uffa6\073\uffa6\001\002\000\060" +
    "\010\uffbe\013\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\065\uffbe\067" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\060\010\uffb5" +
    "\013\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\065\uffb5\067\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\001\002\000\060\010\uffbd\013\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\065\uffbd\067\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\001\002\000\060\010\uffbf\013\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\065\uffbf\067\uffbf\071\uffbf\072\uffbf\073" +
    "\uffbf\001\002\000\060\010\uffc0\013\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\065\uffc0\067\uffc0\071\uffc0\072\uffc0\073\uffc0\001" +
    "\002\000\060\010\uffb8\013\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\065\uffb8\067\uffb8\071\uffb8\072\uffb8\073\uffb8\001\002\000" +
    "\004\037\103\001\002\000\040\026\070\027\050\030\075" +
    "\031\061\032\101\033\054\034\052\035\065\036\062\037" +
    "\060\041\067\055\051\064\047\070\057\072\056\001\002" +
    "\000\060\010\uffa2\013\uffa2\040\113\041\105\042\111\043" +
    "\114\044\110\045\120\046\115\047\122\050\117\051\107" +
    "\052\112\053\uffa2\056\106\057\121\060\uffa2\061\uffa2\065" +
    "\uffa2\067\uffa2\071\uffa2\072\116\073\uffa2\001\002\000\040" +
    "\026\070\027\050\030\075\031\061\032\101\033\054\034" +
    "\052\035\065\036\062\037\060\041\067\055\051\064\047" +
    "\070\057\072\056\001\002\000\040\026\070\027\050\030" +
    "\075\031\061\032\101\033\054\034\052\035\065\036\062" +
    "\037\060\041\067\055\051\064\047\070\057\072\056\001" +
    "\002\000\040\026\070\027\050\030\075\031\061\032\101" +
    "\033\054\034\052\035\065\036\062\037\060\041\067\055" +
    "\051\064\047\070\057\072\056\001\002\000\040\026\070" +
    "\027\050\030\075\031\061\032\101\033\054\034\052\035" +
    "\065\036\062\037\060\041\067\055\051\064\047\070\057" +
    "\072\056\001\002\000\040\026\070\027\050\030\075\031" +
    "\061\032\101\033\054\034\052\035\065\036\062\037\060" +
    "\041\067\055\051\064\047\070\057\072\056\001\002\000" +
    "\040\026\070\027\050\030\075\031\061\032\101\033\054" +
    "\034\052\035\065\036\062\037\060\041\067\055\051\064" +
    "\047\070\057\072\056\001\002\000\040\026\070\027\050" +
    "\030\075\031\061\032\101\033\054\034\052\035\065\036" +
    "\062\037\060\041\067\055\051\064\047\070\057\072\056" +
    "\001\002\000\040\026\070\027\050\030\075\031\061\032" +
    "\101\033\054\034\052\035\065\036\062\037\060\041\067" +
    "\055\051\064\047\070\057\072\056\001\002\000\040\026" +
    "\070\027\050\030\075\031\061\032\101\033\054\034\052" +
    "\035\065\036\062\037\060\041\067\055\051\064\047\070" +
    "\057\072\056\001\002\000\040\026\070\027\050\030\075" +
    "\031\061\032\101\033\054\034\052\035\065\036\062\037" +
    "\060\041\067\055\051\064\047\070\057\072\056\001\002" +
    "\000\040\026\070\027\050\030\075\031\061\032\101\033" +
    "\054\034\052\035\065\036\062\037\060\041\067\055\051" +
    "\064\047\070\057\072\056\001\002\000\040\026\070\027" +
    "\050\030\075\031\061\032\101\033\054\034\052\035\065" +
    "\036\062\037\060\041\067\055\051\064\047\070\057\072" +
    "\056\001\002\000\040\026\070\027\050\030\075\031\061" +
    "\032\101\033\054\034\052\035\065\036\062\037\060\041" +
    "\067\055\051\064\047\070\057\072\056\001\002\000\040" +
    "\026\070\027\050\030\075\031\061\032\101\033\054\034" +
    "\052\035\065\036\062\037\060\041\067\055\051\064\047" +
    "\070\057\072\056\001\002\000\044\010\uffad\013\uffad\040" +
    "\113\041\105\042\111\043\114\044\110\053\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\065\uffad\067\uffad\071\uffad\072" +
    "\116\073\uffad\001\002\000\060\010\uffa8\013\uffa8\040\113" +
    "\041\105\042\111\043\114\044\110\045\120\046\115\047" +
    "\122\050\117\051\107\052\112\053\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\065\uffa8\067\uffa8\071\uffa8\072\116\073" +
    "\uffa8\001\002\000\044\010\uffaf\013\uffaf\040\113\041\105" +
    "\042\111\043\114\044\110\053\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\061\uffaf\065\uffaf\067\uffaf\071\uffaf\072\116\073\uffaf" +
    "\001\002\000\044\010\uffac\013\uffac\040\113\041\105\042" +
    "\111\043\114\044\110\053\uffac\056\uffac\057\uffac\060\uffac" +
    "\061\uffac\065\uffac\067\uffac\071\uffac\072\116\073\uffac\001" +
    "\002\000\040\040\113\041\105\042\111\043\114\044\110" +
    "\045\120\046\115\047\122\050\117\051\107\052\112\056" +
    "\106\057\121\072\116\073\130\001\002\000\060\010\uffa7" +
    "\013\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\065\uffa7\067\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\001\002\000\044\010\uffae\013\uffae" +
    "\040\113\041\105\042\111\043\114\044\110\053\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\065\uffae\067\uffae\071\uffae" +
    "\072\116\073\uffae\001\002\000\060\010\uffb1\013\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\065\uffb1\067\uffb1\071\uffb1\072\116" +
    "\073\uffb1\001\002\000\060\010\uffb4\013\uffb4\040\uffb4\041" +
    "\uffb4\042\111\043\114\044\110\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\065\uffb4\067\uffb4\071\uffb4\072\116\073\uffb4" +
    "\001\002\000\044\010\uffaa\013\uffaa\040\113\041\105\042" +
    "\111\043\114\044\110\053\uffaa\056\uffaa\057\uffaa\060\uffaa" +
    "\061\uffaa\065\uffaa\067\uffaa\071\uffaa\072\116\073\uffaa\001" +
    "\002\000\060\010\uffb2\013\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\065\uffb2\067\uffb2\071\uffb2\072\116\073\uffb2\001\002\000" +
    "\060\010\uffb0\013\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\065\uffb0" +
    "\067\uffb0\071\uffb0\072\116\073\uffb0\001\002\000\044\010" +
    "\uffab\013\uffab\040\113\041\105\042\111\043\114\044\110" +
    "\053\uffab\056\uffab\057\uffab\060\uffab\061\uffab\065\uffab\067" +
    "\uffab\071\uffab\072\116\073\uffab\001\002\000\060\010\uffa9" +
    "\013\uffa9\040\113\041\105\042\111\043\114\044\110\045" +
    "\120\046\115\047\122\050\117\051\107\052\112\053\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\065\uffa9\067\uffa9\071" +
    "\uffa9\072\116\073\uffa9\001\002\000\060\010\uffb3\013\uffb3" +
    "\040\uffb3\041\uffb3\042\111\043\114\044\110\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\065\uffb3\067\uffb3\071\uffb3\072" +
    "\116\073\uffb3\001\002\000\060\010\uffa5\013\uffa5\040\uffa5" +
    "\041\uffa5\042\111\043\114\044\110\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\065\uffa5\067\uffa5\071\uffa5\072\116\073" +
    "\uffa5\001\002\000\032\002\uffc4\003\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\025" +
    "\uffc4\064\uffc4\001\002\000\042\026\070\027\050\030\075" +
    "\031\061\032\101\033\054\034\052\035\065\036\062\037" +
    "\060\041\067\055\051\064\047\067\uff9e\070\057\072\056" +
    "\001\002\000\050\040\113\041\105\042\111\043\114\044" +
    "\110\045\120\046\115\047\122\050\117\051\107\052\112" +
    "\056\106\057\121\060\151\061\uff9c\067\uff9c\071\uff9c\072" +
    "\116\073\uff9c\001\002\000\006\067\uff9f\071\uff9f\001\002" +
    "\000\004\067\150\001\002\000\060\010\uffa1\013\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\065\uffa1\067\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\001\002\000\040\026\070\027\050\030\075\031" +
    "\061\032\101\033\054\034\052\035\065\036\062\037\060" +
    "\041\067\055\051\064\047\070\057\072\056\001\002\000" +
    "\012\061\uff9d\067\uff9d\071\uff9d\073\uff9d\001\002\000\004" +
    "\037\173\001\002\000\004\071\172\001\002\000\050\037" +
    "\uffeb\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\065\uffa0\066\144\071\uffa0\072\167\001\002" +
    "\000\044\040\113\041\105\042\111\043\114\044\110\045" +
    "\120\046\115\047\122\050\117\051\107\052\112\056\106" +
    "\057\121\060\151\065\161\071\uff9c\072\116\001\002\000" +
    "\004\071\160\001\002\000\060\010\uff8f\013\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\065\uff8f\067\uff8f\071\uff8f\072\uff8f\073" +
    "\uff8f\001\002\000\040\026\070\027\050\030\075\031\061" +
    "\032\101\033\054\034\052\035\065\036\062\037\060\041" +
    "\067\055\051\064\047\070\057\072\056\001\002\000\042" +
    "\040\113\041\105\042\111\043\114\044\110\045\120\046" +
    "\115\047\122\050\117\051\107\052\112\056\106\057\121" +
    "\060\163\071\uff95\072\116\001\002\000\040\026\070\027" +
    "\050\030\075\031\061\032\101\033\054\034\052\035\065" +
    "\036\062\037\060\041\067\055\051\064\047\070\057\072" +
    "\056\001\002\000\004\071\uff96\001\002\000\040\040\113" +
    "\041\105\042\111\043\114\044\110\045\120\046\115\047" +
    "\122\050\117\051\107\052\112\056\106\057\121\065\161" +
    "\072\116\001\002\000\062\010\uffea\013\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\065\uffea\067\uffea\071\uffea\072\uffea" +
    "\073\uffea\001\002\000\004\073\170\001\002\000\062\010" +
    "\uffe9\013\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\065\uffe9" +
    "\067\uffe9\071\uffe9\072\167\073\uffe9\001\002\000\062\010" +
    "\uffe8\013\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\065\uffe8" +
    "\067\uffe8\071\uffe8\072\uffe8\073\uffe8\001\002\000\060\010" +
    "\uff97\013\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\056\uff97\057\uff97\060\uff97\061\uff97\065\uff97\067\uff97" +
    "\071\uff97\072\uff97\073\uff97\001\002\000\006\062\174\071" +
    "\175\001\002\000\040\026\070\027\050\030\075\031\061" +
    "\032\101\033\054\034\052\035\065\036\062\037\060\041" +
    "\067\055\051\064\047\070\057\072\056\001\002\000\060" +
    "\010\uff8d\013\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\065\uff8d\067" +
    "\uff8d\071\uff8d\072\uff8d\073\uff8d\001\002\000\040\040\113" +
    "\041\105\042\111\043\114\044\110\045\120\046\115\047" +
    "\122\050\117\051\107\052\112\056\106\057\121\071\177" +
    "\072\116\001\002\000\060\010\uff8e\013\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\056\uff8e\057\uff8e\060" +
    "\uff8e\061\uff8e\065\uff8e\067\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\001\002\000\004\073\207\001\002\000\006\061\204\073" +
    "\uff9f\001\002\000\004\073\203\001\002\000\060\010\uff9b" +
    "\013\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\065\uff9b\067\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\001\002\000\040\026\070\027\050" +
    "\030\075\031\061\032\101\033\054\034\052\035\065\036" +
    "\062\037\060\041\067\055\051\064\047\070\057\072\056" +
    "\001\002\000\004\073\uff99\001\002\000\006\061\204\073" +
    "\uff98\001\002\000\060\010\uff9a\013\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\065\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a\001" +
    "\002\000\060\010\uffa4\013\uffa4\040\113\041\105\042\111" +
    "\043\114\044\110\045\120\046\115\047\122\050\117\051" +
    "\107\052\112\053\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4" +
    "\065\uffa4\067\uffa4\071\uffa4\072\116\073\uffa4\001\002\000" +
    "\004\037\212\001\002\000\040\026\070\027\050\030\075" +
    "\031\061\032\101\033\054\034\052\035\065\036\062\037" +
    "\060\041\067\055\051\064\047\070\057\072\056\001\002" +
    "\000\060\010\uffa3\013\uffa3\040\113\041\105\042\111\043" +
    "\114\044\110\045\120\046\115\047\122\050\117\051\107" +
    "\052\112\053\uffa3\056\106\057\121\060\uffa3\061\uffa3\065" +
    "\uffa3\067\uffa3\071\uffa3\072\116\073\uffa3\001\002\000\044" +
    "\024\040\026\070\027\050\030\075\031\061\032\101\033" +
    "\054\034\052\035\065\036\062\037\155\041\067\055\051" +
    "\064\047\070\057\071\uff9e\072\056\001\002\000\060\010" +
    "\uff94\013\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\065\uff94\067\uff94" +
    "\071\uff94\072\uff94\073\uff94\001\002\000\060\010\uff93\013" +
    "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\056" +
    "\uff93\057\uff93\060\uff93\061\uff93\065\uff93\067\uff93\071\uff93" +
    "\072\uff93\073\uff93\001\002\000\060\010\uff92\013\uff92\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\056\uff92\057" +
    "\uff92\060\uff92\061\uff92\065\uff92\067\uff92\071\uff92\072\uff92" +
    "\073\uff92\001\002\000\006\024\040\037\036\001\002\000" +
    "\004\060\222\001\002\000\006\024\040\037\036\001\002" +
    "\000\004\046\224\001\002\000\062\010\uffe7\013\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\065\uffe7\067\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\001\002\000\004\061\227\001\002\000" +
    "\040\040\113\041\105\042\111\043\114\044\110\045\120" +
    "\046\115\047\122\050\117\051\107\052\112\056\106\057" +
    "\121\061\uff88\072\116\001\002\000\032\002\uff89\003\uff89" +
    "\014\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022" +
    "\uff89\023\uff89\025\uff89\064\uff89\001\002\000\004\037\231" +
    "\001\002\000\006\053\uffe1\066\233\001\002\000\004\053" +
    "\243\001\002\000\010\024\040\037\036\067\234\001\002" +
    "\000\014\003\uffe0\012\uffe0\053\uffe0\054\uffe0\070\uffe0\001" +
    "\002\000\004\037\240\001\002\000\004\067\237\001\002" +
    "\000\014\003\uffdf\012\uffdf\053\uffdf\054\uffdf\070\uffdf\001" +
    "\002\000\006\060\241\067\uffdd\001\002\000\006\024\040" +
    "\037\036\001\002\000\004\067\uffde\001\002\000\040\026" +
    "\070\027\050\030\075\031\061\032\101\033\054\034\052" +
    "\035\065\036\062\037\060\041\067\055\051\064\047\070" +
    "\057\072\056\001\002\000\040\040\113\041\105\042\111" +
    "\043\114\044\110\045\120\046\115\047\122\050\117\051" +
    "\107\052\112\056\106\057\121\061\245\072\116\001\002" +
    "\000\032\002\uffdc\003\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\064\uffdc" +
    "\001\002\000\004\053\247\001\002\000\004\037\250\001" +
    "\002\000\006\063\256\066\uffce\001\002\000\004\066\252" +
    "\001\002\000\042\026\070\027\050\030\075\031\061\032" +
    "\101\033\054\034\052\035\065\036\062\037\060\041\067" +
    "\055\051\064\047\067\uff9e\070\057\072\056\001\002\000" +
    "\004\067\254\001\002\000\004\061\255\001\002\000\032" +
    "\002\uffcf\003\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\064\uffcf\001\002" +
    "\000\004\037\250\001\002\000\004\066\uffcd\001\002\000" +
    "\032\002\ufff8\003\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\064\ufff8\001" +
    "\002\000\020\003\uffeb\012\uffeb\037\uffeb\053\uffeb\054\uffeb" +
    "\066\uffeb\070\uffeb\001\002\000\004\037\263\001\002\000" +
    "\010\060\uffd1\061\uffd1\072\271\001\002\000\006\060\267" +
    "\061\uffd3\001\002\000\004\061\266\001\002\000\032\002" +
    "\uffd4\003\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\025\uffd4\064\uffd4\001\002\000" +
    "\004\037\263\001\002\000\004\061\uffd2\001\002\000\004" +
    "\031\272\001\002\000\004\073\273\001\002\000\006\060" +
    "\uffd0\061\uffd0\001\002\000\004\037\275\001\002\000\016" +
    "\003\uffe1\012\uffe1\053\uffe1\054\uffe1\066\233\070\uffe1\001" +
    "\002\000\014\003\301\012\304\053\277\054\303\070\300" +
    "\001\002\000\040\026\070\027\050\030\075\031\061\032" +
    "\101\033\054\034\052\035\065\036\062\037\060\041\067" +
    "\055\051\064\047\070\057\072\056\001\002\000\014\003" +
    "\301\012\304\053\277\054\303\070\300\001\002\000\010" +
    "\010\uffc8\061\uffc8\071\uffc8\001\002\000\004\061\317\001" +
    "\002\000\004\037\250\001\002\000\040\026\070\027\050" +
    "\030\075\031\061\032\101\033\054\034\052\035\065\036" +
    "\062\037\060\041\067\055\051\064\047\070\057\072\056" +
    "\001\002\000\040\013\306\040\113\041\105\042\111\043" +
    "\114\044\110\045\120\046\115\047\122\050\117\051\107" +
    "\052\112\056\106\057\121\072\116\001\002\000\014\003" +
    "\301\012\304\053\277\054\303\070\300\001\002\000\010" +
    "\010\310\061\uffc6\071\uffc6\001\002\000\014\003\301\012" +
    "\304\053\277\054\303\070\300\001\002\000\010\010\uffca" +
    "\061\uffca\071\uffca\001\002\000\010\010\uffc7\061\uffc7\071" +
    "\uffc7\001\002\000\004\066\314\001\002\000\042\026\070" +
    "\027\050\030\075\031\061\032\101\033\054\034\052\035" +
    "\065\036\062\037\060\041\067\055\051\064\047\067\uff9e" +
    "\070\057\072\056\001\002\000\004\067\316\001\002\000" +
    "\010\010\uffcb\061\uffcb\071\uffcb\001\002\000\032\002\uffdb" +
    "\003\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\025\uffdb\064\uffdb\001\002\000\004" +
    "\071\321\001\002\000\010\010\uffc9\061\uffc9\071\uffc9\001" +
    "\002\000\044\010\uffcc\040\113\041\105\042\111\043\114" +
    "\044\110\045\120\046\115\047\122\050\117\051\107\052" +
    "\112\056\106\057\121\061\uffcc\071\uffcc\072\116\001\002" +
    "\000\004\061\324\001\002\000\032\002\uffef\003\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\064\uffef\001\002\000\004\037\326\001" +
    "\002\000\004\066\327\001\002\000\006\024\040\037\036" +
    "\001\002\000\004\067\331\001\002\000\004\061\332\001" +
    "\002\000\032\002\uffd5\003\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025\uffd5\064" +
    "\uffd5\001\002\000\040\040\113\041\105\042\111\043\114" +
    "\044\110\045\120\046\115\047\122\050\117\051\107\052" +
    "\112\053\337\056\106\057\121\072\116\001\002\000\004" +
    "\061\uff8b\001\002\000\004\061\336\001\002\000\032\002" +
    "\uff8c\003\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\025\uff8c\064\uff8c\001\002\000" +
    "\040\026\070\027\050\030\075\031\061\032\101\033\054" +
    "\034\052\035\065\036\062\037\060\041\067\055\051\064" +
    "\047\070\057\072\056\001\002\000\040\040\113\041\105" +
    "\042\111\043\114\044\110\045\120\046\115\047\122\050" +
    "\117\051\107\052\112\056\106\057\121\061\uff8a\072\116" +
    "\001\002\000\004\002\uff87\001\002\000\004\002\ufffe\001" +
    "\002\000\016\003\uffd8\012\uffd8\053\uffd8\054\uffd8\066\345" +
    "\070\uffd8\001\002\000\014\003\301\012\304\053\277\054" +
    "\303\070\300\001\002\000\004\037\346\001\002\000\004" +
    "\053\351\001\002\000\004\067\350\001\002\000\014\003" +
    "\uffd9\012\uffd9\053\uffd9\054\uffd9\070\uffd9\001\002\000\004" +
    "\037\352\001\002\000\006\060\353\067\uffd6\001\002\000" +
    "\004\037\346\001\002\000\004\067\uffd7\001\002\000\004" +
    "\061\356\001\002\000\032\002\uffda\003\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\025\uffda\064\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\040\003\015\004\030\005\006\006\010\007" +
    "\023\010\007\011\012\012\011\013\014\014\033\015\032" +
    "\016\022\017\005\020\013\021\004\001\001\000\004\052" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\341\006\010\007" +
    "\023\010\007\011\012\012\011\013\014\014\033\015\032" +
    "\016\022\017\005\020\013\021\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\022\334\023\333\025\332\026" +
    "\070\027\071\030\072\031\073\032\052\033\077\034\076" +
    "\035\063\040\075\041\065\042\054\001\001\000\012\047" +
    "\324\050\042\051\041\052\036\001\001\000\002\001\001" +
    "\000\012\047\273\050\042\051\041\052\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\227\050" +
    "\042\051\041\052\036\001\001\000\002\001\001\000\034" +
    "\024\224\025\225\026\070\027\071\030\072\031\073\032" +
    "\052\033\077\034\076\035\063\040\075\041\065\042\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\047" +
    "\040\050\042\051\041\052\036\001\001\000\004\053\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\025\062\026\070\027\071\030" +
    "\072\031\073\032\052\033\077\034\076\035\063\040\075" +
    "\041\065\042\054\001\001\000\020\040\214\041\065\042" +
    "\054\047\215\050\042\051\041\052\036\001\001\000\012" +
    "\047\210\050\042\051\041\052\036\001\001\000\032\025" +
    "\207\026\070\027\071\030\072\031\073\032\052\033\077" +
    "\034\076\035\063\040\075\041\065\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\025\144\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\043\177\044\201\045\200\001\001\000\050\025" +
    "\155\026\070\027\071\030\072\031\073\032\052\033\077" +
    "\034\076\035\063\040\075\041\065\042\054\044\156\045" +
    "\145\046\153\047\152\050\042\051\041\052\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\141\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\001\001\000\012\047\101\050\042\051\041\052" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\025\103\026\070\027\071\030" +
    "\072\031\073\032\052\033\077\034\076\035\063\040\075" +
    "\041\065\042\054\001\001\000\002\001\001\000\032\025" +
    "\140\026\070\027\071\030\072\031\073\032\052\033\077" +
    "\034\076\035\063\040\075\041\065\042\054\001\001\000" +
    "\032\025\137\026\070\027\071\030\072\031\073\032\052" +
    "\033\077\034\076\035\063\040\075\041\065\042\054\001" +
    "\001\000\032\025\136\026\070\027\071\030\072\031\073" +
    "\032\052\033\077\034\076\035\063\040\075\041\065\042" +
    "\054\001\001\000\032\025\135\026\070\027\071\030\072" +
    "\031\073\032\052\033\077\034\076\035\063\040\075\041" +
    "\065\042\054\001\001\000\032\025\134\026\070\027\071" +
    "\030\072\031\073\032\052\033\077\034\076\035\063\040" +
    "\075\041\065\042\054\001\001\000\032\025\133\026\070" +
    "\027\071\030\072\031\073\032\052\033\077\034\076\035" +
    "\063\040\075\041\065\042\054\001\001\000\032\025\132" +
    "\026\070\027\071\030\072\031\073\032\052\033\077\034" +
    "\076\035\063\040\075\041\065\042\054\001\001\000\032" +
    "\025\131\026\070\027\071\030\072\031\073\032\052\033" +
    "\077\034\076\035\063\040\075\041\065\042\054\001\001" +
    "\000\032\025\130\026\070\027\071\030\072\031\073\032" +
    "\052\033\077\034\076\035\063\040\075\041\065\042\054" +
    "\001\001\000\032\025\126\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\001\001\000\032\025\125\026\070\027\071\030" +
    "\072\031\073\032\052\033\077\034\076\035\063\040\075" +
    "\041\065\042\054\001\001\000\032\025\124\026\070\027" +
    "\071\030\072\031\073\032\052\033\077\034\076\035\063" +
    "\040\075\041\065\042\054\001\001\000\032\025\123\026" +
    "\070\027\071\030\072\031\073\032\052\033\077\034\076" +
    "\035\063\040\075\041\065\042\054\001\001\000\032\025" +
    "\122\026\070\027\071\030\072\031\073\032\052\033\077" +
    "\034\076\035\063\040\075\041\065\042\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\025\144\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\044\146\045\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\025\144\026\070\027\071\030\072\031\073\032\052\033" +
    "\077\034\076\035\063\040\075\041\065\042\054\045\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\025\161\026\070\027" +
    "\071\030\072\031\073\032\052\033\077\034\076\035\063" +
    "\040\075\041\065\042\054\001\001\000\002\001\001\000" +
    "\034\025\164\026\070\027\071\030\072\031\073\032\052" +
    "\033\077\034\076\035\063\040\075\041\065\042\054\046" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\025\175\026\070\027\071\030\072\031\073\032\052\033" +
    "\077\034\076\035\063\040\075\041\065\042\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\025\144\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\043\204\045\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\212\026\070\027\071\030\072\031" +
    "\073\032\052\033\077\034\076\035\063\040\075\041\065" +
    "\042\054\001\001\000\002\001\001\000\046\025\144\026" +
    "\070\027\071\030\072\031\073\032\052\033\077\034\076" +
    "\035\063\040\075\041\065\042\054\044\156\045\145\047" +
    "\152\050\042\051\041\052\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\220\050" +
    "\042\051\041\052\036\001\001\000\002\001\001\000\012" +
    "\047\222\050\042\051\041\052\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\231\001" +
    "\001\000\002\001\001\000\014\047\234\050\042\051\041" +
    "\052\036\057\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\047\234\050\042\051\041\052\036\057\241\001" +
    "\001\000\002\001\001\000\032\025\243\026\070\027\071" +
    "\030\072\031\073\032\052\033\077\034\076\035\063\040" +
    "\075\041\065\042\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\025\144\026\070" +
    "\027\071\030\072\031\073\032\052\033\077\034\076\035" +
    "\063\040\075\041\065\042\054\044\252\045\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\263\063\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\062\263\063\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\275\001\001\000\004\037" +
    "\301\001\001\000\032\025\321\026\070\027\071\030\072" +
    "\031\073\032\052\033\077\034\076\035\063\040\075\041" +
    "\065\042\054\001\001\000\004\037\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\312\001\001\000" +
    "\032\025\304\026\070\027\071\030\072\031\073\032\052" +
    "\033\077\034\076\035\063\040\075\041\065\042\054\001" +
    "\001\000\002\001\001\000\004\037\306\001\001\000\004" +
    "\036\310\001\001\000\004\037\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\025\144" +
    "\026\070\027\071\030\072\031\073\032\052\033\077\034" +
    "\076\035\063\040\075\041\065\042\054\044\314\045\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\327\050\042\051\041\052\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\025\337\026\070\027\071\030" +
    "\072\031\073\032\052\033\077\034\076\035\063\040\075" +
    "\041\065\042\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\343\001\001\000\004" +
    "\037\354\001\001\000\004\061\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BLOGParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BLOGParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BLOGParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 122;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error
  
  public Absyn getParseResult() {
    return parseResult;
  }
  
  public BLOGParser(Scanner s, blog.msg.ErrorMsg msg) {
    this(s);
    errorMsg = msg;
  }
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$BLOGParser$actions {

 

  static blog.symbol.Symbol sym(String s) {
	         return blog.symbol.Symbol.symbol(s);
  }

    LocationInFile getCurLocation() {
        return new LocationInFile
            (((ScannerWithLocInfo)parser.getScanner()).getCurFilename(),
             ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum());
    }
   
    int currLineno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurLineNum();
    }


    int currColno() {
	return ((ScannerWithLocInfo)parser.getScanner()).getCurColNum();
    }    

/* //TO-DO
    void semantic_error( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + curr_lineno( ) 
                            + " Semantic error: " + message);
	 parser.omerrs++;
    }
*/
  void error(String msg) {
    parser.errorMsg.error(currLineno(), currColno(), msg);
  }

    void warning( String message ){
         System.err.println("\n" + curr_filename( ) + ":" + currLineno( ) 
                            + " Warning: " + message);
    }

    String curr_filename() {
	  return ((ScannerWithLocInfo)parser.getScanner()).getCurFilename();
    }
   

  private final BLOGParser parser;

  /** Constructor */
  CUP$BLOGParser$actions(BLOGParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$BLOGParser$do_action(
    int                        CUP$BLOGParser$act_num,
    java_cup.runtime.lr_parser CUP$BLOGParser$parser,
    java.util.Stack            CUP$BLOGParser$stack,
    int                        CUP$BLOGParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BLOGParser$result;

      /* select the action based on the action number */
      switch (CUP$BLOGParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		RESULT = start_val;
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$BLOGParser$parser.done_parsing();
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // query ::= expression 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new Query(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(18/*query*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // query_stmt ::= QUERY query SEMI 
            {
              Stmt RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt q = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = q; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(15/*query_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // value_evidence ::= expression EQ expression 
            {
              Stmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ValueEvidence(e1left, e1, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(17/*value_evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // evidence ::= value_evidence 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(16/*evidence*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // evidence_stmt ::= OBS evidence SEMI 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(14/*evidence_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // implicit_set ::= LBRACE type ID RBRACE 
            {
              SetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(tyleft, ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // implicit_set ::= LBRACE type ID COLON expression RBRACE 
            {
              SetExpr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ImplicitSetExpr(tyleft, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(32/*implicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // explicit_set ::= LBRACE opt_expression_list RBRACE 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ExplicitSetExpr(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(31/*explicit_set*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // set_expr ::= implicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // set_expr ::= explicit_set 
            {
              SetExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(30/*set_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // number_expr ::= NUMSIGN error 
            {
              Expr RESULT = null;
		 error("expecting number expresssion here. # should be followed by a type or a set"); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // number_expr ::= NUMSIGN type 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(tyleft, new ImplicitSetExpr(tyleft, ty, null, null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // number_expr ::= NUMSIGN set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NumberExpr(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(27/*number_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression_pair_list ::= expression RIGHTARROW expression 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression_pair_list ::= expression RIGHTARROW expression COMMA expression_pair_list 
            {
              ExprTupleList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprTupleList e3 = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprTupleList(e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(36/*expression_pair_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // map_construct_expression ::= LBRACE expression_pair_list RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprTupleList e = (ExprTupleList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapInitExpr(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(26/*map_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // semi_colon_separated_expression_list ::= expression_list SEMI expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e2 = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(eleft, e), new ExprList(new ListInitExpr(e2left, e2), null)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(33/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // semi_colon_separated_expression_list ::= expression_list SEMI semi_colon_separated_expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(new ListInitExpr(eleft, e), elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(33/*semi_colon_separated_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // list_construct_expression ::= LBRACKET semi_colon_separated_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(25/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list_construct_expression ::= LBRACKET opt_expression_list RBRACKET 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ListInitExpr(eleft, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(25/*list_construct_expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_list ::= expression 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression_list ::= expression COMMA expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList elst = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ExprList(e, elst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(35/*expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_expression_list ::= 
            {
              ExprList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(34/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opt_expression_list ::= expression_list 
            {
              ExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(34/*opt_expression_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_call ::= ID 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FuncCallExpr(idleft, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*function_call*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_call ::= ID LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FuncCallExpr(idleft, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(24/*function_call*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // quantified_formula ::= EXISTS type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(tyleft, 
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // quantified_formula ::= FORALL type ID expression 
            {
              Expr RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new QuantifiedFormulaExpr(tyleft, 
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(23/*quantified_formula*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unary_operation_expr ::= NOT expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(eleft, null, OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_operation_expr ::= MINUS expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(eleft, new IntExpr(eleft, 0), OpExpr.NOT, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(22/*unary_operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operation_expr ::= unary_operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operation_expr ::= expression LBRACKET expression RBRACKET 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.SUB, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operation_expr ::= expression OR expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.OR, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operation_expr ::= expression AND expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.AND, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operation_expr ::= expression NEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.NEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operation_expr ::= expression EQEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.EQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operation_expr ::= expression GEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.GEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operation_expr ::= expression LEQ expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.LEQ, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operation_expr ::= expression GT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.GT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operation_expr ::= expression LT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.LT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operation_expr ::= expression MOD expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.MOD, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operation_expr ::= expression DIV expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.DIV, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operation_expr ::= expression MULT expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.MULT, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operation_expr ::= expression MINUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.MINUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operation_expr ::= expression PLUS expression 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OpExpr(e1left, e1, OpExpr.PLUS, e2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(21/*operation_expr*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= NULL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NullExpr(eleft); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= BOOLEAN_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Boolean e = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new BooleanExpr(eleft, e.booleanValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literal ::= TIME_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new TimeExpr(eleft, e.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= DOUBLE_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new DoubleExpr(eleft, e.doubleValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= INT_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Number e = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IntExpr(eleft, e.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= CHAR_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.Character e = (java.lang.Character)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(eleft, e.toString().intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= STRING_LITERAL 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String e = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StringExpr(eleft, e.intern()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(20/*literal*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= number_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= set_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SetExpr e = (SetExpr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= quantified_formula 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= map_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= list_construct_expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= function_call 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= literal 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= operation_expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(19/*expression*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter_decl ::= PARAM type ID COLON expression SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(tyleft, ty, sym(id), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter_decl ::= PARAM type ID SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new ParameterDec(tyleft, ty, sym(id), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(13/*parameter_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elseif_list ::= 
            {
              Expr RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(28/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elseif_list ::= ELSE dependency_statement_body 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(28/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dependency_statement_body ::= error 
            {
              Expr RESULT = null;
		 error("invalid body of random function or number statement"); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dependency_statement_body ::= LBRACE dependency_statement_body RBRACE 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dependency_statement_body ::= IF expression THEN dependency_statement_body elseif_list 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new IfExpr(aleft, e1, e2, e3); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dependency_statement_body ::= DISTRIB class_name LPAREN opt_expression_list RPAREN 
            {
              Expr RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistributionExpr(nameleft, sym(name), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dependency_statement_body ::= EQ expression 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(29/*dependency_statement_body*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // class_name ::= ID DOT class_name 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id + "." + n; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*class_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // class_name ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = id; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(50/*class_name*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // distribution_decl ::= DISTRIBUTION ID EQ class_name LPAREN opt_expression_list RPAREN SEMI 
            {
              Stmt RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new DistributionDec(idleft, sym(id), 
      new ClassName(nameleft, sym(name)), e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(12/*distribution_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // id_or_subid ::= ID LBRACKET INT_LITERAL RBRACKET 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.Number s = (java.lang.Number)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new SymbolArray(idleft, sym(id), s.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // id_or_subid ::= ID 
            {
              SymbolArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArray(idleft, sym(id)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(48/*id_or_subid*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // id_or_subid_list ::= id_or_subid COMMA id_or_subid_list 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArrayList n = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(eleft, e, n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // id_or_subid_list ::= id_or_subid 
            {
              SymbolArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		SymbolArray e = (SymbolArray)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new SymbolArrayList(eleft, e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(49/*id_or_subid_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // distinct_decl ::= DISTINCT name_type id_or_subid_list SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		SymbolArrayList e = (SymbolArrayList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new DistinctSymbolDec(tyleft, ty, e); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(11/*distinct_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // origin_func_decl ::= ORIGIN type ID LPAREN type RPAREN SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int arg_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int arg_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty arg_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		 RESULT = new OriginFuncDec(fnameleft, sym(fname), 
      new FieldList(arg_type.pos, null, arg_type, null), ret_type); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(10/*origin_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // origin_var_list ::= ID EQ ID 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(funcleft, sym(func), sym(var), null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // origin_var_list ::= ID EQ ID COMMA origin_var_list 
            {
              OriginFieldList RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String var = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		OriginFieldList n = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new OriginFieldList(funcleft, sym(func), sym(var), n); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(47/*origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_parenthesized_origin_var_list ::= 
            {
              OriginFieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_parenthesized_origin_var_list ::= LPAREN origin_var_list RPAREN 
            {
              OriginFieldList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		OriginFieldList e = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(46/*opt_parenthesized_origin_var_list*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // number_stmt ::= NUMSIGN name_type opt_parenthesized_origin_var_list dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		OriginFieldList otl = (OriginFieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new NumberDec(tyleft, ty, otl, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(9/*number_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rand_func_decl ::= RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr body = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new RandomFuncDec(fnameleft, sym(fname), otl, ret_type, body); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(8/*rand_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // fixed_func_decl ::= FIXED type ID opt_parenthesized_type_var_lst EQ expression SEMI 
            {
              Stmt RESULT = null;
		int ret_typeleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left;
		int ret_typeright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).right;
		Ty ret_type = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).value;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).right;
		java.lang.String fname = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-4)).value;
		int otlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int otlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		FieldList otl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new FixedFuncDec(fnameleft, sym(fname), otl, ret_type, ex); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(7/*fixed_func_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_var_lst ::= type ID 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(tyleft, sym(id), ty, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_var_lst ::= type ID COMMA type_var_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(tyleft, sym(id), ty, tl); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(45/*type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opt_parenthesized_type_var_lst ::= LPAREN type_var_lst RPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(44/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opt_parenthesized_type_var_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(44/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opt_parenthesized_type_var_lst ::= 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(44/*opt_parenthesized_type_var_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_lst ::= type 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(tyleft, null, ty, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*type_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_lst ::= type COMMA type_lst 
            {
              FieldList RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new FieldList(tyleft, null, ty, tl); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(43/*type_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opt_parenthesized_type_lst ::= LPAREN type_lst RPAREN 
            {
              FieldList RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		FieldList tl = (FieldList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = tl; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(42/*opt_parenthesized_type_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opt_parenthesized_type_lst ::= LPAREN RPAREN 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(42/*opt_parenthesized_type_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opt_parenthesized_type_lst ::= 
            {
              FieldList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(42/*opt_parenthesized_type_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // map_type ::= MAP LT type COMMA type GT 
            {
              Ty RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).right;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Ty t2 = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new MapTy(t1left, t1, t2); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(39/*map_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dims ::= LBRACKET RBRACKET dims 
            {
              Integer RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new Integer(d.intValue() + 1); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(41/*dims*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // dims ::= LBRACKET RBRACKET 
            {
              Integer RESULT = null;
		 RESULT = new Integer(1); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(41/*dims*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // array_type ::= ID dims 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new ArrayTy(typenameleft, 
        new NameTy(typenameleft, sym(typename)), d.intValue()); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(38/*array_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // name_type ::= ID 
            {
              Ty RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new NameTy(typenameleft, sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(40/*name_type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= map_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= array_type 
            {
              Ty RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty at = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = at; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= name_type 
            {
              Ty RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Ty e = (Ty)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(37/*type*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_decl ::= TYPE ID SEMI 
            {
              Stmt RESULT = null;
		int typenameleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int typenameright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		java.lang.String typename = (java.lang.String)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		 RESULT = new TypeDec(typenameleft, sym(typename)); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(6/*type_decl*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration_stmt ::= distribution_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration_stmt ::= parameter_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_stmt ::= distinct_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_stmt ::= number_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration_stmt ::= origin_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration_stmt ::= rand_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration_stmt ::= fixed_func_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration_stmt ::= type_decl 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(5/*declaration_stmt*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= error SEMI 
            {
              Stmt RESULT = null;
		 error("unmatched statement");
              RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= query_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= evidence_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declaration_stmt 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(4/*statement*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_lst ::= error 
            {
              StmtList RESULT = null;
		 System.err.println( 
			"Possible cause: forgotten semicolon" ); 
			RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_lst ::= statement 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StmtList(e, null); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_lst ::= statement statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).right;
		Stmt e = (Stmt)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).value;
		int slstleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList slst = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = new StmtList(e, slst); 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(3/*statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // opt_statement_lst ::= statement_lst 
            {
              StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 RESULT = e; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // opt_statement_lst ::= 
            {
              StmtList RESULT = null;
		 RESULT = null; 
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(2/*opt_statement_lst*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= opt_statement_lst 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right;
		StmtList e = (StmtList)((java_cup.runtime.Symbol) CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).value;
		 parser.parseResult = e;  
              CUP$BLOGParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$BLOGParser$stack.elementAt(CUP$BLOGParser$top-0)).right, RESULT);
            }
          return CUP$BLOGParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

