/* The following code was generated by JFlex 1.4.3 on 9/29/13 5:02 PM */

/**
 * Copyright (c) 2005, 2012 Regents of the University of California
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.  
 *
 * * Neither the name of the University of California, Berkeley nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior 
 *   written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * Using JFlex-1.4.3
 * @author leili
 */ 
package blog.parse;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/29/13 5:02 PM from the specification file
 * <tt>src/blog/parse/BLOGLexer.flex</tt>
 */
public class BLOGLexer implements ScannerWithLocInfo, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHAR_LIT = 4;
  public static final int YYINITIAL = 0;
  public static final int STR_LIT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\104\1\0\1\10\1\7\22\0\1\10\1\63\1\16"+
    "\1\101\1\0\1\56\1\64\1\17\1\67\1\70\1\15\1\55\1\77"+
    "\1\4\1\5\1\14\4\12\4\11\2\2\1\76\1\75\1\60\1\62"+
    "\1\61\1\0\1\66\1\24\1\13\1\37\1\26\1\6\1\31\1\34"+
    "\1\40\1\32\2\1\1\41\1\30\1\25\1\27\1\22\1\42\1\23"+
    "\1\36\1\20\1\35\1\43\1\1\1\33\1\21\1\1\1\73\1\102"+
    "\1\74\1\57\1\3\1\0\1\51\1\103\1\37\1\26\1\47\1\50"+
    "\1\34\1\40\1\32\2\1\1\52\1\30\1\54\1\27\1\22\1\42"+
    "\1\45\1\53\1\44\1\46\1\43\1\1\1\33\1\21\1\1\1\72"+
    "\1\65\1\71\1\100\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\17\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\40\1\43\1\44"+
    "\2\0\1\45\2\2\1\46\1\0\15\2\1\47\7\2"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\2\56\1\57"+
    "\1\60\1\61\1\62\1\55\1\63\1\64\1\65\1\66"+
    "\1\44\1\0\2\2\1\46\1\0\10\2\1\67\1\2"+
    "\1\70\1\2\1\71\10\2\1\56\1\0\1\2\1\72"+
    "\1\73\1\74\16\2\1\75\1\2\1\76\1\2\1\77"+
    "\1\0\2\2\1\100\13\2\1\101\2\2\1\102\1\103"+
    "\1\0\1\104\1\105\1\2\1\106\1\2\1\107\4\2"+
    "\1\110\1\111\1\112\2\2\1\113\12\2\1\114\1\2"+
    "\1\115\3\2\1\116\5\2\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\317\0\u026d\0\317\0\317\0\317\0\u02b2\0\u02f7"+
    "\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f"+
    "\0\u0564\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\317\0\317"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\u0816\0\317\0\u085b"+
    "\0\u08a0\0\u01e3\0\317\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0114\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\u0f5d\0\u0fa2\0\317\0\317\0\317\0\317"+
    "\0\u0fe7\0\317\0\317\0\317\0\317\0\u102c\0\u102c\0\u1071"+
    "\0\u10b6\0\317\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u0114\0\u13f2\0\u1437"+
    "\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f"+
    "\0\317\0\u16a4\0\u16e9\0\u172e\0\u0114\0\u0114\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u0114\0\u1b39\0\u0114\0\u1b7e"+
    "\0\u0114\0\u1bc3\0\u1c08\0\u1c4d\0\u0114\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44"+
    "\0\u0114\0\u1f89\0\u1fce\0\u0114\0\u0114\0\u2013\0\u0114\0\u0114"+
    "\0\u2058\0\u0114\0\u209d\0\u0114\0\u20e2\0\u2127\0\u216c\0\u21b1"+
    "\0\u0114\0\u0114\0\u0114\0\u21f6\0\u223b\0\317\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u0114\0\u2532\0\u0114\0\u2577\0\u25bc\0\u2601\0\u0114\0\u2646"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u0114\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\2\12"+
    "\2\6\1\5\1\13\1\14\1\15\1\16\1\17\1\5"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\5\1\30\4\5\1\31\1\32\1\5\1\33"+
    "\1\21\1\5\1\11\1\34\1\5\1\31\1\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\4\1\5\1\12"+
    "\7\63\1\64\6\63\1\65\63\63\1\66\1\63\1\64"+
    "\7\63\1\64\7\63\1\67\62\63\1\66\1\63\1\64"+
    "\106\0\3\5\2\0\1\5\2\0\3\5\4\0\35\5"+
    "\26\0\1\5\3\0\1\6\2\0\1\70\1\71\2\0"+
    "\2\6\34\0\1\71\37\0\1\6\2\0\1\72\3\0"+
    "\2\6\46\0\1\73\25\0\1\70\6\0\2\70\73\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\13\5\1\74"+
    "\5\5\1\75\10\5\1\75\2\5\26\0\1\5\15\0"+
    "\1\76\1\77\70\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\1\5\1\100\16\5\1\101\14\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\4\5"+
    "\1\102\24\5\1\102\3\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\4\5\1\103\24\5"+
    "\1\103\3\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\7\5\1\104\25\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\105\2\0\3\5\4\0\12\5"+
    "\1\106\14\5\1\105\5\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\2\5\1\107\4\0\3\5\1\110"+
    "\21\5\1\110\7\5\26\0\1\107\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\4\5\1\111\24\5\1\111"+
    "\3\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\4\5\1\112\2\5\1\113\2\5\1\114"+
    "\16\5\1\112\3\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\11\5\1\115\16\5\1\115"+
    "\4\5\26\0\1\5\2\0\3\5\2\0\1\116\2\0"+
    "\3\5\4\0\15\5\1\117\10\5\1\117\1\116\5\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\12\5\1\120\22\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\15\5\1\121\10\5"+
    "\1\121\6\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\1\5\1\100\16\5\1\101\4\5"+
    "\1\122\7\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\4\5\1\112\2\5\1\113\2\5"+
    "\1\114\16\5\1\123\3\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\7\5\1\104\16\5"+
    "\1\124\6\5\26\0\1\5\3\0\1\6\2\0\1\72"+
    "\3\0\2\6\154\0\1\125\104\0\1\126\103\0\1\127"+
    "\1\130\104\0\1\131\22\0\11\132\1\133\1\134\3\132"+
    "\1\135\1\136\24\132\1\137\1\140\1\141\1\132\1\142"+
    "\3\132\1\143\25\132\1\144\1\145\3\0\1\70\3\0"+
    "\1\71\2\0\2\70\34\0\1\71\37\0\1\146\1\0"+
    "\1\147\4\0\2\146\42\0\1\147\30\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\12\5\1\150\22\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\16\5\1\151\14\5\1\151\1\5\26\0\1\5\1\0"+
    "\7\76\1\152\74\76\1\152\15\77\1\153\67\77\1\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\2\5\1\154"+
    "\32\5\26\0\1\5\2\0\3\5\2\0\1\155\2\0"+
    "\3\5\4\0\27\5\1\155\5\5\26\0\1\5\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\3\5\1\156"+
    "\21\5\1\156\7\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\5\5\1\157\26\5\1\157"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\5\5\1\160\26\5\1\160\26\0\1\5\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\17\5\1\161"+
    "\15\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\1\162\15\5\1\163\5\5\1\162\6\5"+
    "\1\163\1\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\16\5\1\164\14\5\1\164\1\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\12\5\1\165\22\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\2\5\1\166\32\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\17\5\1\167\15\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\3\5\1\170\21\5"+
    "\1\170\7\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\13\5\1\171\21\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\5\5"+
    "\1\172\26\5\1\172\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\4\5\1\173\24\5\1\173"+
    "\3\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\16\5\1\174\14\5\1\174\1\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\175\2\0\3\5\4\0"+
    "\27\5\1\175\5\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\26\5\1\176\6\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\17\5\1\167\12\5\1\177\2\5\26\0\1\5\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\32\5\1\200"+
    "\2\5\26\0\1\5\12\0\2\201\103\0\2\133\74\0"+
    "\1\202\3\0\1\202\2\0\3\202\10\0\1\202\1\0"+
    "\1\202\2\0\1\202\5\0\1\202\7\0\3\202\31\0"+
    "\1\202\3\0\1\146\6\0\2\146\73\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\16\5\1\203\14\5\1\203"+
    "\1\5\26\0\1\5\2\0\3\5\2\0\1\204\2\0"+
    "\3\5\4\0\27\5\1\204\5\5\26\0\1\5\1\0"+
    "\14\77\1\152\1\153\67\77\1\0\3\5\2\0\1\205"+
    "\2\0\3\5\4\0\27\5\1\205\5\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\5\5"+
    "\1\206\26\5\1\206\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\4\5\1\207\4\5\1\210"+
    "\16\5\1\210\1\207\3\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\6\5\1\211\26\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\3\5\1\212\21\5\1\212\7\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\12\5"+
    "\1\213\22\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\3\5\1\214\21\5\1\214\7\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\1\215\23\5\1\215\10\5\26\0\1\5\2\0"+
    "\3\5\2\0\1\216\2\0\3\5\4\0\27\5\1\216"+
    "\5\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\14\5\1\217\20\5\26\0\1\5\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\1\220\23\5"+
    "\1\220\10\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\4\5\1\221\24\5\1\221\3\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\222\2\0\3\5"+
    "\4\0\27\5\1\222\5\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\223\2\0\3\5\4\0\27\5\1\223\5\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\3\5\1\224\21\5\1\224\7\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\1\225"+
    "\23\5\1\225\10\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\3\5\1\226\21\5\1\226"+
    "\7\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\27\5\1\227\5\5\26\0\1\5\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\33\5\1\230"+
    "\1\5\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\32\5\1\231\2\5\26\0\1\5\3\0"+
    "\1\232\3\0\1\232\2\0\3\232\10\0\1\232\1\0"+
    "\1\232\2\0\1\232\5\0\1\232\7\0\3\232\31\0"+
    "\1\232\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\1\233\23\5\1\233\10\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\12\5\1\234\22\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\10\5\1\235\24\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\4\5\1\236\24\5"+
    "\1\236\3\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\7\5\1\237\25\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\4\5"+
    "\1\240\24\5\1\240\3\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\6\5\1\241\7\5"+
    "\1\242\14\5\1\242\1\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\12\5\1\243\22\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\12\5\1\244\22\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\3\5\1\245\21\5"+
    "\1\245\7\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\12\5\1\246\22\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\7\5"+
    "\1\247\25\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\21\5\1\250\10\5\1\250\2\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\6\5\1\251\26\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\3\5\1\252\21\5"+
    "\1\252\7\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\4\5\1\253\24\5\1\253\3\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\1\5\1\254\33\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\27\5\1\255\5\5"+
    "\26\0\1\5\3\0\1\256\3\0\1\256\2\0\3\256"+
    "\10\0\1\256\1\0\1\256\2\0\1\256\5\0\1\256"+
    "\7\0\3\256\31\0\1\256\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\16\5\1\257\14\5\1\257\1\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\11\5\1\260\16\5\1\260\4\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\17\5"+
    "\1\261\15\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\10\5\1\262\24\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\5\5"+
    "\1\263\26\5\1\263\26\0\1\5\2\0\3\5\2\0"+
    "\1\264\2\0\3\5\4\0\27\5\1\264\5\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\12\5\1\265\22\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\2\5\1\266\4\0\35\5\26\0\1\266"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\5\5"+
    "\1\267\26\5\1\267\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\23\5\1\270\11\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\5\5\1\271\26\5\1\271\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\3\5\1\272\21\5"+
    "\1\272\7\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\21\5\1\273\10\5\1\273\2\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\4\5\1\274\24\5\1\274\3\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\5\5"+
    "\1\275\26\5\1\275\26\0\1\5\3\0\1\276\3\0"+
    "\1\276\2\0\3\276\10\0\1\276\1\0\1\276\2\0"+
    "\1\276\5\0\1\276\7\0\3\276\31\0\1\276\2\0"+
    "\3\5\2\0\1\5\2\0\3\5\4\0\1\277\23\5"+
    "\1\277\10\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\6\5\1\300\26\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\7\5"+
    "\1\301\25\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\15\5\1\302\10\5\1\302\6\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\17\5\1\303\15\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\4\5\1\304\24\5"+
    "\1\304\3\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\1\305\23\5\1\305\10\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\1\306\23\5\1\306\10\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\7\5\1\307\25\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\7\5\1\310\25\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\5\5\1\311\26\5"+
    "\1\311\26\0\1\5\2\0\3\5\2\0\1\5\2\0"+
    "\3\5\4\0\1\312\23\5\1\312\10\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\1\313"+
    "\23\5\1\313\10\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\2\5\1\314\4\0\35\5\26\0\1\314"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\12\5"+
    "\1\315\22\5\26\0\1\5\2\0\3\5\2\0\1\316"+
    "\2\0\3\5\4\0\27\5\1\316\5\5\26\0\1\5"+
    "\2\0\3\5\2\0\1\5\2\0\3\5\4\0\3\5"+
    "\1\317\21\5\1\317\7\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\10\5\1\251\24\5"+
    "\26\0\1\5\2\0\3\5\2\0\1\5\2\0\3\5"+
    "\4\0\12\5\1\320\22\5\26\0\1\5\2\0\3\5"+
    "\2\0\1\5\2\0\3\5\4\0\21\5\1\321\10\5"+
    "\1\321\2\5\26\0\1\5\2\0\3\5\2\0\1\5"+
    "\2\0\3\5\4\0\5\5\1\322\26\5\1\322\26\0"+
    "\1\5\2\0\3\5\2\0\1\323\2\0\3\5\4\0"+
    "\27\5\1\323\5\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\7\5\1\324\25\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\325\2\0\3\5\4\0"+
    "\27\5\1\325\5\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\14\5\1\271\20\5\26\0"+
    "\1\5\2\0\3\5\2\0\1\5\2\0\3\5\4\0"+
    "\6\5\1\313\26\5\26\0\1\5\2\0\3\5\2\0"+
    "\1\5\2\0\3\5\4\0\5\5\1\326\26\5\1\326"+
    "\26\0\1\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10143];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\1\1\3\11\20\1\2\11"+
    "\4\1\21\11\1\1\1\11\1\1\2\0\1\11\3\1"+
    "\1\0\25\1\6\11\2\1\4\11\1\1\4\11\1\1"+
    "\1\0\2\1\1\11\1\0\25\1\1\11\1\0\27\1"+
    "\1\0\23\1\1\0\17\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // For assembling string and character constants
  StringBuffer string_buf = new StringBuffer();

  // For line numbers
  public int getCurLineNum() {
    return yyline;
  }
  
  public int getCurColNum() {
    return yycolumn;
  }

  private String filename;

  public void setFilename(String fname) {
    filename = fname;
  }

  public String getCurFilename() {
    return filename;
  }
  
  private void err(int line, int col, String s) {
    errorMsg.error(line, col, s);
  }

  private void err(String s) {
    err(getCurLineNum(), getCurColNum(), s);
  }  
  
  private Symbol symbol(int type) {
    return symbol(type, null);
  }

  private Symbol symbol(int type, Object value) {
    return new BLOGSymbol(type, getCurLineNum(), getCurColNum(), yychar, yychar+yylength(), value);

  }
  
  blog.msg.ErrorMsg errorMsg; //for error
  
  public BLOGLexer(java.io.Reader r, blog.msg.ErrorMsg e) {
    this(r);
    errorMsg=e;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BLOGLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BLOGLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 67: 
          { return symbol(BLOGTokenConstants.BOOLEAN_LITERAL, new Boolean(false));
          }
        case 81: break;
        case 64: 
          { return symbol(BLOGTokenConstants.PARAM);
          }
        case 82: break;
        case 7: 
          { return symbol(BLOGTokenConstants.DIV);
          }
        case 83: break;
        case 2: 
          { return symbol(BLOGTokenConstants.ID, yytext());
          }
        case 84: break;
        case 52: 
          { string_buf.append('\n');
          }
        case 85: break;
        case 47: 
          { string_buf.append('\"');
          }
        case 86: break;
        case 12: 
          { return symbol(BLOGTokenConstants.MOD);
          }
        case 87: break;
        case 33: 
          { return symbol(BLOGTokenConstants.ERROR, 
                         "Line terminator in string or character literal.");
          }
        case 88: break;
        case 8: 
          { return symbol(BLOGTokenConstants.MULT);
          }
        case 89: break;
        case 39: 
          { return symbol(BLOGTokenConstants.IF);
          }
        case 90: break;
        case 29: 
          { return symbol(BLOGTokenConstants.COMMA);
          }
        case 91: break;
        case 36: 
          { return 
		 symbol(BLOGTokenConstants.DOUBLE_LITERAL, new Double(yytext()));
          }
        case 92: break;
        case 22: 
          { return symbol(BLOGTokenConstants.RPAREN);
          }
        case 93: break;
        case 50: 
          { string_buf.append('\r');
          }
        case 94: break;
        case 78: 
          { return symbol(BLOGTokenConstants.PARFACTOR);
          }
        case 95: break;
        case 58: 
          { return symbol(BLOGTokenConstants.ELSE);
          }
        case 96: break;
        case 48: 
          { string_buf.append('\'');
          }
        case 97: break;
        case 44: 
          { return symbol(BLOGTokenConstants.NEQ);
          }
        case 98: break;
        case 49: 
          { string_buf.append('\t');
          }
        case 99: break;
        case 13: 
          { return symbol(BLOGTokenConstants.POWER);
          }
        case 100: break;
        case 21: 
          { return symbol(BLOGTokenConstants.LPAREN);
          }
        case 101: break;
        case 5: 
          { return symbol(BLOGTokenConstants.DOT);
          }
        case 102: break;
        case 77: 
          { return symbol(BLOGTokenConstants.DISTINCT);
          }
        case 103: break;
        case 75: 
          { int code = Integer.parseInt(yytext().substring(2), 16);
       string_buf.append((char) code);
          }
        case 104: break;
        case 18: 
          { return symbol(BLOGTokenConstants.AND);
          }
        case 105: break;
        case 73: 
          { return symbol(BLOGTokenConstants.FACTOR);
          }
        case 106: break;
        case 65: 
          { return symbol(BLOGTokenConstants.FIXED);
          }
        case 107: break;
        case 56: 
          { return symbol(BLOGTokenConstants.MAP);
          }
        case 108: break;
        case 42: 
          { return symbol(BLOGTokenConstants.DOUBLERIGHTARROW);
          }
        case 109: break;
        case 6: 
          { /* Do nothing */
          }
        case 110: break;
        case 3: 
          { return symbol(BLOGTokenConstants.INT_LITERAL, new Integer(yytext()));
          }
        case 111: break;
        case 17: 
          { return symbol(BLOGTokenConstants.NOT);
          }
        case 112: break;
        case 61: 
          { return symbol(BLOGTokenConstants.LIST);
          }
        case 113: break;
        case 69: 
          { return symbol(BLOGTokenConstants.ELSEIF);
          }
        case 114: break;
        case 27: 
          { return symbol(BLOGTokenConstants.SEMI);
          }
        case 115: break;
        case 66: 
          { return symbol(BLOGTokenConstants.QUERY);
          }
        case 116: break;
        case 20: 
          { return symbol(BLOGTokenConstants.AT);
          }
        case 117: break;
        case 1: 
          { return symbol(BLOGTokenConstants.ERROR, 
                                          yytext());
          }
        case 118: break;
        case 9: 
          { yybegin (STR_LIT);
          }
        case 119: break;
        case 43: 
          { return symbol(BLOGTokenConstants.EQEQ);
          }
        case 120: break;
        case 63: 
          { return symbol(BLOGTokenConstants.NULL);
          }
        case 121: break;
        case 11: 
          { return symbol(BLOGTokenConstants.PLUS);
          }
        case 122: break;
        case 41: 
          { return symbol(BLOGTokenConstants.GEQ);
          }
        case 123: break;
        case 30: 
          { return symbol(BLOGTokenConstants.DISTRIB);
          }
        case 124: break;
        case 62: 
          { return symbol(BLOGTokenConstants.BOOLEAN_LITERAL, new Boolean(true));
          }
        case 125: break;
        case 80: 
          { return symbol(BLOGTokenConstants.DISTRIBUTION);
          }
        case 126: break;
        case 53: 
          { string_buf.append('\\');
          }
        case 127: break;
        case 40: 
          { return symbol(BLOGTokenConstants.LEQ);
          }
        case 128: break;
        case 35: 
          { /* closing single-quote not matched by \' rule below */
       Symbol s;
       if (string_buf.length() == 1) {
	   s = symbol(BLOGTokenConstants.CHAR_LITERAL, 
                          new Character(string_buf.charAt(0)));
       } else {
	   s = symbol(BLOGTokenConstants.ERROR, 
                          "Character literal must contain exactly one "
                          + "character");
       } 
       string_buf = new StringBuffer(); /* re-init buffer */
       yybegin(YYINITIAL);
       return s;
          }
        case 129: break;
        case 15: 
          { return symbol(BLOGTokenConstants.GT);
          }
        case 130: break;
        case 79: 
          { return symbol(BLOGTokenConstants.OBSERVABLE);
          }
        case 131: break;
        case 60: 
          { return symbol(BLOGTokenConstants.THEN);
          }
        case 132: break;
        case 16: 
          { return symbol(BLOGTokenConstants.EQ);
          }
        case 133: break;
        case 23: 
          { return symbol(BLOGTokenConstants.RBRACE);
          }
        case 134: break;
        case 46: 
          { int code = Integer.parseInt(yytext().substring(1), 8);
         string_buf.append((char) code);
          }
        case 135: break;
        case 54: 
          { string_buf.append('\b');
          }
        case 136: break;
        case 14: 
          { return symbol(BLOGTokenConstants.LT);
          }
        case 137: break;
        case 72: 
          { return symbol(BLOGTokenConstants.ORIGIN);
          }
        case 138: break;
        case 10: 
          { yybegin (CHAR_LIT);
          }
        case 139: break;
        case 70: 
          { return symbol(BLOGTokenConstants.RANDOM);
          }
        case 140: break;
        case 34: 
          { /* closing double-quote not matched by \" rule below */
       Symbol s =   symbol(BLOGTokenConstants.STRING_LITERAL, 
			       string_buf.toString());
       string_buf = new StringBuffer(); /* reinitialize the buffer */
       yybegin(YYINITIAL);
       return s;
          }
        case 141: break;
        case 32: 
          { /* Char in quotes, not matched by any rule above */
       string_buf.append(yytext());
          }
        case 142: break;
        case 74: 
          { return symbol(BLOGTokenConstants.FORALL);
          }
        case 143: break;
        case 51: 
          { string_buf.append('\f');
          }
        case 144: break;
        case 38: 
          { /* ignore */
          }
        case 145: break;
        case 55: 
          { return symbol(BLOGTokenConstants.OBS);
          }
        case 146: break;
        case 24: 
          { return symbol(BLOGTokenConstants.LBRACE);
          }
        case 147: break;
        case 25: 
          { return symbol(BLOGTokenConstants.LBRACKET);
          }
        case 148: break;
        case 76: 
          { return symbol(BLOGTokenConstants.DECISION);
          }
        case 149: break;
        case 19: 
          { return symbol(BLOGTokenConstants.OR);
          }
        case 150: break;
        case 4: 
          { return symbol(BLOGTokenConstants.MINUS);
          }
        case 151: break;
        case 68: 
          { return symbol(BLOGTokenConstants.EXISTS);
          }
        case 152: break;
        case 71: 
          { return symbol(BLOGTokenConstants.OBSDECISION);
          }
        case 153: break;
        case 57: 
          { return symbol(BLOGTokenConstants.FOR);
          }
        case 154: break;
        case 45: 
          { return symbol(BLOGTokenConstants.ERROR, 
                         "Unrecognized escape character: \'" 
                         + yytext() + "\'");
          }
        case 155: break;
        case 28: 
          { return symbol(BLOGTokenConstants.COLON);
          }
        case 156: break;
        case 26: 
          { return symbol(BLOGTokenConstants.RBRACKET);
          }
        case 157: break;
        case 31: 
          { return symbol(BLOGTokenConstants.NUMSIGN);
          }
        case 158: break;
        case 59: 
          { return symbol(BLOGTokenConstants.TYPE);
          }
        case 159: break;
        case 37: 
          { return symbol(BLOGTokenConstants.RIGHTARROW);
          }
        case 160: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   switch(yystate()) {
    case YYINITIAL:
    /* nothing special to do in the initial state */
      break;
    case STR_LIT:
    case CHAR_LIT:
      return symbol(BLOGTokenConstants.ERROR, 
                        "File ended before string or character literal "
                        + "was terminated.");

  }
  /* Reinitialize everything before signaling EOF */
  string_buf = new StringBuffer();
  yybegin(YYINITIAL);
  return symbol(BLOGTokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
