/* The following code was generated by JFlex 1.4.3 on 4/15/12 2:27 PM */

/*
 * Copyright (c) 2005, Regents of the University of California
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.  
 *
 * * Neither the name of the University of California, Berkeley nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior 
 *   written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * Using JFlex-1.4.3
 */ 
package blog.parse;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/15/12 2:27 PM from the specification file
 * <tt>src/blog/parse/BLOGLexer.lex</tt>
 */
public class BLOGLexer implements ScannerWithLocInfo, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHAR_LIT = 8;
  public static final int LINE_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int STR_LIT = 6;
  public static final int PAREN_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\4\1\0\1\6\1\5\22\0\1\6\1\56\1\14"+
    "\1\74\2\0\1\57\1\15\1\66\1\67\1\13\1\30\1\62\1\25"+
    "\1\26\1\12\4\10\4\7\2\2\1\65\1\64\1\75\1\55\1\63"+
    "\1\0\1\31\1\36\1\11\1\51\1\40\1\27\1\43\1\46\1\52"+
    "\1\44\2\1\1\53\1\42\1\37\1\41\1\34\1\54\1\35\1\50"+
    "\1\32\1\47\2\1\1\45\1\33\1\1\1\72\1\16\1\73\1\0"+
    "\1\3\1\0\1\36\1\17\1\51\1\40\1\27\1\22\1\46\1\52"+
    "\1\44\2\1\1\53\1\42\1\21\1\41\1\34\1\54\1\23\1\50"+
    "\1\20\1\24\2\1\1\45\1\33\1\1\1\71\1\60\1\70\1\61"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\4\2\1\7\1\10\1\2\1\11\1\1\7\2\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\2\34\3\35\1\36\2\37\1\40\1\36\1\41"+
    "\3\0\1\42\1\43\10\2\1\0\1\44\1\45\2\2"+
    "\1\46\4\2\1\47\3\2\1\50\1\51\1\52\1\53"+
    "\1\54\2\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\54\1\66\1\45\1\0\6\2\1\67"+
    "\6\2\1\70\4\2\1\55\1\0\1\71\1\72\1\73"+
    "\7\2\1\74\6\2\1\0\2\2\1\75\1\2\1\76"+
    "\10\2\1\77\1\0\1\2\1\100\1\101\1\102\1\103"+
    "\1\104\2\2\1\105\2\2\1\106\7\2\1\107\2\2"+
    "\1\110\2\2\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u0136\0\u01f0\0\u0136\0\u0136\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u0136\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u064c\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0136\0\u068a\0\u0136\0\u0136\0\u06c8"+
    "\0\u0136\0\u0706\0\u0744\0\u0136\0\u0136\0\u0782\0\u0136\0\u07c0"+
    "\0\u0136\0\u07fe\0\u0364\0\u083c\0\u0136\0\u0136\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0136"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u03e0\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0174\0\u0c5a\0\u0c98\0\u0cd6\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0d14\0\u0d52\0\u0136\0\u0136\0\u0136\0\u0136\0\u0136"+
    "\0\u0136\0\u0136\0\u0136\0\u0d90\0\u0dce\0\u0e0c\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u0174\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u0136\0\u1268\0\u0174\0\u0174\0\u0174\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u0174"+
    "\0\u16c4\0\u0174\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u0174\0\u18f2\0\u1930\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u196e\0\u19ac\0\u0174\0\u19ea\0\u1a28\0\u0136"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u0174"+
    "\0\u1c18\0\u1c56\0\u0174\0\u1c94\0\u1cd2\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\3\11\2\10\1\7\1\12"+
    "\1\6\1\13\1\14\1\6\1\7\1\15\1\16\1\17"+
    "\1\20\1\7\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\7\1\27\1\20\1\7\1\16\1\30\1\31\1\7"+
    "\1\17\1\32\1\7\1\33\5\7\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\4\56"+
    "\1\57\1\60\70\56\5\61\1\62\5\61\1\63\62\61"+
    "\4\64\1\65\1\66\6\64\1\67\1\64\1\70\63\64"+
    "\1\65\1\66\7\64\1\71\1\70\57\64\77\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\23\7\23\0\1\10\4\0\2\10\15\0\1\73\1\74"+
    "\60\0\1\75\1\76\63\0\3\7\3\0\3\7\5\0"+
    "\4\7\1\77\1\7\1\0\1\72\1\7\2\0\1\7"+
    "\1\100\1\7\1\77\14\7\1\101\2\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\7\7\1\102\13\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\4\7\1\103\2\7"+
    "\1\104\2\7\1\105\10\7\22\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\7\2\0\4\7\1\106"+
    "\16\7\23\0\1\107\4\0\2\107\15\0\1\73\34\0"+
    "\1\110\14\0\1\111\4\0\2\111\66\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\7\2\0\13\7"+
    "\1\112\5\7\1\113\1\7\23\0\1\114\4\0\2\114"+
    "\66\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\1\7\1\100\16\7\1\101\2\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\4\7\1\115\16\7\22\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\7\2\0\12\7\1\116"+
    "\10\7\22\0\3\7\3\0\2\7\1\117\5\0\1\117"+
    "\3\7\1\120\1\7\1\0\1\72\1\7\2\0\3\7"+
    "\1\120\17\7\22\0\3\7\3\0\3\7\5\0\3\7"+
    "\1\121\2\7\1\0\1\72\1\7\2\0\11\7\1\121"+
    "\11\7\22\0\3\7\3\0\3\7\5\0\5\7\1\122"+
    "\1\0\1\72\1\123\2\0\15\7\1\122\5\7\22\0"+
    "\3\7\3\0\3\7\5\0\5\7\1\124\1\0\1\72"+
    "\1\7\2\0\15\7\1\124\5\7\76\0\1\125\75\0"+
    "\1\126\75\0\1\127\75\0\1\130\24\0\1\57\75\0"+
    "\1\61\103\0\1\57\67\0\1\65\71\0\4\131\1\0"+
    "\2\131\1\132\1\133\3\131\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\1\142\1\143\1\144\51\131\1\0\1\145"+
    "\7\0\1\145\5\0\6\145\2\0\1\145\2\0\23\145"+
    "\23\0\1\146\4\0\2\146\14\0\1\147\2\0\1\147"+
    "\46\0\3\7\3\0\3\7\5\0\5\7\1\150\1\0"+
    "\1\72\1\7\2\0\15\7\1\150\5\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\2\7\1\151\20\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\152\2\0\23\7\22\0\3\7"+
    "\3\0\3\7\5\0\2\7\1\153\3\7\1\0\1\72"+
    "\1\7\2\0\5\7\1\153\15\7\22\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\7\2\0\17\7"+
    "\1\154\1\7\1\155\1\7\22\0\3\7\3\0\3\7"+
    "\5\0\4\7\1\156\1\7\1\0\1\72\1\7\2\0"+
    "\3\7\1\156\17\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\13\7\1\157\7\7"+
    "\22\0\3\7\3\0\3\7\5\0\2\7\1\160\3\7"+
    "\1\0\1\72\1\7\2\0\5\7\1\160\15\7\23\0"+
    "\1\107\4\0\2\107\15\0\1\73\1\74\50\0\1\111"+
    "\4\0\2\111\16\0\1\74\47\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\7\2\0\12\7\1\161"+
    "\10\7\22\0\3\7\3\0\3\7\5\0\6\7\1\0"+
    "\1\72\1\7\2\0\16\7\1\162\4\7\22\0\3\7"+
    "\3\0\3\7\5\0\4\7\1\163\1\7\1\0\1\72"+
    "\1\7\2\0\3\7\1\163\17\7\22\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\7\2\0\16\7"+
    "\1\164\4\7\22\0\3\7\3\0\3\7\5\0\6\7"+
    "\1\0\1\72\1\7\2\0\16\7\1\165\4\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\12\7\1\166\10\7\22\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\7\2\0\4\7\1\167"+
    "\16\7\22\0\3\7\3\0\3\7\5\0\2\7\1\170"+
    "\3\7\1\0\1\72\1\7\2\0\5\7\1\170\15\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\171\2\0\23\7\30\0\2\172\74\0\2\132\67\0"+
    "\1\173\4\0\3\173\5\0\1\173\2\0\1\173\4\0"+
    "\1\173\6\0\1\173\1\0\1\173\2\0\1\173\5\0"+
    "\1\173\25\0\3\145\3\0\3\145\5\0\6\145\1\0"+
    "\1\72\1\145\2\0\23\145\23\0\1\146\4\0\2\146"+
    "\66\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\174\2\0\23\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\175\2\0\23\7\22\0\3\7"+
    "\3\0\3\7\5\0\2\7\1\176\3\7\1\0\1\72"+
    "\1\7\2\0\5\7\1\176\15\7\22\0\3\7\3\0"+
    "\3\7\5\0\4\7\1\177\1\7\1\0\1\72\1\7"+
    "\2\0\3\7\1\177\17\7\22\0\3\7\3\0\3\7"+
    "\5\0\1\7\1\200\4\7\1\0\1\72\1\7\2\0"+
    "\1\200\22\7\22\0\3\7\3\0\3\7\5\0\6\7"+
    "\1\0\1\72\1\7\2\0\16\7\1\201\4\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\4\7\1\202\16\7\22\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\203\2\0\23\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\6\7\1\204\14\7\22\0\3\7\3\0\3\7"+
    "\5\0\6\7\1\0\1\72\1\7\2\0\16\7\1\205"+
    "\4\7\22\0\3\7\3\0\3\7\5\0\6\7\1\0"+
    "\1\72\1\206\2\0\23\7\22\0\3\7\3\0\3\7"+
    "\5\0\3\7\1\207\2\7\1\0\1\72\1\7\2\0"+
    "\11\7\1\207\11\7\22\0\3\7\3\0\3\7\5\0"+
    "\1\7\1\210\4\7\1\0\1\72\1\7\2\0\1\210"+
    "\22\7\22\0\3\7\3\0\3\7\5\0\6\7\1\0"+
    "\1\72\1\7\2\0\14\7\1\211\6\7\22\0\3\7"+
    "\3\0\3\7\5\0\4\7\1\212\1\7\1\0\1\72"+
    "\1\7\2\0\3\7\1\212\17\7\22\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\213\2\0\23\7"+
    "\22\0\3\7\3\0\3\7\5\0\4\7\1\214\1\7"+
    "\1\0\1\72\1\7\2\0\3\7\1\214\17\7\23\0"+
    "\1\215\4\0\3\215\5\0\1\215\2\0\1\215\4\0"+
    "\1\215\6\0\1\215\1\0\1\215\2\0\1\215\5\0"+
    "\1\215\25\0\3\7\3\0\3\7\5\0\6\7\1\0"+
    "\1\72\1\7\2\0\4\7\1\216\16\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\7\7\1\217\13\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\220\2\0\23\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\21\7\1\221\1\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\6\7\1\222\14\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\7\7\1\223\13\7\22\0\3\7\3\0"+
    "\3\7\5\0\1\7\1\224\4\7\1\0\1\72\1\7"+
    "\2\0\1\224\22\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\12\7\1\225\10\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\4\7\1\226\16\7\22\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\7\2\0\12\7"+
    "\1\227\10\7\22\0\3\7\3\0\3\7\5\0\6\7"+
    "\1\0\1\72\1\7\2\0\12\7\1\230\10\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\4\7\1\231\16\7\22\0\3\7\3\0\3\7"+
    "\5\0\4\7\1\232\1\7\1\0\1\72\1\7\2\0"+
    "\3\7\1\232\17\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\1\7\1\233\21\7"+
    "\23\0\1\234\4\0\3\234\5\0\1\234\2\0\1\234"+
    "\4\0\1\234\6\0\1\234\1\0\1\234\2\0\1\234"+
    "\5\0\1\234\25\0\3\7\3\0\3\7\5\0\2\7"+
    "\1\235\3\7\1\0\1\72\1\7\2\0\5\7\1\235"+
    "\15\7\22\0\3\7\3\0\3\7\5\0\4\7\1\236"+
    "\1\7\1\0\1\72\1\7\2\0\3\7\1\236\17\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\21\7\1\237\1\7\22\0\3\7\3\0"+
    "\3\7\5\0\6\7\1\0\1\72\1\7\2\0\10\7"+
    "\1\240\12\7\22\0\3\7\3\0\3\7\5\0\6\7"+
    "\1\0\1\72\1\7\2\0\16\7\1\241\4\7\22\0"+
    "\3\7\3\0\3\7\5\0\3\7\1\242\2\7\1\0"+
    "\1\72\1\7\2\0\11\7\1\242\11\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\17\7\1\243\3\7\22\0\3\7\3\0\3\7\5\0"+
    "\2\7\1\244\3\7\1\0\1\72\1\7\2\0\5\7"+
    "\1\244\15\7\22\0\3\7\3\0\3\7\5\0\2\7"+
    "\1\245\3\7\1\0\1\72\1\7\2\0\5\7\1\245"+
    "\15\7\22\0\3\7\3\0\3\7\5\0\2\7\1\246"+
    "\3\7\1\0\1\72\1\7\2\0\5\7\1\246\15\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\4\7\1\247\16\7\23\0\1\250\4\0"+
    "\3\250\5\0\1\250\2\0\1\250\4\0\1\250\6\0"+
    "\1\250\1\0\1\250\2\0\1\250\5\0\1\250\25\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\7"+
    "\2\0\6\7\1\251\14\7\22\0\3\7\3\0\3\7"+
    "\5\0\1\7\1\252\4\7\1\0\1\72\1\7\2\0"+
    "\1\252\22\7\22\0\3\7\3\0\3\7\5\0\6\7"+
    "\1\0\1\72\1\7\2\0\17\7\1\253\3\7\22\0"+
    "\3\7\3\0\3\7\5\0\1\7\1\254\4\7\1\0"+
    "\1\72\1\7\2\0\1\254\22\7\22\0\3\7\3\0"+
    "\3\7\5\0\1\7\1\255\4\7\1\0\1\72\1\7"+
    "\2\0\1\255\22\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\7\7\1\256\13\7"+
    "\22\0\3\7\3\0\3\7\5\0\6\7\1\0\1\72"+
    "\1\7\2\0\7\7\1\257\13\7\22\0\3\7\3\0"+
    "\3\7\5\0\1\7\1\260\4\7\1\0\1\72\1\7"+
    "\2\0\1\260\22\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\261\2\0\23\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\12\7\1\262\10\7\22\0\3\7\3\0\3\7\5\0"+
    "\6\7\1\0\1\72\1\7\2\0\10\7\1\222\12\7"+
    "\22\0\3\7\3\0\3\7\5\0\4\7\1\263\1\7"+
    "\1\0\1\72\1\7\2\0\3\7\1\263\17\7\22\0"+
    "\3\7\3\0\3\7\5\0\6\7\1\0\1\72\1\264"+
    "\2\0\23\7\22\0\3\7\3\0\3\7\5\0\2\7"+
    "\1\265\3\7\1\0\1\72\1\7\2\0\5\7\1\265"+
    "\15\7\22\0\3\7\3\0\3\7\5\0\6\7\1\0"+
    "\1\72\1\7\2\0\6\7\1\260\14\7\22\0\3\7"+
    "\3\0\3\7\5\0\6\7\1\0\1\72\1\7\2\0"+
    "\14\7\1\266\6\7\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\1\1\2\11\7\1\1\11"+
    "\12\1\4\11\1\1\11\11\1\1\2\11\1\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\3\0\2\11"+
    "\10\1\1\0\1\11\14\1\5\11\2\1\10\11\3\1"+
    "\1\0\22\1\1\11\1\0\21\1\1\0\16\1\1\0"+
    "\13\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // For assembling string and character constants
  StringBuffer string_buf = new StringBuffer();

  // For line numbers
  public int getCurLineNum() {
    return (yyline + 1);
  }

  private String filename;

  public void setFilename(String fname) {
    filename = fname;
  }

  public String getCurFilename() {
    return filename;
  }

    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BLOGLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BLOGLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { return new Symbol(BLOGTokenConstants.ERROR, 
                         "Line terminator in string or character literal.");
          }
        case 74: break;
        case 51: 
          { string_buf.append('\n');
          }
        case 75: break;
        case 33: 
          { /* closing single-quote not matched by \' rule below */
       Symbol s;
       if (string_buf.length() == 1) {
	   s = new Symbol(BLOGTokenConstants.CHAR_CONST, 
                          new Character(string_buf.charAt(0)));
       } else {
	   s = new Symbol(BLOGTokenConstants.ERROR, 
                          "Character literal must contain exactly one "
                          + "character");
       } 
       string_buf = new StringBuffer(); /* re-init buffer */
       yybegin(YYINITIAL);
       return s;
          }
        case 76: break;
        case 46: 
          { string_buf.append('\"');
          }
        case 77: break;
        case 60: 
          { return new Symbol(BLOGTokenConstants.ELSE);
          }
        case 78: break;
        case 24: 
          { return 
				    new Symbol(BLOGTokenConstants.RBRACKET);
          }
        case 79: break;
        case 68: 
          { return 
				       new Symbol(BLOGTokenConstants.ELSEIF);
          }
        case 80: break;
        case 53: 
          { string_buf.append('\r');
          }
        case 81: break;
        case 45: 
          { int code = Integer.parseInt(yytext().substring(1), 8);
         string_buf.append((char) code);
          }
        case 82: break;
        case 47: 
          { string_buf.append('\'');
          }
        case 83: break;
        case 61: 
          { return new Symbol(BLOGTokenConstants.FALSE);
          }
        case 84: break;
        case 38: 
          { return new Symbol(BLOGTokenConstants.TIME_CONST, 
				       yytext());
          }
        case 85: break;
        case 56: 
          { return new Symbol(BLOGTokenConstants.OBS);
          }
        case 86: break;
        case 21: 
          { return 
				    new Symbol(BLOGTokenConstants.RBRACE);
          }
        case 87: break;
        case 65: 
          { /* universal quantifier */
	return new Symbol(BLOGTokenConstants.FORALL);
          }
        case 88: break;
        case 50: 
          { string_buf.append('\t');
          }
        case 89: break;
        case 35: 
          { yybegin(PAREN_COMMENT);
          }
        case 90: break;
        case 1: 
          { return new Symbol(BLOGTokenConstants.ERROR, 
                                          yytext());
          }
        case 91: break;
        case 10: 
          { return new Symbol(BLOGTokenConstants.ASSIGN);
          }
        case 92: break;
        case 55: 
          { return new Symbol(BLOGTokenConstants.FOR);
          }
        case 93: break;
        case 17: 
          { return new Symbol(BLOGTokenConstants.SEMI);
          }
        case 94: break;
        case 4: 
          { /* Do nothing */
          }
        case 95: break;
        case 16: 
          { return new Symbol(BLOGTokenConstants.GT);
          }
        case 96: break;
        case 57: 
          { return new Symbol(BLOGTokenConstants.TRUE);
          }
        case 97: break;
        case 54: 
          { return new Symbol(BLOGTokenConstants.CLASS_NAME, yytext());
          }
        case 98: break;
        case 40: 
          { return new Symbol(BLOGTokenConstants.EQ);
          }
        case 99: break;
        case 14: 
          { return 
				    new Symbol(BLOGTokenConstants.DISTRIB);
          }
        case 100: break;
        case 72: 
          { return
				   new Symbol(BLOGTokenConstants.PARFACTOR);
          }
        case 101: break;
        case 64: 
          { return 
                                   new Symbol(BLOGTokenConstants.FACTOR);
          }
        case 102: break;
        case 9: 
          { return new Symbol(BLOGTokenConstants.PLUS);
          }
        case 103: break;
        case 3: 
          { /* Integers */
                       return new Symbol(BLOGTokenConstants.INT_CONST,
					                           yytext());
          }
        case 104: break;
        case 22: 
          { return 
				    new Symbol(BLOGTokenConstants.LBRACE);
          }
        case 105: break;
        case 7: 
          { return new Symbol(BLOGTokenConstants.MINUS);
          }
        case 106: break;
        case 71: 
          { return 
				   new Symbol(BLOGTokenConstants.GUARANTEED);
          }
        case 107: break;
        case 30: 
          { /* Char in quotes, not matched by any rule above */
       string_buf.append(yytext());
          }
        case 108: break;
        case 26: 
          { return new Symbol(BLOGTokenConstants.LT);
          }
        case 109: break;
        case 67: 
          { /* existential quantifier */
	return new Symbol(BLOGTokenConstants.EXISTS);
          }
        case 110: break;
        case 5: 
          { yybegin (STR_LIT);
          }
        case 111: break;
        case 73: 
          { return 
				   new Symbol(BLOGTokenConstants.GENERATING);
          }
        case 112: break;
        case 66: 
          { return 
				   new Symbol(BLOGTokenConstants.RANDOM);
          }
        case 113: break;
        case 18: 
          { return new Symbol(BLOGTokenConstants.COLON);
          }
        case 114: break;
        case 59: 
          { return new Symbol(BLOGTokenConstants.THEN);
          }
        case 115: break;
        case 62: 
          { return 
				   new Symbol(BLOGTokenConstants.NONRANDOM);
          }
        case 116: break;
        case 41: 
          { return new Symbol(BLOGTokenConstants.NEQ);
          }
        case 117: break;
        case 29: 
          { /* do nothing */
          }
        case 118: break;
        case 20: 
          { return 
				    new Symbol(BLOGTokenConstants.RPAREN);
          }
        case 119: break;
        case 48: 
          { string_buf.append('\\');
          }
        case 120: break;
        case 8: 
          { return new Symbol(BLOGTokenConstants.DOT);
          }
        case 121: break;
        case 13: 
          { return new Symbol(BLOGTokenConstants.OR);
          }
        case 122: break;
        case 36: 
          { return 
				    new Symbol(BLOGTokenConstants.RIGHTARROW);
          }
        case 123: break;
        case 12: 
          { return new Symbol(BLOGTokenConstants.AND);
          }
        case 124: break;
        case 37: 
          { return 
				    new Symbol(BLOGTokenConstants.DOUBLE_CONST,
					                           yytext());
          }
        case 125: break;
        case 15: 
          { return new Symbol(BLOGTokenConstants.COMMA);
          }
        case 126: break;
        case 32: 
          { /* closing double-quote not matched by \" rule below */
       Symbol s =   new Symbol(BLOGTokenConstants.STR_CONST, 
			       string_buf.toString());
       string_buf = new StringBuffer(); /* reinitialize the buffer */
       yybegin(YYINITIAL);
       return s;
          }
        case 127: break;
        case 28: 
          { yybegin(YYINITIAL);
          }
        case 128: break;
        case 49: 
          { string_buf.append('\b');
          }
        case 129: break;
        case 6: 
          { yybegin (CHAR_LIT);
          }
        case 130: break;
        case 69: 
          { return 
                                   new Symbol(BLOGTokenConstants.GENERATING);
          }
        case 131: break;
        case 19: 
          { return 
				    new Symbol(BLOGTokenConstants.LPAREN);
          }
        case 132: break;
        case 34: 
          { yybegin(LINE_COMMENT);
          }
        case 133: break;
        case 39: 
          { return new Symbol(BLOGTokenConstants.IF);
          }
        case 134: break;
        case 52: 
          { string_buf.append('\f');
          }
        case 135: break;
        case 23: 
          { return 
				    new Symbol(BLOGTokenConstants.LBRACKET);
          }
        case 136: break;
        case 11: 
          { return new Symbol(BLOGTokenConstants.NEG);
          }
        case 137: break;
        case 42: 
          { return new Symbol(BLOGTokenConstants.GEQ);
          }
        case 138: break;
        case 44: 
          { return new Symbol(BLOGTokenConstants.ERROR, 
                         "Unrecognized escape character: \'" 
                         + yytext() + "\'");
          }
        case 139: break;
        case 58: 
          { return new Symbol(BLOGTokenConstants.TYPE);
          }
        case 140: break;
        case 43: 
          { return new Symbol(BLOGTokenConstants.LEQ);
          }
        case 141: break;
        case 2: 
          { return new Symbol(BLOGTokenConstants.ID, yytext());
          }
        case 142: break;
        case 70: 
          { int code = Integer.parseInt(yytext().substring(2), 16);
       string_buf.append((char) code);
          }
        case 143: break;
        case 25: 
          { return 
                                    new Symbol(BLOGTokenConstants.NUMSIGN);
          }
        case 144: break;
        case 63: 
          { return new Symbol(BLOGTokenConstants.QUERY);
          }
        case 145: break;
        case 27: 
          { 
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   switch(yystate()) {
    case YYINITIAL:
    /* nothing special to do in the initial state */
      break;
    case PAREN_COMMENT:
      return new Symbol(BLOGTokenConstants.ERROR, 
                        "File ended before comment was terminated.");
    case STR_LIT:
    case CHAR_LIT:
      return new Symbol(BLOGTokenConstants.ERROR, 
                        "File ended before string or character literal "
                        + "was terminated.");

  }
  /* Reinitialize everything before signaling EOF */
  string_buf = new StringBuffer();
  yybegin(YYINITIAL);
  return new Symbol(BLOGTokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
