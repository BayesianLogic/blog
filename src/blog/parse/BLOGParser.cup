/*
 * Copyright (c) 2005, 2012, 2013, 2014, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * * Neither the name of the University of California, Berkeley nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior
 *   written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * use JFlex
 * @author leili
 * @author bramsundar
 * @author tejas
 * @date 2014-06
 */

package blog.parse;
import java_cup.runtime.*;
import blog.absyn.*;


action code {:

  static blog.symbol.Symbol sym(String s) {
           return blog.symbol.Symbol.Symbol(s);
  }

  void error(int line, int col, String msg) {
    parser.errorMsg.error(line, col, msg);
  }

  void error(Location s, String msg){
    parser.errorMsg.error(s.getLine(), s.getColumn(), msg);
  }


:}


parser code {:
  Absyn parseResult; //variable to store the final parsing result
  blog.msg.ErrorMsg errorMsg; //for error

  public Absyn getParseResult() {
    return parseResult;
  }
  
  public BLOGParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf, blog.msg.ErrorMsg msg) {
    this(s, sf);
    errorMsg = msg;
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) info;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), message);
    } else errorMsg.error(0, 0, message);
  }
  
  public void unrecovered_syntax_error(Symbol cur_token) {
    if (cur_token instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) cur_token;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), "cannot continue parse at " + s);
    } else errorMsg.error(0, 0, "the last encounterd token #" + cur_token);
  }
  
  public void syntax_error(Symbol cur_token) {
   if (cur_token instanceof java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) {
      java_cup.runtime.ComplexSymbolFactory.ComplexSymbol s = 
        (java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) cur_token;
      errorMsg.error(s.xleft.getLine(), s.xleft.getColumn(), "syntax error at " + s);
    } else errorMsg.error(0, 0, "the last encounterd token #" + cur_token);
  }
  
  /**
   * first try to use the default error recover
   * if it doesnot succeed, try to do reduce
   */
  protected boolean error_recovery(boolean debug) throws java.lang.Exception {
    int act = get_action(((Symbol)stack.peek()).parse_state, error_sym());
    Symbol lhs_sym;
    short handle_size, lhs_sym_num;
    while (act < 0) {
        /* perform the action for the reduce */
        lhs_sym = do_action((-act)-1, this, stack, tos);

        /* look up information about the production */
        lhs_sym_num = production_tab[(-act)-1][0];
        handle_size = production_tab[(-act)-1][1];

        /* pop the handle off the stack */
        for (int i = 0; i < handle_size; i++) {
          stack.pop();
          tos--;
        }
        
        /* look up the state to go to from the one popped back to */
        act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);

        /* shift to that state */
        lhs_sym.parse_state = act;
        
        stack.push(lhs_sym);
        tos++;
        act = get_action(((Symbol)stack.peek()).parse_state, error_sym());
    }
    return super.error_recovery(debug);
  }

// WC: Methods that get automatically invoked when using the builtin error recovery mechanism.  
/*
public void report_error(String message, Object info)
    This method should be called whenever an error message is to be issued. In the default implementation of this method, the first parameter provides the text of a message which is printed on System.err and the second parameter is simply ignored. It is very typical to override this method in order to provide a more sophisticated error reporting mechanism. 
public void report_fatal_error(String message, Object info)
    This method should be called whenever a non-recoverable error occurs. It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(), and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early). 
public void syntax_error(Symbol cur_token)
    This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted). In the default implementation it calls: report_error("Syntax error", null);. 
public void unrecovered_syntax_error(Symbol cur_token)
    This method is called by the parser if it is unable to recover from a syntax error. In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);. 
*/
:}

init with {:

:}

/* Terminal declarations; a few have types for associated lexemes.  The
 * token ERROR is never used in the parser; thus, it is a parse error when
 * the lexer returns it. For the terminals' interpretations, consult with
 * BLOGLexer.lex.
 */
terminal ELSE, IF, THEN, CASE;
terminal TYPE, RANDOM, FIXED, ORIGIN, DISTINCT,
        QUERY, OBS, PARAM, LIST, MAP, DISTRIBUTION;
terminal EXISTS, FORALL;
terminal FOR;
terminal NULL;
terminal java.lang.Number INT_LITERAL, DOUBLE_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHAR_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String ID;
//terminal PARFACTOR, FACTOR; // Not Yet Implemented
terminal AT; // time operator
terminal PLUS, MINUS, MULT, DIV, MOD, POWER, UMINUS; //arithmetic operator
terminal LT, GT, LEQ, GEQ; // relational_expression
terminal EQEQ, NEQ; // equality compare
terminal EQ; // assignment operator
terminal DISTRIB;
terminal NOT, AND, OR, DOUBLERIGHTARROW; // logical operator
terminal COMMA, SEMI, COLON, DOT, NUMSIGN, RIGHTARROW; //seperators
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET; // paired seperators

nonterminal program;
nonterminal StmtList opt_statement_lst, statement_lst;
nonterminal Stmt statement, declaration_stmt, type_decl, fixed_func_decl,
  rand_func_decl, number_stmt, origin_func_decl,
  distinct_decl, distribution_decl, parameter_decl,
  evidence_stmt, query_stmt;
nonterminal Stmt evidence, value_evidence;
nonterminal Expr expression, literal, operation_expr, unary_operation_expr,
  quantified_formula, list_construct_expression,
  map_construct_expression, number_expr, if_expr, case_expr;
nonterminal FuncCallExpr function_call;
nonterminal Expr dependency_statement_body;
nonterminal SetExpr set_expr;
nonterminal ExplicitSetExpr explicit_set;
nonterminal ImplicitSetExpr implicit_set;
nonterminal TupleSetExpr tuple_set;
nonterminal ExprList semi_colon_separated_expression_list,
  opt_expression_list, expression_list, semi_ending_expression_list;
nonterminal ExprTupleList expression_pair_list;
nonterminal Ty type, list_type, map_type;
nonterminal ArrayTy array_type;
nonterminal String array_type_or_sub;

//attempt catch type var list errors
nonterminal extra_commas;

//nonterminal Integer dims; //not used
//nonterminal FieldList type_lst // Not Used
nonterminal FieldList opt_parenthesized_type_var_lst, 
  parenthesized_type_var_lst, type_var_lst;
nonterminal OriginFieldList opt_parenthesized_origin_var_list,
  origin_var_list;
nonterminal SymbolArray id_or_subid;
nonterminal SymbolArrayList id_or_subid_list;
nonterminal String refer_name;


/*
 * Precedence declarations.  The later the precedence declaration, the
 * higher the precedence.
 */
precedence nonassoc EQ, DISTRIB;
precedence left SEMI;
precedence left ELSE;
precedence left RIGHTARROW;
precedence left DOUBLERIGHTARROW;
precedence left AND, OR;
precedence nonassoc LT, GT, LEQ, GEQ, EQEQ, NEQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD, POWER;
precedence left UMINUS;
precedence left NOT, AT;
precedence left LBRACKET/*, RBRACKET, LPAREN, RPAREN*/;

/* Grammar *******************************************************************/

start with program;


/* The start nonterminal */
program ::= opt_statement_lst : e {: parser.parseResult = e;  :} 
  ;

/* Represents a possibly-empty list of statements. */
opt_statement_lst ::= /* EMPTY */ {: RESULT = null; :}
  | statement_lst : e {: RESULT = e; :}
  | statement_lst:e error:er
  {: RESULT = e; :}
  | statement:s 
  {: error(sxright, "missing semicolon"); 
     if (s != null) {
       RESULT = new StmtList(s, null);
     } 
  :}
  ;

/* Represents a non-empty list of statements terminated by semicolons. */
statement_lst ::= statement:e SEMI statement_lst:slst
    {: if (e==null) RESULT = slst;
       else RESULT = new StmtList(e, slst);
    :}
  | statement:e SEMI {: if (e!=null) RESULT = new StmtList(e, null); 
                        else RESULT = null; :}
  | statement:s statement_lst:slst
  {: error(sxright, "missing semicolon"); RESULT = slst; :}
  | error:er SEMI statement_lst:slst 
    {: RESULT = slst; :}
  | error:er SEMI
    {: RESULT = null; :}
  | error
    {: RESULT = null; :}
;

/* A statement can be a declaration, an observation (assertion of some
 * evidence), or a query.
 */
statement ::= declaration_stmt : e {: RESULT = e; :}
  | evidence_stmt : e {: RESULT = e; :}
  | query_stmt : e {: RESULT = e; :}
  ;

/* Represents a declaration, which can be:
 *    * a type declaration;
 *    * a parameter declaration;
 *    * a random function or generating function declaration
 *        (Semantic checks:
 *            - whether the return type is a declared type;
 *            - whether the argument types have been declared (an error-check
 *      propagated from the type_lst production.);
 *    * a random function definition
 *    * a non-random function (or constant) declaration
 *    * a non-random function (or constant) definition, specifying the
 *      interpretation of the function
 *    * a random function dependency statement description
 *        (Semantic checks:
 *        - whether the numbers of actual and declared parameters match;
 *            - whether the function by this name has been declared.);
 *    * a guaranteed object declaration
 *        (Semantic checks:
 *            - whether the type has been declared.);
 *    * a POP number statement description
 *        (Semantic checks:
 *            - whether the numbers of generating functions and parameters
 *                match;
 *            - whether the generating functions have been declared (an
 *                error-check propagated from the function_lst production);
 *            - whether each generating function takes exactly one parameter (an
 *                error-check propagated from the function_lst production);
 *            - whether the only parameter of each generating function is of the
 *                type being generated.).
 *    * a parfactor statement // not used in current blog
 */
declaration_stmt ::=
    type_decl:e {: RESULT = e; :}
  | fixed_func_decl:e {: RESULT = e; :}
  | rand_func_decl:e {: RESULT = e; :}
  | origin_func_decl : e {: RESULT = e; :}
  | number_stmt : e {: RESULT = e; :}
  | distinct_decl : e {: RESULT = e; :}
  | parameter_decl : e {: RESULT = e; :}
  | distribution_decl :e {: RESULT = e; :}
/*  | parfactor : e {: RESULT = e; :}  */
  ;

type_decl ::= TYPE:ty ID:typename 
    {: RESULT = new TypeDec(tyxleft.getLine(), tyxleft.getColumn(), sym(typename)); :}
  | TYPE:ty error:err
    {: error(tyxright, "malformed or missing id"); :}  
  ;

/*
 * Represents a type that is built in or has already been declared.
 * can also be an array
 */
type ::= refer_name:typename
    {: RESULT = new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)); :}
  | list_type:e {: RESULT = e; :}
  | array_type : at {: RESULT = at; :}
  | map_type:e {: RESULT = e; :}
  ;

list_type ::= LIST:l LT refer_name:typename GT
    /* here general name is allowed, but internally only allow nametype as list */
    {: RESULT = new ListTy(lxleft.getLine(), lxleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename))); :}
  ;

array_type_or_sub ::= refer_name:typename LBRACKET
  {: RESULT = typename; :}
  ;

array_type ::= array_type_or_sub:typename RBRACKET
    /* internally only allow nametype as array */
    {: RESULT = new ArrayTy(typenamexleft.getLine(), typenamexleft.getColumn(), 
      new NameTy(typenamexleft.getLine(), typenamexleft.getColumn(), sym(typename)), 1); :} 
  | array_type : arrty LBRACKET RBRACKET
    {: arrty.dim += 1; 
      RESULT = arrty; :} 
  ;

map_type ::= MAP:m LT type:t1 COMMA type:t2 GT
    {: RESULT = new MapTy(mxleft.getLine(), mxleft.getColumn(), t1, t2); :}
  ;

/* A possibly empty list of IDs denoting type names. */
// Currently commented this code out since it isn't being
// used anywhere else in this cup file and cup is giving
// warnings. Uncomment once these rules are used elsewhere.
//   
//opt_parenthesized_type_lst ::= /* EMPTY */
//      {: RESULT = null; :}
//      | LPAREN RPAREN
//      {: RESULT = null; :}
//      | LPAREN type_lst:tl RPAREN
//      {: RESULT = tl; :}
//      ;

//type_lst ::= type:ty COMMA type_lst:tl
//    {: RESULT = new FieldList(null, ty, tl); :}
//  | type:ty
//    {: RESULT = new FieldList(null, ty, null); :}
//  ;

/* Represents a list of IDs denoting type names. */
opt_parenthesized_type_var_lst ::= /* */
    {: RESULT = null; :}
  | parenthesized_type_var_lst:tvl
    {: RESULT = tvl; :}
  | type_var_lst:tvl
    {: error(tvlxleft, "missing parentheses");
      error(tvlxright, "missing parentheses");
      RESULT = tvl;
    :}        
  ;

parenthesized_type_var_lst ::= 
  LPAREN RPAREN
    {: RESULT = null; :}
  | LPAREN type_var_lst:tl RPAREN
    {: RESULT = tl; :}
  | error:lp parenthesized_type_var_lst:tl
    {: error(lpxleft, "syntax error"); 
      RESULT = tl; :}
  ;

extra_commas ::= COMMA COMMA
  | extra_commas COMMA
  ;

type_var_lst ::= type:ty ID:id COMMA type_var_lst:tl
    {: RESULT = new FieldList(sym(id), ty, tl); :}
  | type:ty ID:id
    {: RESULT = new FieldList(sym(id), ty, null); :}
  | type:ty ID:id extra_commas type_var_lst:tl
    {: error(idxright, "extra commas"); 
      RESULT = new FieldList(sym(id), ty, tl); :}
  | type:ty ID:id type_var_lst:tl
    {: error(idxright, "missing comma"); 
      RESULT = new FieldList(sym(id), ty, tl);:}
  | type:ty COMMA type_var_lst:tl
    {: error(tyxright, "missing id"); 
      RESULT = tl;:}
  ;

/* A nonrandom function declaration may declare a nonrandom constant or
 * a non-random function.  The distinction is whether there is a
 * parenthesized list of arguments after the function/constant name.
 */
fixed_func_decl ::=
    FIXED:fx type:ret_type ID:fname opt_parenthesized_type_var_lst:otl
    EQ expression:ex
    {: RESULT = new FixedFuncDec(fxxleft.getLine(), fxxleft.getColumn(), sym(fname), otl, ret_type, ex); :}
  ;

/**
 * random function declaration
 * including dependency statement
 */
rand_func_decl ::=
    RANDOM:r type:ret_type ID:fname opt_parenthesized_type_var_lst:otl
    dependency_statement_body:body 
    {: RESULT = new RandomFuncDec(rxleft.getLine(), rxleft.getColumn(), sym(fname), otl, ret_type, body); :}
   ;

/**
 * number statement
 */
number_stmt ::=
    NUMSIGN:n refer_name:ty opt_parenthesized_origin_var_list:otl
  dependency_statement_body:body
    {: RESULT = new NumberDec(nxleft.getLine(), nxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), otl, body); :}
   | NUMSIGN:ns opt_parenthesized_origin_var_list:otl
  dependency_statement_body:body 
    {: error(nsxright, "missing type name"); RESULT = null; :}
   | NUMSIGN:ns error:err dependency_statement_body:body
   {: error(nsxright, "error in origin variable list"); :}
  ;

/* list of origin_fun = var, used in number statement */
opt_parenthesized_origin_var_list ::= /* Empty */
    {: RESULT = null; :}
  | LPAREN origin_var_list:e RPAREN
    {: RESULT = e; :}
  ;

origin_var_list ::= ID:func EQ ID:var COMMA origin_var_list:n
    {: RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n); :}
  | ID:func EQ ID:var extra_commas:ec origin_var_list:n
    {: error(ecxleft, "extra commas");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);:}
  | ID:func EQ:e COMMA origin_var_list:n
    {: error(exright, "missing origin var name");
      RESULT = n;:}
  | ID:func EQ ID:var origin_var_list:n
    {: error(varxright, "missing comma");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), n);:}
  | ID:func EQ ID:var
    {: RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null); :}
  | ID:func ID:var
    {: error(funcxright, "missing =");
      RESULT = new OriginFieldList(funcxleft.getLine(), 
      funcxleft.getColumn(), sym(func), sym(var), null);:}
  ;

/**
 * origin function declaration
 */
origin_func_decl ::=
    ORIGIN:o type:ret_type ID:fname LPAREN type:arg_type RPAREN 
    {: RESULT = new OriginFuncDec(oxleft.getLine(), oxleft.getColumn(), sym(fname),
      new FieldList(null, arg_type, null), ret_type); :}
  | ORIGIN:o type:ret_type ID:fname LPAREN:lp error:er RPAREN 
    {: error(lpxright, "syntax error in type argument of origin function");
      RESULT = null;
    :}
  | ORIGIN:o type:ret_type LPAREN type:arg_type RPAREN 
    {: error(ret_typexright, "missing type or origin function name");
      RESULT = null;
    :}
  ;

/**
 * declaration of distinct symbols, (guaranteed objects)
 */
distinct_decl ::=
    DISTINCT:d refer_name:ty id_or_subid_list:e 
    {: RESULT = new DistinctSymbolDec(dxleft.getLine(), dxleft.getColumn(), 
    new NameTy(tyxleft.getLine(), tyxleft.getColumn(), sym(ty)), e); :}
  ;

id_or_subid_list ::= id_or_subid:e {: RESULT = new SymbolArrayList(e, null); :}
  | id_or_subid:e COMMA id_or_subid_list:n
    {: RESULT = new SymbolArrayList(e, n); :}
  | id_or_subid:e id_or_subid_list:n
    {: error(exright, "missing COMMA"); 
        RESULT = new SymbolArrayList(e, n);
    :}
  | id_or_subid:e extra_commas:ec id_or_subid_list:n
    {: error(ecxleft, "extra COMMA"); 
      RESULT = new SymbolArrayList(e, n); :}
  ;

id_or_subid ::= ID:id
    {: RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id)); :}
  | ID:id LBRACKET INT_LITERAL:s RBRACKET
    {: RESULT = new SymbolArray(idxleft.getLine(), idxleft.getColumn(), sym(id), s.intValue()); :}
  ;

/**
 * declaration of a distribution
 */
distribution_decl ::=
    DISTRIBUTION:d ID:id EQ refer_name:name
    LPAREN opt_expression_list:e RPAREN 
    {: RESULT = new DistributionDec(dxleft.getLine(), dxleft.getColumn(), sym(id),
      sym(name), e); :}
  ;

/* reference to function name or Java class */
refer_name ::= ID:id {: RESULT = id; :}
  | ID:id DOT refer_name:n {: RESULT = id + "." + n; :}
  ;

/**
 * body of random function or number statement
 */
dependency_statement_body ::= DISTRIB expression:e
    {: RESULT = e; :}
  ;

parameter_decl ::= PARAM:p type:ty ID:id 
    {: RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), null); :}
  | PARAM:p type:ty ID:id COLON expression:e 
    {: RESULT = new ParameterDec(pxleft.getLine(), pxleft.getColumn(), ty, sym(id), e); :}
  ;

/* Represents an expression, which can be either a 0-ary function application, a
 * variable, a  non-0-ary function application, or a built-in constant.
 * (Propagates an error-check from production for specific kinds of terms.)
 *
 * Result is null if the term is invalid.
 */
expression ::= operation_expr:e  {: RESULT = e; :}
  | literal:e  {: RESULT = e; :}
  | function_call:e {: RESULT = e; :}
  | list_construct_expression:e {: RESULT = e; :}
  | map_construct_expression:e {: RESULT = e; :}
  | quantified_formula:e {: RESULT = e; :}
  | set_expr:e {: RESULT = e; :}
  | number_expr:e {: RESULT = e; :}
  | if_expr:e {: RESULT = e; :}
  | case_expr:e {: RESULT = e; :}
  ;

literal ::= STRING_LITERAL:e
    {: RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.intern()); :}
  | CHAR_LITERAL:e
    {: RESULT = new StringExpr(exleft.getLine(), exleft.getColumn(), e.toString().intern()); :}
  | INT_LITERAL:e
    {: RESULT = new IntExpr(exleft.getLine(), exleft.getColumn(), e.intValue()); :}
  | DOUBLE_LITERAL:e
    {: RESULT = new DoubleExpr(exleft.getLine(), exleft.getColumn(), e.doubleValue()); :}
  | BOOLEAN_LITERAL:e
    {: RESULT = new BooleanExpr(exleft.getLine(), exleft.getColumn(), e.booleanValue()); :}
  | NULL:e
    {: RESULT = new NullExpr(exleft.getLine(), exleft.getColumn()); :}
  ;

operation_expr ::= 
  expression:e1 PLUS expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.PLUS, e2); :}
  | expression:e1 MINUS expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MINUS, e2); :}
  | expression:e1 MULT expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MULT, e2); :}
  | expression:e1 DIV expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.DIV, e2); :}
  | expression:e1 MOD expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.MOD, e2); :}
  | expression:e1 POWER expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.POWER, e2); :}
  | expression:e1 LT expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LT, e2); :}
  | expression:e1 GT expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GT, e2); :}
  | expression:e1 LEQ expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.LEQ, e2); :}
  | expression:e1 GEQ expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.GEQ, e2); :}
  | expression:e1 EQEQ expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.EQ, e2); :}
  | expression:e1 NEQ expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.NEQ, e2); :}
  | expression:e1 AND expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.AND, e2); :}
  | expression:e1 OR expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.OR, e2); :}
  | expression:e1 DOUBLERIGHTARROW expression:e2
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.IMPLY, e2); :}
  | expression:e1 LBRACKET expression:e2 RBRACKET
    {: RESULT = new OpExpr(e1xleft.getLine(), e1xleft.getColumn(), e1, OpExpr.SUB, e2); :}
  | expression:e1 LBRACKET error:err
    {: error(errxleft, "operation expression syntax error"); :}
  | unary_operation_expr:e {: RESULT = e; :}
  ;

unary_operation_expr ::=
    MINUS:m expression:e
    {: RESULT = new OpExpr(mxleft.getLine(), mxleft.getColumn(), new IntExpr(exleft.getLine(), exleft.getColumn(), 0), OpExpr.MINUS, e); :}
    %prec UMINUS
  | NOT:n expression:e
    {: RESULT = new OpExpr(nxleft.getLine(), nxleft.getColumn(), null, OpExpr.NOT, e); :}
  | AT:a expression:e
    {: RESULT = new OpExpr(axleft.getLine(), axleft.getColumn(), null, OpExpr.AT, e); :}
  | LPAREN expression:e RPAREN
    {: RESULT = e; :}
  ;  

quantified_formula ::= FORALL:f type:ty ID:id expression:e
    {: RESULT = new QuantifiedFormulaExpr(fxleft.getLine(), fxleft.getColumn(),
    QuantifiedFormulaExpr.FORALL, ty, sym(id), e); :}
  | EXISTS:ex type:ty ID:id expression:e
    {: RESULT = new QuantifiedFormulaExpr(exxleft.getLine(), exxleft.getColumn(),
    QuantifiedFormulaExpr.EXISTS, ty, sym(id), e); :}  
  ;

function_call ::= refer_name:id LPAREN opt_expression_list:e RPAREN
    {: RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), e); :}
  | refer_name:id LPAREN error:err
   {: error(errxleft, "error in body of function call"); :}
  | refer_name:id 
    {: RESULT = new FuncCallExpr(idxleft.getLine(), idxleft.getColumn(), sym(id), null); :}
  ;

if_expr ::= IF:a expression:e1 THEN expression:e2 ELSE expression:e3 
    {: RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, e3); :}
  | IF:a expression:e1 THEN expression:e2
    {: RESULT = new IfExpr(axleft.getLine(), axleft.getColumn(), e1, e2, null); :}
  ;

opt_expression_list ::= expression_list:e {: RESULT = e; :}
  | {: RESULT = null; :}
  ;

expression_list ::= expression:e COMMA expression_list:elst
    {: RESULT = new ExprList(e, elst); :}
  | expression:e
    {: RESULT = new ExprList(e, null); :}
  | expression:e extra_commas:ec expression_list:elst
    {: error(ecxleft, "extra commas in expression list");:}
  ;

list_construct_expression ::= LBRACKET:l opt_expression_list:e RBRACKET
    {: RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); :}
  | LBRACKET:l semi_colon_separated_expression_list:e RBRACKET
    {: RESULT = new ListInitExpr(lxleft.getLine(), lxleft.getColumn(), e); :}
  ;

semi_colon_separated_expression_list ::=
    semi_ending_expression_list:e semi_colon_separated_expression_list:elst
    {: RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), elst); :}
  | semi_ending_expression_list:e expression_list:e2
    {: RESULT = new ExprList(new ListInitExpr(exleft.getLine(), exleft.getColumn(), e), 
    new ExprList(new ListInitExpr(e2xleft.getLine(), e2xleft.getColumn(), e2), null)); :}
  ;

semi_ending_expression_list ::=
    expression_list:e SEMI
    {: RESULT = e; :}
  | semi_ending_expression_list:e SEMI:s 
    {: error(sxleft, "extra semicolon"); 
      RESULT = e;
    :}
  ;
map_construct_expression ::= LBRACE:l expression_pair_list:e RBRACE
    {: RESULT = new MapInitExpr(lxleft.getLine(), lxleft.getColumn(), e); :}
  ;

// to avoid conflict with Imply expression
expression_pair_list ::=
    expression:e1 RIGHTARROW expression:e2 COMMA expression_pair_list:e3
    {: RESULT = new ExprTupleList(e1, e2, e3); :}
  | expression:e1 RIGHTARROW expression:e2 
    {: RESULT = new ExprTupleList(e1, e2, null); :}
  ;
  
number_expr ::= NUMSIGN:n set_expr:e
    {: RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), e); :}
  | NUMSIGN:n type:ty
    {: RESULT = new NumberExpr(nxleft.getLine(), nxleft.getColumn(), new ImplicitSetExpr(tyxleft.getLine(), tyxleft.getColumn(), ty, null, null)); :}
  | NUMSIGN error:err
    {: error(errxleft, "expecting number expression here. # should be followed by a type or a set"); :}
  ;

set_expr ::= explicit_set:e {: RESULT = e; :}
  | implicit_set:e {: RESULT = e; :}
  | tuple_set:e {: RESULT = e; :}
  ;

explicit_set ::= LBRACE:l opt_expression_list:e RBRACE
    {: RESULT = new ExplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), e); :}
  ;

implicit_set ::= LBRACE:l type:ty ID:id COLON expression:e RBRACE
    {: RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), e); :}
  | LBRACE:l type:ty ID:id RBRACE
    {: RESULT = new ImplicitSetExpr(lxleft.getLine(), lxleft.getColumn(), ty, sym(id), null); :}
  | LBRACE:l type ID  COLON error:err RBRACE
    {: error(errxleft, "malformed expression in implicit set"); :}
  ;

tuple_set ::= LBRACE:l expression_list:elst FOR type_var_lst:vars COLON expression:e RBRACE
    {: RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, e); :}
  | LBRACE:l expression_list:elst FOR type_var_lst:vars RBRACE
    {: RESULT = new TupleSetExpr(lxleft.getLine(), lxleft.getColumn(), elst, vars, null); :}
  ;

///no implementation for PARFACTOR


/* Represents an evidence statement, which can be:
 *
 *    * a symbol evidence statement, listing observed objects of the specified
 *    type subject to certain constraints
 *        (Semantic checks:
 *        - whether the type for which the evidence is presented has been
 *      declared;
 *        - whether the formula is valid (error-check is propagated from
 *      the productions for various kinds of formulas).);
 *    * a value evidence statement, stating the value of the specified
 *    function on the specified tuple of arguments
 *        (Semantic checks:
 *        - whether the numbers of the function's parameters and arguments
 *      passed to it match;
 *            - whether the function has been declared.).
 */
evidence_stmt ::= OBS evidence:e  {: RESULT = e; :}
                | OBS error {: RESULT = null; :}
              ;

evidence ::=
    value_evidence:e {: RESULT = e; :}
//  | tuple_evidence:e {: RESULT = e; :} //not implemented yet
  ;

/* valid evidence format include (will be checked in semantic checking)
 *   - general form: random expression = fixed expression
 *   - symbol evidence: implicit_set = explicit_set of ids
 *   - number_evidence: # implicit_set = int constant
 */
value_evidence ::=
    expression:e1 EQ expression:e2
    {: RESULT = new ValueEvidence(e1xleft.getLine(), e1xleft.getColumn(), e1, e2); :}
    | error:err EQ expression:e2
    {:error(errxleft, "incorrect first expression"); RESULT = null;:}
    | expression:e1 EQ error:err
    {:error(errxleft, "incorrect second expression"); RESULT = null;:}
  ;

query_stmt ::= QUERY:q  expression:e
    {: RESULT = new QueryStmt(qxleft.getLine(), qxleft.getColumn(), e); :}
  | QUERY:q error 
    {: error(qxright, "invalid query"); 
      RESULT = null;:}
  ;

